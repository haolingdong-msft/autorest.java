// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.adp.datamanagement.models;

import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.Map;

/** Custom query data set: Measurement and metadata. */
@Immutable
public final class MeasurementWithMetadata {
    /*
     * The measurement identifier.
     */
    @JsonProperty(value = "measurementId", required = true, access = JsonProperty.Access.WRITE_ONLY)
    private String measurementId;

    /*
     * The storage account location which contains the measurement
     */
    @JsonProperty(value = "location", required = true)
    private String location;

    /*
     * The UTC time the measurement was ingested at
     */
    @JsonProperty(value = "ingestTimestampUtc")
    private OffsetDateTime ingestTimestampUtc;

    /*
     * The endpoint uri of the owning resource
     */
    @JsonProperty(value = "resourceEndpoint", access = JsonProperty.Access.WRITE_ONLY)
    private String resourceEndpoint;

    /*
     * The ID of the external package (for example, the disk which contained data) as specified by the customer upon
     * data ingestion
     */
    @JsonProperty(value = "externalPackageId")
    private String externalPackageId;

    /*
     * ID of the upload process which caused the creation of this measurement
     */
    @JsonProperty(value = "uploadId")
    private String uploadId;

    /*
     * ID of the discovery process which caused the creation of this measurement
     */
    @JsonProperty(value = "discoveryId")
    private String discoveryId;

    /*
     * The UTC time the measurement was recorded at
     */
    @JsonProperty(value = "recordTimestampUtc")
    private OffsetDateTime recordTimestampUtc;

    /*
     * The entity tag for this resource.
     */
    @JsonProperty(value = "etag", required = true)
    private String etag;

    /*
     * The measurement metadata dictionary
     */
    @JsonProperty(value = "metadata", required = true)
    private Map<String, String> metadata;

    /**
     * Creates an instance of MeasurementWithMetadata class.
     *
     * @param location the location value to set.
     * @param etag the etag value to set.
     * @param metadata the metadata value to set.
     */
    @JsonCreator
    private MeasurementWithMetadata(
            @JsonProperty(value = "location", required = true) String location,
            @JsonProperty(value = "etag", required = true) String etag,
            @JsonProperty(value = "metadata", required = true) Map<String, String> metadata) {
        this.location = location;
        this.etag = etag;
        this.metadata = metadata;
    }

    /**
     * Get the measurementId property: The measurement identifier.
     *
     * @return the measurementId value.
     */
    public String getMeasurementId() {
        return this.measurementId;
    }

    /**
     * Get the location property: The storage account location which contains the measurement.
     *
     * @return the location value.
     */
    public String getLocation() {
        return this.location;
    }

    /**
     * Get the ingestTimestampUtc property: The UTC time the measurement was ingested at.
     *
     * @return the ingestTimestampUtc value.
     */
    public OffsetDateTime getIngestTimestampUtc() {
        return this.ingestTimestampUtc;
    }

    /**
     * Get the resourceEndpoint property: The endpoint uri of the owning resource.
     *
     * @return the resourceEndpoint value.
     */
    public String getResourceEndpoint() {
        return this.resourceEndpoint;
    }

    /**
     * Get the externalPackageId property: The ID of the external package (for example, the disk which contained data)
     * as specified by the customer upon data ingestion.
     *
     * @return the externalPackageId value.
     */
    public String getExternalPackageId() {
        return this.externalPackageId;
    }

    /**
     * Get the uploadId property: ID of the upload process which caused the creation of this measurement.
     *
     * @return the uploadId value.
     */
    public String getUploadId() {
        return this.uploadId;
    }

    /**
     * Get the discoveryId property: ID of the discovery process which caused the creation of this measurement.
     *
     * @return the discoveryId value.
     */
    public String getDiscoveryId() {
        return this.discoveryId;
    }

    /**
     * Get the recordTimestampUtc property: The UTC time the measurement was recorded at.
     *
     * @return the recordTimestampUtc value.
     */
    public OffsetDateTime getRecordTimestampUtc() {
        return this.recordTimestampUtc;
    }

    /**
     * Get the etag property: The entity tag for this resource.
     *
     * @return the etag value.
     */
    public String getEtag() {
        return this.etag;
    }

    /**
     * Get the metadata property: The measurement metadata dictionary.
     *
     * @return the metadata value.
     */
    public Map<String, String> getMetadata() {
        return this.metadata;
    }
}
