// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.adp.datamanagement;

import com.adp.datamanagement.models.DataStream;
import com.adp.datamanagement.models.DataStreamCreationParameters;
import com.adp.datamanagement.models.DataStreamsGraphListResponse;
import com.adp.datamanagement.models.FindDataStreamByLineageGraphRequestParameters;
import com.adp.datamanagement.models.FindDataStreamByLineageRequestParameters;
import com.adp.datamanagement.models.FindDataStreamByTagsRequestParameters;
import com.adp.datamanagement.models.LongRunningOperation;
import com.adp.datamanagement.models.UploadDerivedDataStreamFilesRequest;
import com.adp.datamanagement.models.UploadDerivedDataStreamFilesResponse;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.polling.SyncPoller;

/** Initializes a new instance of the synchronous DataStreamClient type. */
@ServiceClient(builder = DataStreamClientBuilder.class)
public final class DataStreamClient {

    @Generated private final DataStreamAsyncClient client;

    /**
     * Initializes an instance of DataStreamClient class.
     *
     * @param client the async client.
     */
    @Generated
    DataStreamClient(DataStreamAsyncClient client) {
        this.client = client;
    }

    /**
     * Get data-stream by identifier.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     dataStreamId: String (Required)
     *     resourceEndpoint: String (Optional)
     *     lineage (Required): {
     *         producerMetadata (Required): {
     *             String: String (Required)
     *         }
     *         inputs (Required): [
     *              (Required){
     *                 sourceDataStreamId: String (Required)
     *                 channels (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *         ]
     *     }
     *     status: String(Created/Completing/Completed/Failed/Failing/Clearing/Cleared) (Required)
     *     type: String(System/Raw/Derived) (Required)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return data-stream by identifier along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(
            String measurementId, String dataStreamId, RequestOptions requestOptions) {
        return this.client.getWithResponse(measurementId, dataStreamId, requestOptions).block();
    }

    /**
     * Creates new data-stream resource.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     lineage (Required): {
     *         producerMetadata (Required): {
     *             String: String (Required)
     *         }
     *         inputs (Required): [
     *              (Required){
     *                 sourceDataStreamId: String (Required)
     *                 channels (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginCreate(String measurementId, RequestOptions requestOptions) {
        return this.client.beginCreate(measurementId, requestOptions).getSyncPoller();
    }

    /**
     * Clear the data-stream content.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginClearContent(
            String measurementId, String dataStreamId, RequestOptions requestOptions) {
        return this.client.beginClearContent(measurementId, dataStreamId, requestOptions).getSyncPoller();
    }

    /**
     * Lists the existing data-streams. Supports the following filter expressions: - filter="type=[System | Raw |
     * Derived]".
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     dataStreamId: String (Required)
     *     resourceEndpoint: String (Optional)
     *     lineage (Required): {
     *         producerMetadata (Required): {
     *             String: String (Required)
     *         }
     *         inputs (Required): [
     *              (Required){
     *                 sourceDataStreamId: String (Required)
     *                 channels (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *         ]
     *     }
     *     status: String(Created/Completing/Completed/Failed/Failing/Clearing/Cleared) (Required)
     *     type: String(System/Raw/Derived) (Required)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DataStream items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> list(String measurementId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.list(measurementId, requestOptions));
    }

    /**
     * Returns SAS-signed upload URIs for files that need to be uploaded to Azure Storage. This URI expires in 24 hours.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     files (Required): [
     *          (Required){
     *             clientFileName: String (Required)
     *             recordingTimestampUtc: OffsetDateTime (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     files (Required): [
     *          (Required){
     *             clientFileName: String (Required)
     *             fileUri: String (Required)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return data stream file upload request parameters along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> stageFilesWithResponse(
            String measurementId, String dataStreamId, RequestOptions requestOptions) {
        return this.client.stageFilesWithResponse(measurementId, dataStreamId, requestOptions).block();
    }

    /**
     * Marks a data stream as completed.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginComplete(
            String measurementId, String dataStreamId, RequestOptions requestOptions) {
        return this.client.beginComplete(measurementId, dataStreamId, requestOptions).getSyncPoller();
    }

    /**
     * Marks a data stream as failed.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginFail(
            String measurementId, String dataStreamId, RequestOptions requestOptions) {
        return this.client.beginFail(measurementId, dataStreamId, requestOptions).getSyncPoller();
    }

    /**
     * Lists the data-streams by tags.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     tags (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     dataStreamId: String (Required)
     *     resourceEndpoint: String (Optional)
     *     lineage (Required): {
     *         producerMetadata (Required): {
     *             String: String (Required)
     *         }
     *         inputs (Required): [
     *              (Required){
     *                 sourceDataStreamId: String (Required)
     *                 channels (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *         ]
     *     }
     *     status: String(Created/Completing/Completed/Failed/Failing/Clearing/Cleared) (Required)
     *     type: String(System/Raw/Derived) (Required)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DataStream items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> findByTags(String measurementId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.findByTags(measurementId, requestOptions));
    }

    /**
     * Lists the data-streams by lineage.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     lineage (Required): {
     *         producerMetadata (Required): {
     *             String: String (Required)
     *         }
     *         inputs (Required): [
     *              (Required){
     *                 sourceDataStreamId: String (Required)
     *                 channels (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     dataStreamId: String (Required)
     *     resourceEndpoint: String (Optional)
     *     lineage (Required): {
     *         producerMetadata (Required): {
     *             String: String (Required)
     *         }
     *         inputs (Required): [
     *              (Required){
     *                 sourceDataStreamId: String (Required)
     *                 channels (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *         ]
     *     }
     *     status: String(Created/Completing/Completed/Failed/Failing/Clearing/Cleared) (Required)
     *     type: String(System/Raw/Derived) (Required)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DataStream items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> findByLineage(String measurementId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.findByLineage(measurementId, requestOptions));
    }

    /**
     * Lists the data-streams by lineage graph.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     processingObjects (Required): [
     *          (Required){
     *             metadata (Required): {
     *                 String: String (Required)
     *             }
     *             id: String (Required)
     *         }
     *     ]
     *     edges (Required): [
     *          (Required){
     *             sourceId: String (Required)
     *             targetId: String (Required)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     dataStreamsGraphs (Required): [
     *          (Required){
     *             dataStreamByProcessingObjectId (Required): {
     *                 String (Required): {
     *                     dataStreamId: String (Required)
     *                     resourceEndpoint: String (Optional)
     *                     lineage (Required): {
     *                         producerMetadata (Required): {
     *                             String: String (Required)
     *                         }
     *                         inputs (Required): [
     *                              (Required){
     *                                 sourceDataStreamId: String (Required)
     *                                 channels (Optional): [
     *                                     String (Optional)
     *                                 ]
     *                             }
     *                         ]
     *                     }
     *                     status: String(Created/Completing/Completed/Failed/Failing/Clearing/Cleared) (Required)
     *                     type: String(System/Raw/Derived) (Required)
     *                     etag: String (Required)
     *                 }
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DataStreamsGraphListResponse items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> getLineageGraphsByLineage(String measurementId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.getLineageGraphsByLineage(measurementId, requestOptions));
    }

    /**
     * Get data-stream by identifier.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data-stream by identifier.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DataStream get(String measurementId, String dataStreamId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(measurementId, dataStreamId, requestOptions).getValue().toObject(DataStream.class);
    }

    /**
     * Creates new data-stream resource.
     *
     * @param measurementId The measurement identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @param body Parameter of type 'DataStreamCreationParameters' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCreate(
            String measurementId, String operationId, DataStreamCreationParameters body) {
        // Generated convenience method for beginCreateWithModel
        return client.beginCreate(measurementId, operationId, body).getSyncPoller();
    }

    /**
     * Creates new data-stream resource.
     *
     * @param measurementId The measurement identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCreate(String measurementId) {
        // Generated convenience method for beginCreateWithModel
        return client.beginCreate(measurementId).getSyncPoller();
    }

    /**
     * Clear the data-stream content.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginClearContent(
            String measurementId, String dataStreamId, String operationId) {
        // Generated convenience method for beginClearContentWithModel
        return client.beginClearContent(measurementId, dataStreamId, operationId).getSyncPoller();
    }

    /**
     * Clear the data-stream content.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginClearContent(String measurementId, String dataStreamId) {
        // Generated convenience method for beginClearContentWithModel
        return client.beginClearContent(measurementId, dataStreamId).getSyncPoller();
    }

    /**
     * Lists the existing data-streams. Supports the following filter expressions: - filter="type=[System | Raw |
     * Derived]".
     *
     * @param measurementId The measurement identifier.
     * @param filter Filter the result list using the given expression.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DataStream items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DataStream> list(String measurementId, String filter) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(measurementId, filter));
    }

    /**
     * Lists the existing data-streams. Supports the following filter expressions: - filter="type=[System | Raw |
     * Derived]".
     *
     * @param measurementId The measurement identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DataStream items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DataStream> list(String measurementId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(measurementId));
    }

    /**
     * Returns SAS-signed upload URIs for files that need to be uploaded to Azure Storage. This URI expires in 24 hours.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param body Parameter of type 'UploadDerivedDataStreamFilesRequest' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data stream file upload request parameters.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UploadDerivedDataStreamFilesResponse stageFiles(
            String measurementId, String dataStreamId, UploadDerivedDataStreamFilesRequest body) {
        // Generated convenience method for stageFilesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        return stageFilesWithResponse(measurementId, dataStreamId, requestOptions)
                .getValue()
                .toObject(UploadDerivedDataStreamFilesResponse.class);
    }

    /**
     * Returns SAS-signed upload URIs for files that need to be uploaded to Azure Storage. This URI expires in 24 hours.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data stream file upload request parameters.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UploadDerivedDataStreamFilesResponse stageFiles(String measurementId, String dataStreamId) {
        // Generated convenience method for stageFilesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return stageFilesWithResponse(measurementId, dataStreamId, requestOptions)
                .getValue()
                .toObject(UploadDerivedDataStreamFilesResponse.class);
    }

    /**
     * Marks a data stream as completed.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginComplete(
            String measurementId, String dataStreamId, String operationId) {
        // Generated convenience method for beginCompleteWithModel
        return client.beginComplete(measurementId, dataStreamId, operationId).getSyncPoller();
    }

    /**
     * Marks a data stream as completed.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginComplete(String measurementId, String dataStreamId) {
        // Generated convenience method for beginCompleteWithModel
        return client.beginComplete(measurementId, dataStreamId).getSyncPoller();
    }

    /**
     * Marks a data stream as failed.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginFail(
            String measurementId, String dataStreamId, String operationId) {
        // Generated convenience method for beginFailWithModel
        return client.beginFail(measurementId, dataStreamId, operationId).getSyncPoller();
    }

    /**
     * Marks a data stream as failed.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginFail(String measurementId, String dataStreamId) {
        // Generated convenience method for beginFailWithModel
        return client.beginFail(measurementId, dataStreamId).getSyncPoller();
    }

    /**
     * Lists the data-streams by tags.
     *
     * @param measurementId The measurement identifier.
     * @param body Parameter of type 'FindDataStreamByTagsRequestParameters' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DataStream items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DataStream> findByTags(String measurementId, FindDataStreamByTagsRequestParameters body) {
        // Generated convenience method for findByTags
        return new PagedIterable<>(client.findByTags(measurementId, body));
    }

    /**
     * Lists the data-streams by tags.
     *
     * @param measurementId The measurement identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DataStream items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DataStream> findByTags(String measurementId) {
        // Generated convenience method for findByTags
        return new PagedIterable<>(client.findByTags(measurementId));
    }

    /**
     * Lists the data-streams by lineage.
     *
     * @param measurementId The measurement identifier.
     * @param body Parameter of type 'FindDataStreamByLineageRequestParameters' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DataStream items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DataStream> findByLineage(
            String measurementId, FindDataStreamByLineageRequestParameters body) {
        // Generated convenience method for findByLineage
        return new PagedIterable<>(client.findByLineage(measurementId, body));
    }

    /**
     * Lists the data-streams by lineage.
     *
     * @param measurementId The measurement identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DataStream items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DataStream> findByLineage(String measurementId) {
        // Generated convenience method for findByLineage
        return new PagedIterable<>(client.findByLineage(measurementId));
    }

    /**
     * Lists the data-streams by lineage graph.
     *
     * @param measurementId The measurement identifier.
     * @param body Parameter of type 'FindDataStreamByLineageGraphRequestParameters' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DataStreamsGraphListResponse items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DataStreamsGraphListResponse> getLineageGraphsByLineage(
            String measurementId, FindDataStreamByLineageGraphRequestParameters body) {
        // Generated convenience method for getLineageGraphsByLineage
        return new PagedIterable<>(client.getLineageGraphsByLineage(measurementId, body));
    }

    /**
     * Lists the data-streams by lineage graph.
     *
     * @param measurementId The measurement identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DataStreamsGraphListResponse items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DataStreamsGraphListResponse> getLineageGraphsByLineage(String measurementId) {
        // Generated convenience method for getLineageGraphsByLineage
        return new PagedIterable<>(client.getLineageGraphsByLineage(measurementId));
    }
}
