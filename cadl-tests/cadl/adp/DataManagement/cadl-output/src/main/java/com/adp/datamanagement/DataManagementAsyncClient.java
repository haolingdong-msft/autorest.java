// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.adp.datamanagement;

import com.adp.datamanagement.implementation.DataManagementClientImpl;
import com.adp.datamanagement.models.ClassificationSchema;
import com.adp.datamanagement.models.ClassificationSchemaCreationParameters;
import com.adp.datamanagement.models.DataStream;
import com.adp.datamanagement.models.DataStreamCreationParameters;
import com.adp.datamanagement.models.DataStreamFile;
import com.adp.datamanagement.models.DataStreamLogsContainerBase;
import com.adp.datamanagement.models.DataStreamsGraphListResponse;
import com.adp.datamanagement.models.Discovery;
import com.adp.datamanagement.models.DiscoveryCreationParameters;
import com.adp.datamanagement.models.DiscoverySpecialFile;
import com.adp.datamanagement.models.DiscoveryUpload;
import com.adp.datamanagement.models.FindDataStreamByLineageGraphRequestParameters;
import com.adp.datamanagement.models.FindDataStreamByLineageRequestParameters;
import com.adp.datamanagement.models.FindDataStreamByTagsRequestParameters;
import com.adp.datamanagement.models.LongRunningOperation;
import com.adp.datamanagement.models.Measurement;
import com.adp.datamanagement.models.MeasurementClassification;
import com.adp.datamanagement.models.MeasurementClassificationCreationParameters;
import com.adp.datamanagement.models.MeasurementListRequestParameters;
import com.adp.datamanagement.models.MeasurementMetadataBase;
import com.adp.datamanagement.models.MeasurementMetadataSchemaFileInfoBase;
import com.adp.datamanagement.models.MeasurementProcessingResultsBase;
import com.adp.datamanagement.models.MeasurementWithMetadata;
import com.adp.datamanagement.models.StateMachine;
import com.adp.datamanagement.models.StateMachineAction;
import com.adp.datamanagement.models.Storage;
import com.adp.datamanagement.models.StorageBase;
import com.adp.datamanagement.models.StorageCreationParameters;
import com.adp.datamanagement.models.TagSet;
import com.adp.datamanagement.models.TagSetBase;
import com.adp.datamanagement.models.TagSetCreationParameters;
import com.adp.datamanagement.models.Upload;
import com.adp.datamanagement.models.UploadCreationParameters;
import com.adp.datamanagement.models.UploadDataFile;
import com.adp.datamanagement.models.UploadDerivedDataStreamFilesRequest;
import com.adp.datamanagement.models.UploadDerivedDataStreamFilesResponse;
import com.adp.datamanagement.models.UploadResultMeasurement;
import com.adp.datamanagement.models.UploadSpecialFile;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import java.util.stream.Collectors;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous DataManagementClient type. */
@ServiceClient(builder = DataManagementClientBuilder.class, isAsync = true)
public final class DataManagementAsyncClient {

    @Generated private final DataManagementClientImpl serviceClient;

    /**
     * Initializes an instance of DataManagementAsyncClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    DataManagementAsyncClient(DataManagementClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Creates a new ingestion discovery instance.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     externalPackageId: String (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     discoveryId: String (Required)
     *     externalPackageId: String (Optional)
     *     manifestUri: String (Optional)
     *     status: String(Created/GeneratingSpecialFilesUploadInfo/GeneratedSpecialFilesUploadInfo/Completing/Completed/Aborting/Aborted/Failed) (Optional)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param discoveryId The discovery identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a discovery resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrReplaceDiscoveryWithResponse(
            String discoveryId, RequestOptions requestOptions) {
        return this.serviceClient.createOrReplaceDiscoveryWithResponseAsync(discoveryId, requestOptions);
    }

    /**
     * Get discovery by ID.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     discoveryId: String (Required)
     *     externalPackageId: String (Optional)
     *     manifestUri: String (Optional)
     *     status: String(Created/GeneratingSpecialFilesUploadInfo/GeneratedSpecialFilesUploadInfo/Completing/Completed/Aborting/Aborted/Failed) (Optional)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param discoveryId The discovery identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return discovery by ID along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDiscoveryWithResponse(String discoveryId, RequestOptions requestOptions) {
        return this.serviceClient.getDiscoveryWithResponseAsync(discoveryId, requestOptions);
    }

    /**
     * Initiates the process of completing the discovery and creating the upload file grouping manifest files.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param discoveryId The discovery identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginCompleteDiscovery(
            String discoveryId, RequestOptions requestOptions) {
        return this.serviceClient.beginCompleteDiscoveryAsync(discoveryId, requestOptions);
    }

    /**
     * Initiates the process of cancelling the discovery.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param discoveryId The discovery identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginCancelDiscovery(String discoveryId, RequestOptions requestOptions) {
        return this.serviceClient.beginCancelDiscoveryAsync(discoveryId, requestOptions);
    }

    /**
     * List special files details for the discovery resource. Returns SAS signed URI that allows uploading special files
     * to Azure Storage. This URI expires in 24 hours.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     clientFileName: String (Required)
     *     fileUri: String (Required)
     * }
     * }</pre>
     *
     * @param discoveryId The discovery identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DiscoverySpecialFile items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> getDiscoverySpecialFileUploadLocations(
            String discoveryId, RequestOptions requestOptions) {
        return this.serviceClient.getDiscoverySpecialFileUploadLocationsAsync(discoveryId, requestOptions);
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param discoveryId The discovery identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginGenerateDiscoverySpecialFileUploadLocations(
            String discoveryId, RequestOptions requestOptions) {
        return this.serviceClient.beginGenerateDiscoverySpecialFileUploadLocationsAsync(discoveryId, requestOptions);
    }

    /**
     * List upload detail for the discovery resource.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     uploadId: String (Required)
     *     manifestUri: String (Required)
     *     resourceEndpoint: String (Optional)
     * }
     * }</pre>
     *
     * @param discoveryId The discovery identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DiscoveryUpload items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> getAllDiscoveryUploads(String discoveryId, RequestOptions requestOptions) {
        return this.serviceClient.getAllDiscoveryUploadsAsync(discoveryId, requestOptions);
    }

    /**
     * Creates a new ingestion upload instance.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     externalPackageId: String (Optional)
     *     discoveryId: String (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     uploadId: String (Required)
     *     externalPackageId: String (Optional)
     *     discoveryId: String (Optional)
     *     manifestUri: String (Optional)
     *     status: String(Created/GeneratingSpecialFilesUploadInfo/GeneratedSpecialFilesUploadInfo/GeneratingDataFilesUploadInfo/GeneratedDataFilesUploadInfo/Completing/Completed/Aborting/Aborted/Failed) (Optional)
     *     resourceEndpoint: String (Optional)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an upload resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrReplaceUploadWithResponse(
            String uploadId, RequestOptions requestOptions) {
        return this.serviceClient.createOrReplaceUploadWithResponseAsync(uploadId, requestOptions);
    }

    /**
     * Get discovery by ID.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     uploadId: String (Required)
     *     externalPackageId: String (Optional)
     *     discoveryId: String (Optional)
     *     manifestUri: String (Optional)
     *     status: String(Created/GeneratingSpecialFilesUploadInfo/GeneratedSpecialFilesUploadInfo/GeneratingDataFilesUploadInfo/GeneratedDataFilesUploadInfo/Completing/Completed/Aborting/Aborted/Failed) (Optional)
     *     resourceEndpoint: String (Optional)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return discovery by ID along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getUploadWithResponse(String uploadId, RequestOptions requestOptions) {
        return this.serviceClient.getUploadWithResponseAsync(uploadId, requestOptions);
    }

    /**
     * Initiates the process of completing the upload and creating the measurements.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginCompleteUpload(String uploadId, RequestOptions requestOptions) {
        return this.serviceClient.beginCompleteUploadAsync(uploadId, requestOptions);
    }

    /**
     * Initiates the process of cancelling the upload.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginCancelUpload(String uploadId, RequestOptions requestOptions) {
        return this.serviceClient.beginCancelUploadAsync(uploadId, requestOptions);
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginGenerateUploadSpecialFiles(
            String uploadId, RequestOptions requestOptions) {
        return this.serviceClient.beginGenerateUploadSpecialFilesAsync(uploadId, requestOptions);
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading special files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     clientFileName: String (Required)
     *     fileUri: String (Required)
     * }
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> getUploadSpecialFiles(String uploadId, RequestOptions requestOptions) {
        return this.serviceClient.getUploadSpecialFilesAsync(uploadId, requestOptions);
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginGenerateUploadDataFiles(
            String uploadId, RequestOptions requestOptions) {
        return this.serviceClient.beginGenerateUploadDataFilesAsync(uploadId, requestOptions);
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading data files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     clientFileName: String (Required)
     *     fileUri: String (Required)
     * }
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of UploadDataFile items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> getUploadDataFiles(String uploadId, RequestOptions requestOptions) {
        return this.serviceClient.getUploadDataFilesAsync(uploadId, requestOptions);
    }

    /**
     * List of the measurement identifiers that have been created by the upload.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     measurementId: String (Required)
     * }
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of UploadResultMeasurement items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listMeasurements(String uploadId, RequestOptions requestOptions) {
        return this.serviceClient.listMeasurementsAsync(uploadId, requestOptions);
    }

    /**
     * Get classification schema by name.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Required)
     *     schemaDefinition: String (Required)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param name Classification schema identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return classification schema by name along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getClassificationSchemaWithResponse(String name, RequestOptions requestOptions) {
        return this.serviceClient.getClassificationSchemaWithResponseAsync(name, requestOptions);
    }

    /**
     * Creates new classification schema.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     schemaDefinition: String (Required)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of classification schema resource model.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginCreateClassificationSchema(RequestOptions requestOptions) {
        return this.serviceClient.beginCreateClassificationSchemaAsync(requestOptions);
    }

    /**
     * Deletes the classification schema and all related classification assignments (instances).
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String (Required)
     *     status: String(Created/InProgress/Succeeded/Failed/Canceled) (Required)
     *     operationType: String(default) (Optional)
     *     error: ResponseError (Optional)
     *     lastModifiedBy: String (Required)
     *     resultLocation: String (Optional)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param name Classification schema identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, Void> beginDeleteClassificationSchema(String name, RequestOptions requestOptions) {
        return this.serviceClient.beginDeleteClassificationSchemaAsync(name, requestOptions);
    }

    /**
     * List all classification schemas.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Required)
     *     schemaDefinition: String (Required)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of ClassificationSchema items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> getClassificationSchemas(RequestOptions requestOptions) {
        return this.serviceClient.getClassificationSchemasAsync(requestOptions);
    }

    /**
     * Get measurement by ID.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     measurementId: String (Required)
     *     location: String (Required)
     *     ingestTimestampUtc: OffsetDateTime (Optional)
     *     resourceEndpoint: String (Optional)
     *     externalPackageId: String (Optional)
     *     uploadId: String (Optional)
     *     discoveryId: String (Optional)
     *     recordTimestampUtc: OffsetDateTime (Optional)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return measurement by ID along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getMeasurementWithResponse(String measurementId, RequestOptions requestOptions) {
        return this.serviceClient.getMeasurementWithResponseAsync(measurementId, requestOptions);
    }

    /**
     * Deletes the measurement.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String (Required)
     *     status: String(Created/InProgress/Succeeded/Failed/Canceled) (Required)
     *     operationType: String(default) (Optional)
     *     error: ResponseError (Optional)
     *     lastModifiedBy: String (Required)
     *     resultLocation: String (Optional)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, Void> beginDeleteMeasurement(String measurementId, RequestOptions requestOptions) {
        return this.serviceClient.beginDeleteMeasurementAsync(measurementId, requestOptions);
    }

    /**
     * Lists the measurements in a workspace.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     measurementId: String (Required)
     *     location: String (Required)
     *     ingestTimestampUtc: OffsetDateTime (Optional)
     *     resourceEndpoint: String (Optional)
     *     externalPackageId: String (Optional)
     *     uploadId: String (Optional)
     *     discoveryId: String (Optional)
     *     recordTimestampUtc: OffsetDateTime (Optional)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Measurement items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> getMeasurements(RequestOptions requestOptions) {
        return this.serviceClient.getMeasurementsAsync(requestOptions);
    }

    /**
     * Lists the measurements in a workspace with extended metadata.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     measurementId: String (Required)
     *     location: String (Required)
     *     ingestTimestampUtc: OffsetDateTime (Optional)
     *     resourceEndpoint: String (Optional)
     *     externalPackageId: String (Optional)
     *     uploadId: String (Optional)
     *     discoveryId: String (Optional)
     *     recordTimestampUtc: OffsetDateTime (Optional)
     *     etag: String (Required)
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of MeasurementWithMetadata items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> getMeasurementsWithMetadata(RequestOptions requestOptions) {
        return this.serviceClient.getMeasurementsWithMetadataAsync(requestOptions);
    }

    /**
     * Lists the measurements in a workspace that are in the given measurement IDs list.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     measurementIds (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     measurementId: String (Required)
     *     location: String (Required)
     *     ingestTimestampUtc: OffsetDateTime (Optional)
     *     resourceEndpoint: String (Optional)
     *     externalPackageId: String (Optional)
     *     uploadId: String (Optional)
     *     discoveryId: String (Optional)
     *     recordTimestampUtc: OffsetDateTime (Optional)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Measurement items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> getMeasurementsByIds(RequestOptions requestOptions) {
        return this.serviceClient.getMeasurementsByIdsAsync(requestOptions);
    }

    /**
     * Returns the measurement metadata.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return measurement metadata without resource identifier along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getMeasurementMetadataWithResponse(
            String measurementId, RequestOptions requestOptions) {
        return this.serviceClient.getMeasurementMetadataWithResponseAsync(measurementId, requestOptions);
    }

    /**
     * Returns the measurement processing result.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     validationPassed: Boolean (Optional)
     *     results (Optional): [
     *          (Optional){
     *             ruleCategory: String (Optional)
     *             ruleName: String (Optional)
     *             details (Optional): {
     *                 String: String (Optional)
     *             }
     *             validationPassed: Boolean (Optional)
     *             validationError: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return tODO: REMOVE - not in use along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getMeasurementProcessingResultsWithResponse(
            String measurementId, RequestOptions requestOptions) {
        return this.serviceClient.getMeasurementProcessingResultsWithResponseAsync(measurementId, requestOptions);
    }

    /**
     * Returns the state machine instance for the measurement.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     type: String (Required)
     *     availableActionNames (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param id The state machine identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return state machine along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getMeasurementStateMachineWithResponse(
            String measurementId, String id, RequestOptions requestOptions) {
        return this.serviceClient.getMeasurementStateMachineWithResponseAsync(measurementId, id, requestOptions);
    }

    /**
     * List state machines instance for the measurement.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     type: String (Required)
     *     availableActionNames (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of StateMachine items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> getMeasurementStateMachines(String measurementId, RequestOptions requestOptions) {
        return this.serviceClient.getMeasurementStateMachinesAsync(measurementId, requestOptions);
    }

    /**
     * Initiates process of applying an action on the measurement.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     actionName: String (Required)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param id The state machine identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of state machine.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginActMeasurementStateMachine(
            String measurementId, String id, RequestOptions requestOptions) {
        return this.serviceClient.beginActMeasurementStateMachineAsync(measurementId, id, requestOptions);
    }

    /**
     * Returns the measurement metadata schema file information.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     schemaFileName: String (Optional)
     *     schemaFileUri: String (Required)
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return measurement metadata schema file information model along with {@link Response} on successful completion
     *     of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getMeasurementMetadataSchemaFileInfoWithResponse(
            String measurementId, RequestOptions requestOptions) {
        return this.serviceClient.getMeasurementMetadataSchemaFileInfoWithResponseAsync(measurementId, requestOptions);
    }

    /**
     * Get measurement classification by schema name.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     schemaName: String (Required)
     *     classificationObject: String (Required)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param schemaName Classification schema name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return measurement classification by schema name along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getMeasurementClassificationWithResponse(
            String measurementId, String schemaName, RequestOptions requestOptions) {
        return this.serviceClient.getMeasurementClassificationWithResponseAsync(
                measurementId, schemaName, requestOptions);
    }

    /**
     * Lists the classifications assigned to the measurement.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     schemaName: String (Required)
     *     classificationObject: String (Required)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of MeasurementClassification items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> getMeasurementClassifications(String measurementId, RequestOptions requestOptions) {
        return this.serviceClient.getMeasurementClassificationsAsync(measurementId, requestOptions);
    }

    /**
     * Unassign the classification from the measurement.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String (Required)
     *     status: String(Created/InProgress/Succeeded/Failed/Canceled) (Required)
     *     operationType: String(default) (Optional)
     *     error: ResponseError (Optional)
     *     lastModifiedBy: String (Required)
     *     resultLocation: String (Optional)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param schemaName Classification schema name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, Void> beginDeleteMeasurementClassification(
            String measurementId, String schemaName, RequestOptions requestOptions) {
        return this.serviceClient.beginDeleteMeasurementClassificationAsync(measurementId, schemaName, requestOptions);
    }

    /**
     * Assigns classification to the measurement.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     schemaName: String (Required)
     *     classificationObject: String (Required)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of measurement classification.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginCreateMeasurementClassification(
            String measurementId, RequestOptions requestOptions) {
        return this.serviceClient.beginCreateMeasurementClassificationAsync(measurementId, requestOptions);
    }

    /**
     * Creates new data-stream resource.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     lineage (Required): {
     *         producerMetadata (Required): {
     *             String: String (Required)
     *         }
     *         inputs (Required): [
     *              (Required){
     *                 sourceDataStreamId: String (Required)
     *                 channels (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginCreateDataStream(
            String measurementId, RequestOptions requestOptions) {
        return this.serviceClient.beginCreateDataStreamAsync(measurementId, requestOptions);
    }

    /**
     * Get data-stream by identifier.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     dataStreamId: String (Required)
     *     resourceEndpoint: String (Optional)
     *     lineage (Required): {
     *         producerMetadata (Required): {
     *             String: String (Required)
     *         }
     *         inputs (Required): [
     *              (Required){
     *                 sourceDataStreamId: String (Required)
     *                 channels (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *         ]
     *     }
     *     status: String(Created/Completing/Completed/Failed/Failing/Clearing/Cleared) (Required)
     *     type: String(System/Raw/Derived) (Required)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return data-stream by identifier along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDataStreamWithResponse(
            String measurementId, String dataStreamId, RequestOptions requestOptions) {
        return this.serviceClient.getDataStreamWithResponseAsync(measurementId, dataStreamId, requestOptions);
    }

    /**
     * Lists the existing data-streams. Supports the following filter expressions: - filter="type=[System | Raw |
     * Derived]".
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     dataStreamId: String (Required)
     *     resourceEndpoint: String (Optional)
     *     lineage (Required): {
     *         producerMetadata (Required): {
     *             String: String (Required)
     *         }
     *         inputs (Required): [
     *              (Required){
     *                 sourceDataStreamId: String (Required)
     *                 channels (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *         ]
     *     }
     *     status: String(Created/Completing/Completed/Failed/Failing/Clearing/Cleared) (Required)
     *     type: String(System/Raw/Derived) (Required)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DataStream items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> getAllDataStream(String measurementId, RequestOptions requestOptions) {
        return this.serviceClient.getAllDataStreamAsync(measurementId, requestOptions);
    }

    /**
     * Clear the data-stream content.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginClearContentOfDataStream(
            String measurementId, String dataStreamId, RequestOptions requestOptions) {
        return this.serviceClient.beginClearContentOfDataStreamAsync(measurementId, dataStreamId, requestOptions);
    }

    /**
     * Returns SAS-signed upload URIs for files that need to be uploaded to Azure Storage. This URI expires in 24 hours.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     files (Required): [
     *          (Required){
     *             clientFileName: String (Required)
     *             recordingTimestampUtc: OffsetDateTime (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     files (Required): [
     *          (Required){
     *             clientFileName: String (Required)
     *             fileUri: String (Required)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return data stream file upload request parameters along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> stageFilesForDataStreamWithResponse(
            String measurementId, String dataStreamId, RequestOptions requestOptions) {
        return this.serviceClient.stageFilesForDataStreamWithResponseAsync(measurementId, dataStreamId, requestOptions);
    }

    /**
     * Marks a data stream as completed.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginCompleteDataStream(
            String measurementId, String dataStreamId, RequestOptions requestOptions) {
        return this.serviceClient.beginCompleteDataStreamAsync(measurementId, dataStreamId, requestOptions);
    }

    /**
     * Marks a data stream as failed.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginFailDataStream(
            String measurementId, String dataStreamId, RequestOptions requestOptions) {
        return this.serviceClient.beginFailDataStreamAsync(measurementId, dataStreamId, requestOptions);
    }

    /**
     * Lists the data-streams by tags.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     tags (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     dataStreamId: String (Required)
     *     resourceEndpoint: String (Optional)
     *     lineage (Required): {
     *         producerMetadata (Required): {
     *             String: String (Required)
     *         }
     *         inputs (Required): [
     *              (Required){
     *                 sourceDataStreamId: String (Required)
     *                 channels (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *         ]
     *     }
     *     status: String(Created/Completing/Completed/Failed/Failing/Clearing/Cleared) (Required)
     *     type: String(System/Raw/Derived) (Required)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DataStream items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> getDataStreamsByTags(String measurementId, RequestOptions requestOptions) {
        return this.serviceClient.getDataStreamsByTagsAsync(measurementId, requestOptions);
    }

    /**
     * Lists the data-streams by lineage.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     lineage (Required): {
     *         producerMetadata (Required): {
     *             String: String (Required)
     *         }
     *         inputs (Required): [
     *              (Required){
     *                 sourceDataStreamId: String (Required)
     *                 channels (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     dataStreamId: String (Required)
     *     resourceEndpoint: String (Optional)
     *     lineage (Required): {
     *         producerMetadata (Required): {
     *             String: String (Required)
     *         }
     *         inputs (Required): [
     *              (Required){
     *                 sourceDataStreamId: String (Required)
     *                 channels (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *         ]
     *     }
     *     status: String(Created/Completing/Completed/Failed/Failing/Clearing/Cleared) (Required)
     *     type: String(System/Raw/Derived) (Required)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DataStream items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> getDataStreamsByLineage(String measurementId, RequestOptions requestOptions) {
        return this.serviceClient.getDataStreamsByLineageAsync(measurementId, requestOptions);
    }

    /**
     * Lists the data-streams by lineage graph.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     processingObjects (Required): [
     *          (Required){
     *             metadata (Required): {
     *                 String: String (Required)
     *             }
     *             id: String (Required)
     *         }
     *     ]
     *     edges (Required): [
     *          (Required){
     *             sourceId: String (Required)
     *             targetId: String (Required)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     dataStreamsGraphs (Required): [
     *          (Required){
     *             dataStreamByProcessingObjectId (Required): {
     *                 String (Required): {
     *                     dataStreamId: String (Required)
     *                     resourceEndpoint: String (Optional)
     *                     lineage (Required): {
     *                         producerMetadata (Required): {
     *                             String: String (Required)
     *                         }
     *                         inputs (Required): [
     *                              (Required){
     *                                 sourceDataStreamId: String (Required)
     *                                 channels (Optional): [
     *                                     String (Optional)
     *                                 ]
     *                             }
     *                         ]
     *                     }
     *                     status: String(Created/Completing/Completed/Failed/Failing/Clearing/Cleared) (Required)
     *                     type: String(System/Raw/Derived) (Required)
     *                     etag: String (Required)
     *                 }
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DataStreamsGraphListResponse items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> getDataStreamLineageGraphsByLineage(
            String measurementId, RequestOptions requestOptions) {
        return this.serviceClient.getDataStreamLineageGraphsByLineageAsync(measurementId, requestOptions);
    }

    /**
     * Create or replace storage information of the data-stream. Returns the data-stream storage resource with SAS
     * signed URIs that allow uploading to Azure Storage. The SAS token expires in 24 hours.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     type: String (Required)
     *     rollingInformation (Optional): {
     *         strategy: String(Time/Size) (Required)
     *         unit: String(Seconds/Minutes/kB/MB/GB) (Required)
     *         value: int (Required)
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String(current) (Required)
     *     type: String (Required)
     *     rollingInformation (Optional): {
     *         strategy: String(Time/Size) (Required)
     *         unit: String(Seconds/Minutes/kB/MB/GB) (Required)
     *         value: int (Required)
     *     }
     *     manifestUri: String (Required)
     *     dataFolderUri: String (Optional)
     *     shards (Required): [
     *          (Required){
     *             shardFolderUri: String (Required)
     *             manifestFileUri: String (Required)
     *         }
     *     ]
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a data-stream with non sharded storage resource along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrReplaceDataStreamStorageWithResponse(
            String measurementId, String dataStreamId, RequestOptions requestOptions) {
        return this.serviceClient.createOrReplaceDataStreamStorageWithResponseAsync(
                measurementId, dataStreamId, requestOptions);
    }

    /**
     * Returns the data-stream storage resource with SAS signed URIs that allow uploading to Azure Storage. The SAS
     * token expires in 24 hours.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     type: String (Required)
     *     rollingInformation (Optional): {
     *         strategy: String(Time/Size) (Required)
     *         unit: String(Seconds/Minutes/kB/MB/GB) (Required)
     *         value: int (Required)
     *     }
     *     manifestUri: String (Required)
     *     dataFolderUri: String (Optional)
     *     shards (Required): [
     *          (Required){
     *             shardFolderUri: String (Required)
     *             manifestFileUri: String (Required)
     *         }
     *     ]
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return common data-stream storage model along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDataStreamStorageWithResponse(
            String measurementId, String dataStreamId, RequestOptions requestOptions) {
        return this.serviceClient.getDataStreamStorageWithResponseAsync(measurementId, dataStreamId, requestOptions);
    }

    /**
     * Create or replace all tags at once.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     tags (Required): [
     *          (Required){
     *             key: String (Required)
     *             value: String (Required)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     tags (Required): [
     *          (Required){
     *             key: String (Required)
     *             value: String (Required)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return tag set along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrReplaceDataStreamTagsWithResponse(
            String measurementId, String dataStreamId, RequestOptions requestOptions) {
        return this.serviceClient.createOrReplaceDataStreamTagsWithResponseAsync(
                measurementId, dataStreamId, requestOptions);
    }

    /**
     * Returns set of the data-stream tags.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String(current) (Required)
     *     tags (Required): [
     *          (Required){
     *             key: String (Required)
     *             value: String (Required)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a data-stream tags along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDataStreamTagsWithResponse(
            String measurementId, String dataStreamId, RequestOptions requestOptions) {
        return this.serviceClient.getDataStreamTagsWithResponseAsync(measurementId, dataStreamId, requestOptions);
    }

    /**
     * Initiates the process of generating SAS signed URIs for accessing the data-stream files.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of data-stream file list.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginGenerateDataStreamFiles(
            String measurementId, String dataStreamId, RequestOptions requestOptions) {
        return this.serviceClient.beginGenerateDataStreamFilesAsync(measurementId, dataStreamId, requestOptions);
    }

    /**
     * Returns SAS signed URIs for reading special files from Azure Storage.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     clientFileName: String (Required)
     *     fileUri: String (Required)
     *     externalTimeStamp: OffsetDateTime (Required)
     *     size: long (Required)
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DataStreamFile items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> getDataStreamFiles(
            String measurementId, String dataStreamId, RequestOptions requestOptions) {
        return this.serviceClient.getDataStreamFilesAsync(measurementId, dataStreamId, requestOptions);
    }

    /**
     * Returns SAS signed URI of the data-stream logs folder that allow uploading log files to Azure Storage. The SAS
     * token expires in 24 hours.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     logFolderUri: String (Required)
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return data-stream logs folder along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getDataStreamLogsContainerLocationWithResponse(
            String measurementId, String dataStreamId, RequestOptions requestOptions) {
        return this.serviceClient.getDataStreamLogsContainerLocationWithResponseAsync(
                measurementId, dataStreamId, requestOptions);
    }

    /**
     * Creates a new ingestion discovery instance.
     *
     * @param discoveryId The discovery identifier.
     * @param body Parameter of type 'DiscoveryCreationParameters' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a discovery resource on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Discovery> createOrReplaceDiscovery(String discoveryId, DiscoveryCreationParameters body) {
        // Generated convenience method for createOrReplaceDiscoveryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        return createOrReplaceDiscoveryWithResponse(discoveryId, requestOptions)
                .flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(Discovery.class));
    }

    /**
     * Creates a new ingestion discovery instance.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a discovery resource on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Discovery> createOrReplaceDiscovery(String discoveryId) {
        // Generated convenience method for createOrReplaceDiscoveryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceDiscoveryWithResponse(discoveryId, requestOptions)
                .flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(Discovery.class));
    }

    /**
     * Get discovery by ID.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discovery by ID on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Discovery> getDiscovery(String discoveryId) {
        // Generated convenience method for getDiscoveryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDiscoveryWithResponse(discoveryId, requestOptions)
                .flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(Discovery.class));
    }

    /**
     * List special files details for the discovery resource. Returns SAS signed URI that allows uploading special files
     * to Azure Storage. This URI expires in 24 hours.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoverySpecialFile items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DiscoverySpecialFile> getDiscoverySpecialFileUploadLocations(String discoveryId) {
        // Generated convenience method for getDiscoverySpecialFileUploadLocations
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = getDiscoverySpecialFileUploadLocations(discoveryId, requestOptions);
        return PagedFlux.create(
                () ->
                        (continuationToken, pageSize) -> {
                            Flux<PagedResponse<BinaryData>> flux =
                                    (continuationToken == null)
                                            ? pagedFluxResponse.byPage().take(1)
                                            : pagedFluxResponse.byPage(continuationToken).take(1);
                            return flux.map(
                                    pagedResponse ->
                                            new PagedResponseBase<Void, DiscoverySpecialFile>(
                                                    pagedResponse.getRequest(),
                                                    pagedResponse.getStatusCode(),
                                                    pagedResponse.getHeaders(),
                                                    pagedResponse.getValue().stream()
                                                            .map(
                                                                    protocolMethodData ->
                                                                            protocolMethodData.toObject(
                                                                                    DiscoverySpecialFile.class))
                                                            .collect(Collectors.toList()),
                                                    pagedResponse.getContinuationToken(),
                                                    null));
                        });
    }

    /**
     * List upload detail for the discovery resource.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoveryUpload items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DiscoveryUpload> getAllDiscoveryUploads(String discoveryId) {
        // Generated convenience method for getAllDiscoveryUploads
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = getAllDiscoveryUploads(discoveryId, requestOptions);
        return PagedFlux.create(
                () ->
                        (continuationToken, pageSize) -> {
                            Flux<PagedResponse<BinaryData>> flux =
                                    (continuationToken == null)
                                            ? pagedFluxResponse.byPage().take(1)
                                            : pagedFluxResponse.byPage(continuationToken).take(1);
                            return flux.map(
                                    pagedResponse ->
                                            new PagedResponseBase<Void, DiscoveryUpload>(
                                                    pagedResponse.getRequest(),
                                                    pagedResponse.getStatusCode(),
                                                    pagedResponse.getHeaders(),
                                                    pagedResponse.getValue().stream()
                                                            .map(
                                                                    protocolMethodData ->
                                                                            protocolMethodData.toObject(
                                                                                    DiscoveryUpload.class))
                                                            .collect(Collectors.toList()),
                                                    pagedResponse.getContinuationToken(),
                                                    null));
                        });
    }

    /**
     * Creates a new ingestion upload instance.
     *
     * @param uploadId The upload resource identifier.
     * @param body Parameter of type 'UploadCreationParameters' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an upload resource on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Upload> createOrReplaceUpload(String uploadId, UploadCreationParameters body) {
        // Generated convenience method for createOrReplaceUploadWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        return createOrReplaceUploadWithResponse(uploadId, requestOptions)
                .flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(Upload.class));
    }

    /**
     * Creates a new ingestion upload instance.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an upload resource on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Upload> createOrReplaceUpload(String uploadId) {
        // Generated convenience method for createOrReplaceUploadWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceUploadWithResponse(uploadId, requestOptions)
                .flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(Upload.class));
    }

    /**
     * Get discovery by ID.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discovery by ID on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Upload> getUpload(String uploadId) {
        // Generated convenience method for getUploadWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getUploadWithResponse(uploadId, requestOptions)
                .flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(Upload.class));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading special files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<UploadSpecialFile> getUploadSpecialFiles(String uploadId) {
        // Generated convenience method for getUploadSpecialFiles
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = getUploadSpecialFiles(uploadId, requestOptions);
        return PagedFlux.create(
                () ->
                        (continuationToken, pageSize) -> {
                            Flux<PagedResponse<BinaryData>> flux =
                                    (continuationToken == null)
                                            ? pagedFluxResponse.byPage().take(1)
                                            : pagedFluxResponse.byPage(continuationToken).take(1);
                            return flux.map(
                                    pagedResponse ->
                                            new PagedResponseBase<Void, UploadSpecialFile>(
                                                    pagedResponse.getRequest(),
                                                    pagedResponse.getStatusCode(),
                                                    pagedResponse.getHeaders(),
                                                    pagedResponse.getValue().stream()
                                                            .map(
                                                                    protocolMethodData ->
                                                                            protocolMethodData.toObject(
                                                                                    UploadSpecialFile.class))
                                                            .collect(Collectors.toList()),
                                                    pagedResponse.getContinuationToken(),
                                                    null));
                        });
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading data files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadDataFile items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<UploadDataFile> getUploadDataFiles(String uploadId) {
        // Generated convenience method for getUploadDataFiles
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = getUploadDataFiles(uploadId, requestOptions);
        return PagedFlux.create(
                () ->
                        (continuationToken, pageSize) -> {
                            Flux<PagedResponse<BinaryData>> flux =
                                    (continuationToken == null)
                                            ? pagedFluxResponse.byPage().take(1)
                                            : pagedFluxResponse.byPage(continuationToken).take(1);
                            return flux.map(
                                    pagedResponse ->
                                            new PagedResponseBase<Void, UploadDataFile>(
                                                    pagedResponse.getRequest(),
                                                    pagedResponse.getStatusCode(),
                                                    pagedResponse.getHeaders(),
                                                    pagedResponse.getValue().stream()
                                                            .map(
                                                                    protocolMethodData ->
                                                                            protocolMethodData.toObject(
                                                                                    UploadDataFile.class))
                                                            .collect(Collectors.toList()),
                                                    pagedResponse.getContinuationToken(),
                                                    null));
                        });
    }

    /**
     * List of the measurement identifiers that have been created by the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadResultMeasurement items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<UploadResultMeasurement> listMeasurements(String uploadId) {
        // Generated convenience method for listMeasurements
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = listMeasurements(uploadId, requestOptions);
        return PagedFlux.create(
                () ->
                        (continuationToken, pageSize) -> {
                            Flux<PagedResponse<BinaryData>> flux =
                                    (continuationToken == null)
                                            ? pagedFluxResponse.byPage().take(1)
                                            : pagedFluxResponse.byPage(continuationToken).take(1);
                            return flux.map(
                                    pagedResponse ->
                                            new PagedResponseBase<Void, UploadResultMeasurement>(
                                                    pagedResponse.getRequest(),
                                                    pagedResponse.getStatusCode(),
                                                    pagedResponse.getHeaders(),
                                                    pagedResponse.getValue().stream()
                                                            .map(
                                                                    protocolMethodData ->
                                                                            protocolMethodData.toObject(
                                                                                    UploadResultMeasurement.class))
                                                            .collect(Collectors.toList()),
                                                    pagedResponse.getContinuationToken(),
                                                    null));
                        });
    }

    /**
     * Get classification schema by name.
     *
     * @param name Classification schema identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return classification schema by name on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ClassificationSchema> getClassificationSchema(String name) {
        // Generated convenience method for getClassificationSchemaWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getClassificationSchemaWithResponse(name, requestOptions)
                .flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(ClassificationSchema.class));
    }

    /**
     * List all classification schemas.
     *
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of ClassificationSchema items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ClassificationSchema> getClassificationSchemas() {
        // Generated convenience method for getClassificationSchemas
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = getClassificationSchemas(requestOptions);
        return PagedFlux.create(
                () ->
                        (continuationToken, pageSize) -> {
                            Flux<PagedResponse<BinaryData>> flux =
                                    (continuationToken == null)
                                            ? pagedFluxResponse.byPage().take(1)
                                            : pagedFluxResponse.byPage(continuationToken).take(1);
                            return flux.map(
                                    pagedResponse ->
                                            new PagedResponseBase<Void, ClassificationSchema>(
                                                    pagedResponse.getRequest(),
                                                    pagedResponse.getStatusCode(),
                                                    pagedResponse.getHeaders(),
                                                    pagedResponse.getValue().stream()
                                                            .map(
                                                                    protocolMethodData ->
                                                                            protocolMethodData.toObject(
                                                                                    ClassificationSchema.class))
                                                            .collect(Collectors.toList()),
                                                    pagedResponse.getContinuationToken(),
                                                    null));
                        });
    }

    /**
     * Get measurement by ID.
     *
     * @param measurementId The measurement identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return measurement by ID on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Measurement> getMeasurement(String measurementId) {
        // Generated convenience method for getMeasurementWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getMeasurementWithResponse(measurementId, requestOptions)
                .flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(Measurement.class));
    }

    /**
     * Lists the measurements in a workspace.
     *
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of Measurement items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Measurement> getMeasurements() {
        // Generated convenience method for getMeasurements
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = getMeasurements(requestOptions);
        return PagedFlux.create(
                () ->
                        (continuationToken, pageSize) -> {
                            Flux<PagedResponse<BinaryData>> flux =
                                    (continuationToken == null)
                                            ? pagedFluxResponse.byPage().take(1)
                                            : pagedFluxResponse.byPage(continuationToken).take(1);
                            return flux.map(
                                    pagedResponse ->
                                            new PagedResponseBase<Void, Measurement>(
                                                    pagedResponse.getRequest(),
                                                    pagedResponse.getStatusCode(),
                                                    pagedResponse.getHeaders(),
                                                    pagedResponse.getValue().stream()
                                                            .map(
                                                                    protocolMethodData ->
                                                                            protocolMethodData.toObject(
                                                                                    Measurement.class))
                                                            .collect(Collectors.toList()),
                                                    pagedResponse.getContinuationToken(),
                                                    null));
                        });
    }

    /**
     * Lists the measurements in a workspace with extended metadata.
     *
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of MeasurementWithMetadata items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<MeasurementWithMetadata> getMeasurementsWithMetadata() {
        // Generated convenience method for getMeasurementsWithMetadata
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = getMeasurementsWithMetadata(requestOptions);
        return PagedFlux.create(
                () ->
                        (continuationToken, pageSize) -> {
                            Flux<PagedResponse<BinaryData>> flux =
                                    (continuationToken == null)
                                            ? pagedFluxResponse.byPage().take(1)
                                            : pagedFluxResponse.byPage(continuationToken).take(1);
                            return flux.map(
                                    pagedResponse ->
                                            new PagedResponseBase<Void, MeasurementWithMetadata>(
                                                    pagedResponse.getRequest(),
                                                    pagedResponse.getStatusCode(),
                                                    pagedResponse.getHeaders(),
                                                    pagedResponse.getValue().stream()
                                                            .map(
                                                                    protocolMethodData ->
                                                                            protocolMethodData.toObject(
                                                                                    MeasurementWithMetadata.class))
                                                            .collect(Collectors.toList()),
                                                    pagedResponse.getContinuationToken(),
                                                    null));
                        });
    }

    /**
     * Lists the measurements in a workspace that are in the given measurement IDs list.
     *
     * @param body Parameter of type 'MeasurementListRequestParameters' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of Measurement items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Measurement> getMeasurementsByIds(MeasurementListRequestParameters body) {
        // Generated convenience method for getMeasurementsByIds
        RequestOptions requestOptions = new RequestOptions();
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        PagedFlux<BinaryData> pagedFluxResponse = getMeasurementsByIds(requestOptions);
        return PagedFlux.create(
                () ->
                        (continuationToken, pageSize) -> {
                            Flux<PagedResponse<BinaryData>> flux =
                                    (continuationToken == null)
                                            ? pagedFluxResponse.byPage().take(1)
                                            : pagedFluxResponse.byPage(continuationToken).take(1);
                            return flux.map(
                                    pagedResponse ->
                                            new PagedResponseBase<Void, Measurement>(
                                                    pagedResponse.getRequest(),
                                                    pagedResponse.getStatusCode(),
                                                    pagedResponse.getHeaders(),
                                                    pagedResponse.getValue().stream()
                                                            .map(
                                                                    protocolMethodData ->
                                                                            protocolMethodData.toObject(
                                                                                    Measurement.class))
                                                            .collect(Collectors.toList()),
                                                    pagedResponse.getContinuationToken(),
                                                    null));
                        });
    }

    /**
     * Lists the measurements in a workspace that are in the given measurement IDs list.
     *
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of Measurement items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Measurement> getMeasurementsByIds() {
        // Generated convenience method for getMeasurementsByIds
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = getMeasurementsByIds(requestOptions);
        return PagedFlux.create(
                () ->
                        (continuationToken, pageSize) -> {
                            Flux<PagedResponse<BinaryData>> flux =
                                    (continuationToken == null)
                                            ? pagedFluxResponse.byPage().take(1)
                                            : pagedFluxResponse.byPage(continuationToken).take(1);
                            return flux.map(
                                    pagedResponse ->
                                            new PagedResponseBase<Void, Measurement>(
                                                    pagedResponse.getRequest(),
                                                    pagedResponse.getStatusCode(),
                                                    pagedResponse.getHeaders(),
                                                    pagedResponse.getValue().stream()
                                                            .map(
                                                                    protocolMethodData ->
                                                                            protocolMethodData.toObject(
                                                                                    Measurement.class))
                                                            .collect(Collectors.toList()),
                                                    pagedResponse.getContinuationToken(),
                                                    null));
                        });
    }

    /**
     * Returns the measurement metadata.
     *
     * @param measurementId The measurement identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return measurement metadata without resource identifier on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MeasurementMetadataBase> getMeasurementMetadata(String measurementId) {
        // Generated convenience method for getMeasurementMetadataWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getMeasurementMetadataWithResponse(measurementId, requestOptions)
                .flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(MeasurementMetadataBase.class));
    }

    /**
     * Returns the measurement processing result.
     *
     * @param measurementId The measurement identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tODO: REMOVE - not in use on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MeasurementProcessingResultsBase> getMeasurementProcessingResults(String measurementId) {
        // Generated convenience method for getMeasurementProcessingResultsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getMeasurementProcessingResultsWithResponse(measurementId, requestOptions)
                .flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(MeasurementProcessingResultsBase.class));
    }

    /**
     * Returns the state machine instance for the measurement.
     *
     * @param measurementId The measurement identifier.
     * @param id The state machine identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return state machine on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StateMachine> getMeasurementStateMachine(String measurementId, String id) {
        // Generated convenience method for getMeasurementStateMachineWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getMeasurementStateMachineWithResponse(measurementId, id, requestOptions)
                .flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(StateMachine.class));
    }

    /**
     * List state machines instance for the measurement.
     *
     * @param measurementId The measurement identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of StateMachine items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<StateMachine> getMeasurementStateMachines(String measurementId) {
        // Generated convenience method for getMeasurementStateMachines
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = getMeasurementStateMachines(measurementId, requestOptions);
        return PagedFlux.create(
                () ->
                        (continuationToken, pageSize) -> {
                            Flux<PagedResponse<BinaryData>> flux =
                                    (continuationToken == null)
                                            ? pagedFluxResponse.byPage().take(1)
                                            : pagedFluxResponse.byPage(continuationToken).take(1);
                            return flux.map(
                                    pagedResponse ->
                                            new PagedResponseBase<Void, StateMachine>(
                                                    pagedResponse.getRequest(),
                                                    pagedResponse.getStatusCode(),
                                                    pagedResponse.getHeaders(),
                                                    pagedResponse.getValue().stream()
                                                            .map(
                                                                    protocolMethodData ->
                                                                            protocolMethodData.toObject(
                                                                                    StateMachine.class))
                                                            .collect(Collectors.toList()),
                                                    pagedResponse.getContinuationToken(),
                                                    null));
                        });
    }

    /**
     * Returns the measurement metadata schema file information.
     *
     * @param measurementId The measurement identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return measurement metadata schema file information model on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MeasurementMetadataSchemaFileInfoBase> getMeasurementMetadataSchemaFileInfo(String measurementId) {
        // Generated convenience method for getMeasurementMetadataSchemaFileInfoWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getMeasurementMetadataSchemaFileInfoWithResponse(measurementId, requestOptions)
                .flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(MeasurementMetadataSchemaFileInfoBase.class));
    }

    /**
     * Get measurement classification by schema name.
     *
     * @param measurementId The measurement identifier.
     * @param schemaName Classification schema name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return measurement classification by schema name on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MeasurementClassification> getMeasurementClassification(String measurementId, String schemaName) {
        // Generated convenience method for getMeasurementClassificationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getMeasurementClassificationWithResponse(measurementId, schemaName, requestOptions)
                .flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(MeasurementClassification.class));
    }

    /**
     * Lists the classifications assigned to the measurement.
     *
     * @param measurementId The measurement identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of MeasurementClassification items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<MeasurementClassification> getMeasurementClassifications(String measurementId) {
        // Generated convenience method for getMeasurementClassifications
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = getMeasurementClassifications(measurementId, requestOptions);
        return PagedFlux.create(
                () ->
                        (continuationToken, pageSize) -> {
                            Flux<PagedResponse<BinaryData>> flux =
                                    (continuationToken == null)
                                            ? pagedFluxResponse.byPage().take(1)
                                            : pagedFluxResponse.byPage(continuationToken).take(1);
                            return flux.map(
                                    pagedResponse ->
                                            new PagedResponseBase<Void, MeasurementClassification>(
                                                    pagedResponse.getRequest(),
                                                    pagedResponse.getStatusCode(),
                                                    pagedResponse.getHeaders(),
                                                    pagedResponse.getValue().stream()
                                                            .map(
                                                                    protocolMethodData ->
                                                                            protocolMethodData.toObject(
                                                                                    MeasurementClassification.class))
                                                            .collect(Collectors.toList()),
                                                    pagedResponse.getContinuationToken(),
                                                    null));
                        });
    }

    /**
     * Get data-stream by identifier.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data-stream by identifier on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DataStream> getDataStream(String measurementId, String dataStreamId) {
        // Generated convenience method for getDataStreamWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDataStreamWithResponse(measurementId, dataStreamId, requestOptions)
                .flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(DataStream.class));
    }

    /**
     * Lists the existing data-streams. Supports the following filter expressions: - filter="type=[System | Raw |
     * Derived]".
     *
     * @param measurementId The measurement identifier.
     * @param filter Filter the result list using the given expression.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DataStream items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DataStream> getAllDataStream(String measurementId, String filter) {
        // Generated convenience method for getAllDataStream
        RequestOptions requestOptions = new RequestOptions();
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter);
        }
        PagedFlux<BinaryData> pagedFluxResponse = getAllDataStream(measurementId, requestOptions);
        return PagedFlux.create(
                () ->
                        (continuationToken, pageSize) -> {
                            Flux<PagedResponse<BinaryData>> flux =
                                    (continuationToken == null)
                                            ? pagedFluxResponse.byPage().take(1)
                                            : pagedFluxResponse.byPage(continuationToken).take(1);
                            return flux.map(
                                    pagedResponse ->
                                            new PagedResponseBase<Void, DataStream>(
                                                    pagedResponse.getRequest(),
                                                    pagedResponse.getStatusCode(),
                                                    pagedResponse.getHeaders(),
                                                    pagedResponse.getValue().stream()
                                                            .map(
                                                                    protocolMethodData ->
                                                                            protocolMethodData.toObject(
                                                                                    DataStream.class))
                                                            .collect(Collectors.toList()),
                                                    pagedResponse.getContinuationToken(),
                                                    null));
                        });
    }

    /**
     * Lists the existing data-streams. Supports the following filter expressions: - filter="type=[System | Raw |
     * Derived]".
     *
     * @param measurementId The measurement identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DataStream items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DataStream> getAllDataStream(String measurementId) {
        // Generated convenience method for getAllDataStream
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = getAllDataStream(measurementId, requestOptions);
        return PagedFlux.create(
                () ->
                        (continuationToken, pageSize) -> {
                            Flux<PagedResponse<BinaryData>> flux =
                                    (continuationToken == null)
                                            ? pagedFluxResponse.byPage().take(1)
                                            : pagedFluxResponse.byPage(continuationToken).take(1);
                            return flux.map(
                                    pagedResponse ->
                                            new PagedResponseBase<Void, DataStream>(
                                                    pagedResponse.getRequest(),
                                                    pagedResponse.getStatusCode(),
                                                    pagedResponse.getHeaders(),
                                                    pagedResponse.getValue().stream()
                                                            .map(
                                                                    protocolMethodData ->
                                                                            protocolMethodData.toObject(
                                                                                    DataStream.class))
                                                            .collect(Collectors.toList()),
                                                    pagedResponse.getContinuationToken(),
                                                    null));
                        });
    }

    /**
     * Returns SAS-signed upload URIs for files that need to be uploaded to Azure Storage. This URI expires in 24 hours.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param body Parameter of type 'UploadDerivedDataStreamFilesRequest' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data stream file upload request parameters on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<UploadDerivedDataStreamFilesResponse> stageFilesForDataStream(
            String measurementId, String dataStreamId, UploadDerivedDataStreamFilesRequest body) {
        // Generated convenience method for stageFilesForDataStreamWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        return stageFilesForDataStreamWithResponse(measurementId, dataStreamId, requestOptions)
                .flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(UploadDerivedDataStreamFilesResponse.class));
    }

    /**
     * Returns SAS-signed upload URIs for files that need to be uploaded to Azure Storage. This URI expires in 24 hours.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data stream file upload request parameters on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<UploadDerivedDataStreamFilesResponse> stageFilesForDataStream(
            String measurementId, String dataStreamId) {
        // Generated convenience method for stageFilesForDataStreamWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return stageFilesForDataStreamWithResponse(measurementId, dataStreamId, requestOptions)
                .flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(UploadDerivedDataStreamFilesResponse.class));
    }

    /**
     * Lists the data-streams by tags.
     *
     * @param measurementId The measurement identifier.
     * @param body Parameter of type 'FindDataStreamByTagsRequestParameters' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DataStream items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DataStream> getDataStreamsByTags(
            String measurementId, FindDataStreamByTagsRequestParameters body) {
        // Generated convenience method for getDataStreamsByTags
        RequestOptions requestOptions = new RequestOptions();
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        PagedFlux<BinaryData> pagedFluxResponse = getDataStreamsByTags(measurementId, requestOptions);
        return PagedFlux.create(
                () ->
                        (continuationToken, pageSize) -> {
                            Flux<PagedResponse<BinaryData>> flux =
                                    (continuationToken == null)
                                            ? pagedFluxResponse.byPage().take(1)
                                            : pagedFluxResponse.byPage(continuationToken).take(1);
                            return flux.map(
                                    pagedResponse ->
                                            new PagedResponseBase<Void, DataStream>(
                                                    pagedResponse.getRequest(),
                                                    pagedResponse.getStatusCode(),
                                                    pagedResponse.getHeaders(),
                                                    pagedResponse.getValue().stream()
                                                            .map(
                                                                    protocolMethodData ->
                                                                            protocolMethodData.toObject(
                                                                                    DataStream.class))
                                                            .collect(Collectors.toList()),
                                                    pagedResponse.getContinuationToken(),
                                                    null));
                        });
    }

    /**
     * Lists the data-streams by tags.
     *
     * @param measurementId The measurement identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DataStream items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DataStream> getDataStreamsByTags(String measurementId) {
        // Generated convenience method for getDataStreamsByTags
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = getDataStreamsByTags(measurementId, requestOptions);
        return PagedFlux.create(
                () ->
                        (continuationToken, pageSize) -> {
                            Flux<PagedResponse<BinaryData>> flux =
                                    (continuationToken == null)
                                            ? pagedFluxResponse.byPage().take(1)
                                            : pagedFluxResponse.byPage(continuationToken).take(1);
                            return flux.map(
                                    pagedResponse ->
                                            new PagedResponseBase<Void, DataStream>(
                                                    pagedResponse.getRequest(),
                                                    pagedResponse.getStatusCode(),
                                                    pagedResponse.getHeaders(),
                                                    pagedResponse.getValue().stream()
                                                            .map(
                                                                    protocolMethodData ->
                                                                            protocolMethodData.toObject(
                                                                                    DataStream.class))
                                                            .collect(Collectors.toList()),
                                                    pagedResponse.getContinuationToken(),
                                                    null));
                        });
    }

    /**
     * Lists the data-streams by lineage.
     *
     * @param measurementId The measurement identifier.
     * @param body Parameter of type 'FindDataStreamByLineageRequestParameters' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DataStream items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DataStream> getDataStreamsByLineage(
            String measurementId, FindDataStreamByLineageRequestParameters body) {
        // Generated convenience method for getDataStreamsByLineage
        RequestOptions requestOptions = new RequestOptions();
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        PagedFlux<BinaryData> pagedFluxResponse = getDataStreamsByLineage(measurementId, requestOptions);
        return PagedFlux.create(
                () ->
                        (continuationToken, pageSize) -> {
                            Flux<PagedResponse<BinaryData>> flux =
                                    (continuationToken == null)
                                            ? pagedFluxResponse.byPage().take(1)
                                            : pagedFluxResponse.byPage(continuationToken).take(1);
                            return flux.map(
                                    pagedResponse ->
                                            new PagedResponseBase<Void, DataStream>(
                                                    pagedResponse.getRequest(),
                                                    pagedResponse.getStatusCode(),
                                                    pagedResponse.getHeaders(),
                                                    pagedResponse.getValue().stream()
                                                            .map(
                                                                    protocolMethodData ->
                                                                            protocolMethodData.toObject(
                                                                                    DataStream.class))
                                                            .collect(Collectors.toList()),
                                                    pagedResponse.getContinuationToken(),
                                                    null));
                        });
    }

    /**
     * Lists the data-streams by lineage.
     *
     * @param measurementId The measurement identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DataStream items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DataStream> getDataStreamsByLineage(String measurementId) {
        // Generated convenience method for getDataStreamsByLineage
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = getDataStreamsByLineage(measurementId, requestOptions);
        return PagedFlux.create(
                () ->
                        (continuationToken, pageSize) -> {
                            Flux<PagedResponse<BinaryData>> flux =
                                    (continuationToken == null)
                                            ? pagedFluxResponse.byPage().take(1)
                                            : pagedFluxResponse.byPage(continuationToken).take(1);
                            return flux.map(
                                    pagedResponse ->
                                            new PagedResponseBase<Void, DataStream>(
                                                    pagedResponse.getRequest(),
                                                    pagedResponse.getStatusCode(),
                                                    pagedResponse.getHeaders(),
                                                    pagedResponse.getValue().stream()
                                                            .map(
                                                                    protocolMethodData ->
                                                                            protocolMethodData.toObject(
                                                                                    DataStream.class))
                                                            .collect(Collectors.toList()),
                                                    pagedResponse.getContinuationToken(),
                                                    null));
                        });
    }

    /**
     * Lists the data-streams by lineage graph.
     *
     * @param measurementId The measurement identifier.
     * @param body Parameter of type 'FindDataStreamByLineageGraphRequestParameters' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DataStreamsGraphListResponse items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DataStreamsGraphListResponse> getDataStreamLineageGraphsByLineage(
            String measurementId, FindDataStreamByLineageGraphRequestParameters body) {
        // Generated convenience method for getDataStreamLineageGraphsByLineage
        RequestOptions requestOptions = new RequestOptions();
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        PagedFlux<BinaryData> pagedFluxResponse = getDataStreamLineageGraphsByLineage(measurementId, requestOptions);
        return PagedFlux.create(
                () ->
                        (continuationToken, pageSize) -> {
                            Flux<PagedResponse<BinaryData>> flux =
                                    (continuationToken == null)
                                            ? pagedFluxResponse.byPage().take(1)
                                            : pagedFluxResponse.byPage(continuationToken).take(1);
                            return flux.map(
                                    pagedResponse ->
                                            new PagedResponseBase<Void, DataStreamsGraphListResponse>(
                                                    pagedResponse.getRequest(),
                                                    pagedResponse.getStatusCode(),
                                                    pagedResponse.getHeaders(),
                                                    pagedResponse.getValue().stream()
                                                            .map(
                                                                    protocolMethodData ->
                                                                            protocolMethodData.toObject(
                                                                                    DataStreamsGraphListResponse.class))
                                                            .collect(Collectors.toList()),
                                                    pagedResponse.getContinuationToken(),
                                                    null));
                        });
    }

    /**
     * Lists the data-streams by lineage graph.
     *
     * @param measurementId The measurement identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DataStreamsGraphListResponse items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DataStreamsGraphListResponse> getDataStreamLineageGraphsByLineage(String measurementId) {
        // Generated convenience method for getDataStreamLineageGraphsByLineage
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = getDataStreamLineageGraphsByLineage(measurementId, requestOptions);
        return PagedFlux.create(
                () ->
                        (continuationToken, pageSize) -> {
                            Flux<PagedResponse<BinaryData>> flux =
                                    (continuationToken == null)
                                            ? pagedFluxResponse.byPage().take(1)
                                            : pagedFluxResponse.byPage(continuationToken).take(1);
                            return flux.map(
                                    pagedResponse ->
                                            new PagedResponseBase<Void, DataStreamsGraphListResponse>(
                                                    pagedResponse.getRequest(),
                                                    pagedResponse.getStatusCode(),
                                                    pagedResponse.getHeaders(),
                                                    pagedResponse.getValue().stream()
                                                            .map(
                                                                    protocolMethodData ->
                                                                            protocolMethodData.toObject(
                                                                                    DataStreamsGraphListResponse.class))
                                                            .collect(Collectors.toList()),
                                                    pagedResponse.getContinuationToken(),
                                                    null));
                        });
    }

    /**
     * Create or replace storage information of the data-stream. Returns the data-stream storage resource with SAS
     * signed URIs that allow uploading to Azure Storage. The SAS token expires in 24 hours.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param body Parameter of type 'StorageCreationParameters' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a data-stream with non sharded storage resource on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Storage> createOrReplaceDataStreamStorage(
            String measurementId, String dataStreamId, StorageCreationParameters body) {
        // Generated convenience method for createOrReplaceDataStreamStorageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        return createOrReplaceDataStreamStorageWithResponse(measurementId, dataStreamId, requestOptions)
                .flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(Storage.class));
    }

    /**
     * Create or replace storage information of the data-stream. Returns the data-stream storage resource with SAS
     * signed URIs that allow uploading to Azure Storage. The SAS token expires in 24 hours.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a data-stream with non sharded storage resource on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Storage> createOrReplaceDataStreamStorage(String measurementId, String dataStreamId) {
        // Generated convenience method for createOrReplaceDataStreamStorageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceDataStreamStorageWithResponse(measurementId, dataStreamId, requestOptions)
                .flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(Storage.class));
    }

    /**
     * Returns the data-stream storage resource with SAS signed URIs that allow uploading to Azure Storage. The SAS
     * token expires in 24 hours.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common data-stream storage model on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StorageBase> getDataStreamStorage(String measurementId, String dataStreamId) {
        // Generated convenience method for getDataStreamStorageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDataStreamStorageWithResponse(measurementId, dataStreamId, requestOptions)
                .flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(StorageBase.class));
    }

    /**
     * Create or replace all tags at once.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param body Parameter of type 'TagSetCreationParameters' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tag set on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TagSetBase> createOrReplaceDataStreamTags(
            String measurementId, String dataStreamId, TagSetCreationParameters body) {
        // Generated convenience method for createOrReplaceDataStreamTagsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        return createOrReplaceDataStreamTagsWithResponse(measurementId, dataStreamId, requestOptions)
                .flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(TagSetBase.class));
    }

    /**
     * Create or replace all tags at once.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tag set on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TagSetBase> createOrReplaceDataStreamTags(String measurementId, String dataStreamId) {
        // Generated convenience method for createOrReplaceDataStreamTagsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceDataStreamTagsWithResponse(measurementId, dataStreamId, requestOptions)
                .flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(TagSetBase.class));
    }

    /**
     * Returns set of the data-stream tags.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a data-stream tags on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TagSet> getDataStreamTags(String measurementId, String dataStreamId) {
        // Generated convenience method for getDataStreamTagsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDataStreamTagsWithResponse(measurementId, dataStreamId, requestOptions)
                .flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(TagSet.class));
    }

    /**
     * Returns SAS signed URIs for reading special files from Azure Storage.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DataStreamFile items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DataStreamFile> getDataStreamFiles(String measurementId, String dataStreamId) {
        // Generated convenience method for getDataStreamFiles
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse = getDataStreamFiles(measurementId, dataStreamId, requestOptions);
        return PagedFlux.create(
                () ->
                        (continuationToken, pageSize) -> {
                            Flux<PagedResponse<BinaryData>> flux =
                                    (continuationToken == null)
                                            ? pagedFluxResponse.byPage().take(1)
                                            : pagedFluxResponse.byPage(continuationToken).take(1);
                            return flux.map(
                                    pagedResponse ->
                                            new PagedResponseBase<Void, DataStreamFile>(
                                                    pagedResponse.getRequest(),
                                                    pagedResponse.getStatusCode(),
                                                    pagedResponse.getHeaders(),
                                                    pagedResponse.getValue().stream()
                                                            .map(
                                                                    protocolMethodData ->
                                                                            protocolMethodData.toObject(
                                                                                    DataStreamFile.class))
                                                            .collect(Collectors.toList()),
                                                    pagedResponse.getContinuationToken(),
                                                    null));
                        });
    }

    /**
     * Returns SAS signed URI of the data-stream logs folder that allow uploading log files to Azure Storage. The SAS
     * token expires in 24 hours.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data-stream logs folder on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DataStreamLogsContainerBase> getDataStreamLogsContainerLocation(
            String measurementId, String dataStreamId) {
        // Generated convenience method for getDataStreamLogsContainerLocationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDataStreamLogsContainerLocationWithResponse(measurementId, dataStreamId, requestOptions)
                .flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(DataStreamLogsContainerBase.class));
    }

    /**
     * Initiates the process of completing the discovery and creating the upload file grouping manifest files.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<LongRunningOperation, Object> beginCompleteDiscovery(String discoveryId, String operationId) {
        // Generated convenience method for beginCompleteDiscoveryWithModel
        RequestOptions requestOptions = new RequestOptions();
        if (operationId != null) {
            requestOptions.setHeader("operation-id", operationId);
        }
        return serviceClient.beginCompleteDiscoveryWithModelAsync(discoveryId, requestOptions);
    }

    /**
     * Initiates the process of completing the discovery and creating the upload file grouping manifest files.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<LongRunningOperation, Object> beginCompleteDiscovery(String discoveryId) {
        // Generated convenience method for beginCompleteDiscoveryWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginCompleteDiscoveryWithModelAsync(discoveryId, requestOptions);
    }

    /**
     * Initiates the process of cancelling the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<LongRunningOperation, Object> beginCancelDiscovery(String discoveryId, String operationId) {
        // Generated convenience method for beginCancelDiscoveryWithModel
        RequestOptions requestOptions = new RequestOptions();
        if (operationId != null) {
            requestOptions.setHeader("operation-id", operationId);
        }
        return serviceClient.beginCancelDiscoveryWithModelAsync(discoveryId, requestOptions);
    }

    /**
     * Initiates the process of cancelling the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<LongRunningOperation, Object> beginCancelDiscovery(String discoveryId) {
        // Generated convenience method for beginCancelDiscoveryWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginCancelDiscoveryWithModelAsync(discoveryId, requestOptions);
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<LongRunningOperation, Object> beginGenerateDiscoverySpecialFileUploadLocations(
            String discoveryId, String operationId) {
        // Generated convenience method for beginGenerateDiscoverySpecialFileUploadLocationsWithModel
        RequestOptions requestOptions = new RequestOptions();
        if (operationId != null) {
            requestOptions.setHeader("operation-id", operationId);
        }
        return serviceClient.beginGenerateDiscoverySpecialFileUploadLocationsWithModelAsync(
                discoveryId, requestOptions);
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<LongRunningOperation, Object> beginGenerateDiscoverySpecialFileUploadLocations(
            String discoveryId) {
        // Generated convenience method for beginGenerateDiscoverySpecialFileUploadLocationsWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginGenerateDiscoverySpecialFileUploadLocationsWithModelAsync(
                discoveryId, requestOptions);
    }

    /**
     * Initiates the process of completing the upload and creating the measurements.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<LongRunningOperation, Object> beginCompleteUpload(String uploadId, String operationId) {
        // Generated convenience method for beginCompleteUploadWithModel
        RequestOptions requestOptions = new RequestOptions();
        if (operationId != null) {
            requestOptions.setHeader("operation-id", operationId);
        }
        return serviceClient.beginCompleteUploadWithModelAsync(uploadId, requestOptions);
    }

    /**
     * Initiates the process of completing the upload and creating the measurements.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<LongRunningOperation, Object> beginCompleteUpload(String uploadId) {
        // Generated convenience method for beginCompleteUploadWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginCompleteUploadWithModelAsync(uploadId, requestOptions);
    }

    /**
     * Initiates the process of cancelling the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<LongRunningOperation, Object> beginCancelUpload(String uploadId, String operationId) {
        // Generated convenience method for beginCancelUploadWithModel
        RequestOptions requestOptions = new RequestOptions();
        if (operationId != null) {
            requestOptions.setHeader("operation-id", operationId);
        }
        return serviceClient.beginCancelUploadWithModelAsync(uploadId, requestOptions);
    }

    /**
     * Initiates the process of cancelling the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<LongRunningOperation, Object> beginCancelUpload(String uploadId) {
        // Generated convenience method for beginCancelUploadWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginCancelUploadWithModelAsync(uploadId, requestOptions);
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<LongRunningOperation, Object> beginGenerateUploadSpecialFiles(
            String uploadId, String operationId) {
        // Generated convenience method for beginGenerateUploadSpecialFilesWithModel
        RequestOptions requestOptions = new RequestOptions();
        if (operationId != null) {
            requestOptions.setHeader("operation-id", operationId);
        }
        return serviceClient.beginGenerateUploadSpecialFilesWithModelAsync(uploadId, requestOptions);
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<LongRunningOperation, Object> beginGenerateUploadSpecialFiles(String uploadId) {
        // Generated convenience method for beginGenerateUploadSpecialFilesWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginGenerateUploadSpecialFilesWithModelAsync(uploadId, requestOptions);
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<LongRunningOperation, Object> beginGenerateUploadDataFiles(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateUploadDataFilesWithModel
        RequestOptions requestOptions = new RequestOptions();
        if (operationId != null) {
            requestOptions.setHeader("operation-id", operationId);
        }
        return serviceClient.beginGenerateUploadDataFilesWithModelAsync(uploadId, requestOptions);
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<LongRunningOperation, Object> beginGenerateUploadDataFiles(String uploadId) {
        // Generated convenience method for beginGenerateUploadDataFilesWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginGenerateUploadDataFilesWithModelAsync(uploadId, requestOptions);
    }

    /**
     * Creates new classification schema.
     *
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @param body Parameter of type 'ClassificationSchemaCreationParameters' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of classification schema resource model.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<LongRunningOperation, Object> beginCreateClassificationSchema(
            String operationId, ClassificationSchemaCreationParameters body) {
        // Generated convenience method for beginCreateClassificationSchemaWithModel
        RequestOptions requestOptions = new RequestOptions();
        if (operationId != null) {
            requestOptions.setHeader("operation-id", operationId);
        }
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        return serviceClient.beginCreateClassificationSchemaWithModelAsync(requestOptions);
    }

    /**
     * Creates new classification schema.
     *
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of classification schema resource model.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<LongRunningOperation, Object> beginCreateClassificationSchema() {
        // Generated convenience method for beginCreateClassificationSchemaWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginCreateClassificationSchemaWithModelAsync(requestOptions);
    }

    /**
     * Deletes the classification schema and all related classification assignments (instances).
     *
     * @param name Classification schema identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<LongRunningOperation, Void> beginDeleteClassificationSchema(String name, String operationId) {
        // Generated convenience method for beginDeleteClassificationSchemaWithModel
        RequestOptions requestOptions = new RequestOptions();
        if (operationId != null) {
            requestOptions.setHeader("operation-id", operationId);
        }
        return serviceClient.beginDeleteClassificationSchemaWithModelAsync(name, requestOptions);
    }

    /**
     * Deletes the classification schema and all related classification assignments (instances).
     *
     * @param name Classification schema identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<LongRunningOperation, Void> beginDeleteClassificationSchema(String name) {
        // Generated convenience method for beginDeleteClassificationSchemaWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginDeleteClassificationSchemaWithModelAsync(name, requestOptions);
    }

    /**
     * Deletes the measurement.
     *
     * @param measurementId The measurement identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<LongRunningOperation, Void> beginDeleteMeasurement(String measurementId, String operationId) {
        // Generated convenience method for beginDeleteMeasurementWithModel
        RequestOptions requestOptions = new RequestOptions();
        if (operationId != null) {
            requestOptions.setHeader("operation-id", operationId);
        }
        return serviceClient.beginDeleteMeasurementWithModelAsync(measurementId, requestOptions);
    }

    /**
     * Deletes the measurement.
     *
     * @param measurementId The measurement identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<LongRunningOperation, Void> beginDeleteMeasurement(String measurementId) {
        // Generated convenience method for beginDeleteMeasurementWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginDeleteMeasurementWithModelAsync(measurementId, requestOptions);
    }

    /**
     * Initiates process of applying an action on the measurement.
     *
     * @param measurementId The measurement identifier.
     * @param id The state machine identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @param body Parameter of type 'StateMachineAction' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of state machine.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<LongRunningOperation, Object> beginActMeasurementStateMachine(
            String measurementId, String id, String operationId, StateMachineAction body) {
        // Generated convenience method for beginActMeasurementStateMachineWithModel
        RequestOptions requestOptions = new RequestOptions();
        if (operationId != null) {
            requestOptions.setHeader("operation-id", operationId);
        }
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        return serviceClient.beginActMeasurementStateMachineWithModelAsync(measurementId, id, requestOptions);
    }

    /**
     * Initiates process of applying an action on the measurement.
     *
     * @param measurementId The measurement identifier.
     * @param id The state machine identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of state machine.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<LongRunningOperation, Object> beginActMeasurementStateMachine(String measurementId, String id) {
        // Generated convenience method for beginActMeasurementStateMachineWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginActMeasurementStateMachineWithModelAsync(measurementId, id, requestOptions);
    }

    /**
     * Unassign the classification from the measurement.
     *
     * @param measurementId The measurement identifier.
     * @param schemaName Classification schema name.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<LongRunningOperation, Void> beginDeleteMeasurementClassification(
            String measurementId, String schemaName, String operationId) {
        // Generated convenience method for beginDeleteMeasurementClassificationWithModel
        RequestOptions requestOptions = new RequestOptions();
        if (operationId != null) {
            requestOptions.setHeader("operation-id", operationId);
        }
        return serviceClient.beginDeleteMeasurementClassificationWithModelAsync(
                measurementId, schemaName, requestOptions);
    }

    /**
     * Unassign the classification from the measurement.
     *
     * @param measurementId The measurement identifier.
     * @param schemaName Classification schema name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<LongRunningOperation, Void> beginDeleteMeasurementClassification(
            String measurementId, String schemaName) {
        // Generated convenience method for beginDeleteMeasurementClassificationWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginDeleteMeasurementClassificationWithModelAsync(
                measurementId, schemaName, requestOptions);
    }

    /**
     * Assigns classification to the measurement.
     *
     * @param measurementId The measurement identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @param body Parameter of type 'MeasurementClassificationCreationParameters' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of measurement classification.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<LongRunningOperation, Object> beginCreateMeasurementClassification(
            String measurementId, String operationId, MeasurementClassificationCreationParameters body) {
        // Generated convenience method for beginCreateMeasurementClassificationWithModel
        RequestOptions requestOptions = new RequestOptions();
        if (operationId != null) {
            requestOptions.setHeader("operation-id", operationId);
        }
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        return serviceClient.beginCreateMeasurementClassificationWithModelAsync(measurementId, requestOptions);
    }

    /**
     * Assigns classification to the measurement.
     *
     * @param measurementId The measurement identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of measurement classification.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<LongRunningOperation, Object> beginCreateMeasurementClassification(String measurementId) {
        // Generated convenience method for beginCreateMeasurementClassificationWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginCreateMeasurementClassificationWithModelAsync(measurementId, requestOptions);
    }

    /**
     * Creates new data-stream resource.
     *
     * @param measurementId The measurement identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @param body Parameter of type 'DataStreamCreationParameters' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<LongRunningOperation, Object> beginCreateDataStream(
            String measurementId, String operationId, DataStreamCreationParameters body) {
        // Generated convenience method for beginCreateDataStreamWithModel
        RequestOptions requestOptions = new RequestOptions();
        if (operationId != null) {
            requestOptions.setHeader("operation-id", operationId);
        }
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        return serviceClient.beginCreateDataStreamWithModelAsync(measurementId, requestOptions);
    }

    /**
     * Creates new data-stream resource.
     *
     * @param measurementId The measurement identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<LongRunningOperation, Object> beginCreateDataStream(String measurementId) {
        // Generated convenience method for beginCreateDataStreamWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginCreateDataStreamWithModelAsync(measurementId, requestOptions);
    }

    /**
     * Clear the data-stream content.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<LongRunningOperation, Object> beginClearContentOfDataStream(
            String measurementId, String dataStreamId, String operationId) {
        // Generated convenience method for beginClearContentOfDataStreamWithModel
        RequestOptions requestOptions = new RequestOptions();
        if (operationId != null) {
            requestOptions.setHeader("operation-id", operationId);
        }
        return serviceClient.beginClearContentOfDataStreamWithModelAsync(measurementId, dataStreamId, requestOptions);
    }

    /**
     * Clear the data-stream content.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<LongRunningOperation, Object> beginClearContentOfDataStream(
            String measurementId, String dataStreamId) {
        // Generated convenience method for beginClearContentOfDataStreamWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginClearContentOfDataStreamWithModelAsync(measurementId, dataStreamId, requestOptions);
    }

    /**
     * Marks a data stream as completed.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<LongRunningOperation, Object> beginCompleteDataStream(
            String measurementId, String dataStreamId, String operationId) {
        // Generated convenience method for beginCompleteDataStreamWithModel
        RequestOptions requestOptions = new RequestOptions();
        if (operationId != null) {
            requestOptions.setHeader("operation-id", operationId);
        }
        return serviceClient.beginCompleteDataStreamWithModelAsync(measurementId, dataStreamId, requestOptions);
    }

    /**
     * Marks a data stream as completed.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<LongRunningOperation, Object> beginCompleteDataStream(String measurementId, String dataStreamId) {
        // Generated convenience method for beginCompleteDataStreamWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginCompleteDataStreamWithModelAsync(measurementId, dataStreamId, requestOptions);
    }

    /**
     * Marks a data stream as failed.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<LongRunningOperation, Object> beginFailDataStream(
            String measurementId, String dataStreamId, String operationId) {
        // Generated convenience method for beginFailDataStreamWithModel
        RequestOptions requestOptions = new RequestOptions();
        if (operationId != null) {
            requestOptions.setHeader("operation-id", operationId);
        }
        return serviceClient.beginFailDataStreamWithModelAsync(measurementId, dataStreamId, requestOptions);
    }

    /**
     * Marks a data stream as failed.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<LongRunningOperation, Object> beginFailDataStream(String measurementId, String dataStreamId) {
        // Generated convenience method for beginFailDataStreamWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginFailDataStreamWithModelAsync(measurementId, dataStreamId, requestOptions);
    }

    /**
     * Initiates the process of generating SAS signed URIs for accessing the data-stream files.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of data-stream file list.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<LongRunningOperation, Object> beginGenerateDataStreamFiles(
            String measurementId, String dataStreamId, String operationId) {
        // Generated convenience method for beginGenerateDataStreamFilesWithModel
        RequestOptions requestOptions = new RequestOptions();
        if (operationId != null) {
            requestOptions.setHeader("operation-id", operationId);
        }
        return serviceClient.beginGenerateDataStreamFilesWithModelAsync(measurementId, dataStreamId, requestOptions);
    }

    /**
     * Initiates the process of generating SAS signed URIs for accessing the data-stream files.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of data-stream file list.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<LongRunningOperation, Object> beginGenerateDataStreamFiles(
            String measurementId, String dataStreamId) {
        // Generated convenience method for beginGenerateDataStreamFilesWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginGenerateDataStreamFilesWithModelAsync(measurementId, dataStreamId, requestOptions);
    }
}
