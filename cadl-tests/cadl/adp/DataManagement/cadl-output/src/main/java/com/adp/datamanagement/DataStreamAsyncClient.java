// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.adp.datamanagement;

import com.adp.datamanagement.implementation.DataStreamClientImpl;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.polling.PollerFlux;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous DataStreamClient type. */
@ServiceClient(builder = DataStreamClientBuilder.class, isAsync = true)
public final class DataStreamAsyncClient {

    @Generated private final DataStreamClientImpl serviceClient;

    /**
     * Initializes an instance of DataStreamAsyncClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    DataStreamAsyncClient(DataStreamClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Get data-stream by identifier.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     dataStreamId: String (Required)
     *     resourceEndpoint: String (Optional)
     *     lineage (Required): {
     *         producerMetadata (Required): {
     *             String: String (Required)
     *         }
     *         inputs (Required): [
     *              (Required){
     *                 sourceDataStreamId: String (Required)
     *                 channels (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *         ]
     *     }
     *     status: String(Created/Completing/Completed/Failed/Failing/Clearing/Cleared) (Required)
     *     type: String(System/Raw/Derived) (Required)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return data-stream by identifier along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponse(
            String measurementId, String dataStreamId, RequestOptions requestOptions) {
        return this.serviceClient.getWithResponseAsync(measurementId, dataStreamId, requestOptions);
    }

    /**
     * Creates new data-stream resource.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     lineage (Required): {
     *         producerMetadata (Required): {
     *             String: String (Required)
     *         }
     *         inputs (Required): [
     *              (Required){
     *                 sourceDataStreamId: String (Required)
     *                 channels (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginCreate(String measurementId, RequestOptions requestOptions) {
        return this.serviceClient.beginCreateAsync(measurementId, requestOptions);
    }

    /**
     * Clear the data-stream content.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginClearContent(
            String measurementId, String dataStreamId, RequestOptions requestOptions) {
        return this.serviceClient.beginClearContentAsync(measurementId, dataStreamId, requestOptions);
    }

    /**
     * Lists the existing data-streams. Supports the following filter expressions: - filter="type=[System | Raw |
     * Derived]".
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     dataStreamId: String (Required)
     *     resourceEndpoint: String (Optional)
     *     lineage (Required): {
     *         producerMetadata (Required): {
     *             String: String (Required)
     *         }
     *         inputs (Required): [
     *              (Required){
     *                 sourceDataStreamId: String (Required)
     *                 channels (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *         ]
     *     }
     *     status: String(Created/Completing/Completed/Failed/Failing/Clearing/Cleared) (Required)
     *     type: String(System/Raw/Derived) (Required)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DataStream items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> list(String measurementId, RequestOptions requestOptions) {
        return this.serviceClient.listAsync(measurementId, requestOptions);
    }

    /**
     * Returns SAS-signed upload URIs for files that need to be uploaded to Azure Storage. This URI expires in 24 hours.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     files (Required): [
     *          (Required){
     *             clientFileName: String (Required)
     *             recordingTimestampUtc: OffsetDateTime (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     files (Required): [
     *          (Required){
     *             clientFileName: String (Required)
     *             fileUri: String (Required)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return data stream file upload request parameters along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> stageFilesWithResponse(
            String measurementId, String dataStreamId, RequestOptions requestOptions) {
        return this.serviceClient.stageFilesWithResponseAsync(measurementId, dataStreamId, requestOptions);
    }

    /**
     * Marks a data stream as completed.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginComplete(
            String measurementId, String dataStreamId, RequestOptions requestOptions) {
        return this.serviceClient.beginCompleteAsync(measurementId, dataStreamId, requestOptions);
    }

    /**
     * Marks a data stream as failed.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginFail(
            String measurementId, String dataStreamId, RequestOptions requestOptions) {
        return this.serviceClient.beginFailAsync(measurementId, dataStreamId, requestOptions);
    }

    /**
     * Lists the data-streams by tags.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     tags (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     dataStreamId: String (Required)
     *     resourceEndpoint: String (Optional)
     *     lineage (Required): {
     *         producerMetadata (Required): {
     *             String: String (Required)
     *         }
     *         inputs (Required): [
     *              (Required){
     *                 sourceDataStreamId: String (Required)
     *                 channels (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *         ]
     *     }
     *     status: String(Created/Completing/Completed/Failed/Failing/Clearing/Cleared) (Required)
     *     type: String(System/Raw/Derived) (Required)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DataStream items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> findByTags(String measurementId, RequestOptions requestOptions) {
        return this.serviceClient.findByTagsAsync(measurementId, requestOptions);
    }

    /**
     * Lists the data-streams by lineage.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     lineage (Required): {
     *         producerMetadata (Required): {
     *             String: String (Required)
     *         }
     *         inputs (Required): [
     *              (Required){
     *                 sourceDataStreamId: String (Required)
     *                 channels (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     dataStreamId: String (Required)
     *     resourceEndpoint: String (Optional)
     *     lineage (Required): {
     *         producerMetadata (Required): {
     *             String: String (Required)
     *         }
     *         inputs (Required): [
     *              (Required){
     *                 sourceDataStreamId: String (Required)
     *                 channels (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *         ]
     *     }
     *     status: String(Created/Completing/Completed/Failed/Failing/Clearing/Cleared) (Required)
     *     type: String(System/Raw/Derived) (Required)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DataStream items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> findByLineage(String measurementId, RequestOptions requestOptions) {
        return this.serviceClient.findByLineageAsync(measurementId, requestOptions);
    }

    /**
     * Lists the data-streams by lineage graph.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     processingObjects (Required): [
     *          (Required){
     *             metadata (Required): {
     *                 String: String (Required)
     *             }
     *             id: String (Required)
     *         }
     *     ]
     *     edges (Required): [
     *          (Required){
     *             sourceId: String (Required)
     *             targetId: String (Required)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     dataStreamsGraphs (Required): [
     *          (Required){
     *             dataStreamByProcessingObjectId (Required): {
     *                 String (Required): {
     *                     dataStreamId: String (Required)
     *                     resourceEndpoint: String (Optional)
     *                     lineage (Required): {
     *                         producerMetadata (Required): {
     *                             String: String (Required)
     *                         }
     *                         inputs (Required): [
     *                              (Required){
     *                                 sourceDataStreamId: String (Required)
     *                                 channels (Optional): [
     *                                     String (Optional)
     *                                 ]
     *                             }
     *                         ]
     *                     }
     *                     status: String(Created/Completing/Completed/Failed/Failing/Clearing/Cleared) (Required)
     *                     type: String(System/Raw/Derived) (Required)
     *                     etag: String (Required)
     *                 }
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DataStreamsGraphListResponse items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> getLineageGraphsByLineage(String measurementId, RequestOptions requestOptions) {
        return this.serviceClient.getLineageGraphsByLineageAsync(measurementId, requestOptions);
    }
}
