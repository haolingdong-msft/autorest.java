// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.adp.datamanagement;

import com.adp.datamanagement.models.Discovery;
import com.adp.datamanagement.models.DiscoveryCreationParameters;
import com.adp.datamanagement.models.DiscoverySpecialFile;
import com.adp.datamanagement.models.DiscoveryUpload;
import com.adp.datamanagement.models.LongRunningOperation;
import com.adp.datamanagement.models.Upload;
import com.adp.datamanagement.models.UploadCreationParameters;
import com.adp.datamanagement.models.UploadDataFile;
import com.adp.datamanagement.models.UploadResultMeasurement;
import com.adp.datamanagement.models.UploadSpecialFile;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.polling.SyncPoller;

/** Initializes a new instance of the synchronous DataManagementClient type. */
@ServiceClient(builder = DataManagementClientBuilder.class)
public final class DataManagementClient {

    @Generated private final DataManagementAsyncClient client;

    /**
     * Initializes an instance of DataManagementClient class.
     *
     * @param client the async client.
     */
    @Generated
    DataManagementClient(DataManagementAsyncClient client) {
        this.client = client;
    }

    /**
     * Get the details of an LRO.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String (Required)
     *     status: String(Created/InProgress/Succeeded/Failed/Canceled) (Required)
     *     operationType: String (Optional)
     *     error: ResponseError (Optional)
     *     resultUri: String (Optional)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param operationId The unique ID of the operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of an LRO along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getStatusWithResponse(String operationId, RequestOptions requestOptions) {
        return this.client.getStatusWithResponse(operationId, requestOptions).block();
    }

    /**
     * Creates a new ingestion discovery instance.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     externalPackageId: String (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     discoveryId: String (Required)
     *     externalPackageId: String (Optional)
     *     manifestUri: String (Optional)
     *     status: String(Created/GeneratingSpecialFilesUploadInfo/GeneratedSpecialFilesUploadInfo/Completing/Completed/Aborting/Aborted/Failed) (Optional)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param discoveryId The discovery identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a discovery resource along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrReplaceWithResponse(String discoveryId, RequestOptions requestOptions) {
        return this.client.createOrReplaceWithResponse(discoveryId, requestOptions).block();
    }

    /**
     * Creates a new ingestion upload instance.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     externalPackageId: String (Optional)
     *     discoveryId: String (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     uploadId: String (Required)
     *     externalPackageId: String (Optional)
     *     discoveryId: String (Optional)
     *     manifestUri: String (Optional)
     *     status: String(Created/GeneratingSpecialFilesUploadInfo/GeneratedSpecialFilesUploadInfo/GeneratingDataFilesUploadInfo/GeneratedDataFilesUploadInfo/Completing/Completed/Aborting/Aborted/Failed) (Optional)
     *     resourceEndpoint: String (Optional)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an upload resource along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrReplaceWithResponse(String uploadId, RequestOptions requestOptions) {
        return this.client.createOrReplaceWithResponse(uploadId, requestOptions).block();
    }

    /**
     * Get discovery by ID.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     discoveryId: String (Required)
     *     externalPackageId: String (Optional)
     *     manifestUri: String (Optional)
     *     status: String(Created/GeneratingSpecialFilesUploadInfo/GeneratedSpecialFilesUploadInfo/Completing/Completed/Aborting/Aborted/Failed) (Optional)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param discoveryId The discovery identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return discovery by ID along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String discoveryId, RequestOptions requestOptions) {
        return this.client.getWithResponse(discoveryId, requestOptions).block();
    }

    /**
     * Get discovery by ID.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     uploadId: String (Required)
     *     externalPackageId: String (Optional)
     *     discoveryId: String (Optional)
     *     manifestUri: String (Optional)
     *     status: String(Created/GeneratingSpecialFilesUploadInfo/GeneratedSpecialFilesUploadInfo/GeneratingDataFilesUploadInfo/GeneratedDataFilesUploadInfo/Completing/Completed/Aborting/Aborted/Failed) (Optional)
     *     resourceEndpoint: String (Optional)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return discovery by ID along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String uploadId, RequestOptions requestOptions) {
        return this.client.getWithResponse(uploadId, requestOptions).block();
    }

    /**
     * Initiates the process of completing the discovery and creating the upload file grouping manifest files.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param discoveryId The discovery identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginComplete(String discoveryId, RequestOptions requestOptions) {
        return this.client.beginComplete(discoveryId, requestOptions).getSyncPoller();
    }

    /**
     * Initiates the process of completing the upload and creating the measurements.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginComplete(String uploadId, RequestOptions requestOptions) {
        return this.client.beginComplete(uploadId, requestOptions).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the discovery.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param discoveryId The discovery identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginCancel(String discoveryId, RequestOptions requestOptions) {
        return this.client.beginCancel(discoveryId, requestOptions).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the upload.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginCancel(String uploadId, RequestOptions requestOptions) {
        return this.client.beginCancel(uploadId, requestOptions).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param discoveryId The discovery identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginGenerate(String discoveryId, RequestOptions requestOptions) {
        return this.client.beginGenerate(discoveryId, requestOptions).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginGenerate(String uploadId, RequestOptions requestOptions) {
        return this.client.beginGenerate(uploadId, requestOptions).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginGenerate(String uploadId, RequestOptions requestOptions) {
        return this.client.beginGenerate(uploadId, requestOptions).getSyncPoller();
    }

    /**
     * List special files details for the discovery resource. Returns SAS signed URI that allows uploading special files
     * to Azure Storage. This URI expires in 24 hours.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     clientFileName: String (Required)
     *     fileUri: String (Required)
     * }
     * }</pre>
     *
     * @param discoveryId The discovery identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DiscoverySpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listWritableUris(String discoveryId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.listWritableUris(discoveryId, requestOptions));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading special files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     clientFileName: String (Required)
     *     fileUri: String (Required)
     * }
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listWritableUris(String uploadId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.listWritableUris(uploadId, requestOptions));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading data files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     clientFileName: String (Required)
     *     fileUri: String (Required)
     * }
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of UploadDataFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listWritableUris(String uploadId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.listWritableUris(uploadId, requestOptions));
    }

    /**
     * List upload detail for the discovery resource.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     uploadId: String (Required)
     *     manifestUri: String (Required)
     *     resourceEndpoint: String (Optional)
     * }
     * }</pre>
     *
     * @param discoveryId The discovery identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DiscoveryUpload items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> list(String discoveryId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.list(discoveryId, requestOptions));
    }

    /**
     * Returns SAS signed URIs for reading special files from Azure Storage.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     clientFileName: String (Required)
     *     fileUri: String (Required)
     * }
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> list(String uploadId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.list(uploadId, requestOptions));
    }

    /**
     * List of the measurement identifiers that have been created by the upload.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     measurementId: String (Required)
     * }
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of UploadResultMeasurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> list(String uploadId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.list(uploadId, requestOptions));
    }

    /**
     * Creates a new ingestion discovery instance.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     externalPackageId: String (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     discoveryId: String (Required)
     *     externalPackageId: String (Optional)
     *     manifestUri: String (Optional)
     *     status: String(Created/GeneratingSpecialFilesUploadInfo/GeneratedSpecialFilesUploadInfo/Completing/Completed/Aborting/Aborted/Failed) (Optional)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param discoveryId The discovery identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a discovery resource along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrReplaceWithResponse(String discoveryId, RequestOptions requestOptions) {
        return this.client.createOrReplaceWithResponse(discoveryId, requestOptions).block();
    }

    /**
     * Creates a new ingestion upload instance.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     externalPackageId: String (Optional)
     *     discoveryId: String (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     uploadId: String (Required)
     *     externalPackageId: String (Optional)
     *     discoveryId: String (Optional)
     *     manifestUri: String (Optional)
     *     status: String(Created/GeneratingSpecialFilesUploadInfo/GeneratedSpecialFilesUploadInfo/GeneratingDataFilesUploadInfo/GeneratedDataFilesUploadInfo/Completing/Completed/Aborting/Aborted/Failed) (Optional)
     *     resourceEndpoint: String (Optional)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an upload resource along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrReplaceWithResponse(String uploadId, RequestOptions requestOptions) {
        return this.client.createOrReplaceWithResponse(uploadId, requestOptions).block();
    }

    /**
     * Get discovery by ID.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     discoveryId: String (Required)
     *     externalPackageId: String (Optional)
     *     manifestUri: String (Optional)
     *     status: String(Created/GeneratingSpecialFilesUploadInfo/GeneratedSpecialFilesUploadInfo/Completing/Completed/Aborting/Aborted/Failed) (Optional)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param discoveryId The discovery identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return discovery by ID along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String discoveryId, RequestOptions requestOptions) {
        return this.client.getWithResponse(discoveryId, requestOptions).block();
    }

    /**
     * Get discovery by ID.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     uploadId: String (Required)
     *     externalPackageId: String (Optional)
     *     discoveryId: String (Optional)
     *     manifestUri: String (Optional)
     *     status: String(Created/GeneratingSpecialFilesUploadInfo/GeneratedSpecialFilesUploadInfo/GeneratingDataFilesUploadInfo/GeneratedDataFilesUploadInfo/Completing/Completed/Aborting/Aborted/Failed) (Optional)
     *     resourceEndpoint: String (Optional)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return discovery by ID along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String uploadId, RequestOptions requestOptions) {
        return this.client.getWithResponse(uploadId, requestOptions).block();
    }

    /**
     * Initiates the process of completing the discovery and creating the upload file grouping manifest files.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param discoveryId The discovery identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginComplete(String discoveryId, RequestOptions requestOptions) {
        return this.client.beginComplete(discoveryId, requestOptions).getSyncPoller();
    }

    /**
     * Initiates the process of completing the upload and creating the measurements.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginComplete(String uploadId, RequestOptions requestOptions) {
        return this.client.beginComplete(uploadId, requestOptions).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the discovery.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param discoveryId The discovery identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginCancel(String discoveryId, RequestOptions requestOptions) {
        return this.client.beginCancel(discoveryId, requestOptions).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the upload.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginCancel(String uploadId, RequestOptions requestOptions) {
        return this.client.beginCancel(uploadId, requestOptions).getSyncPoller();
    }

    /**
     * List upload detail for the discovery resource.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     uploadId: String (Required)
     *     manifestUri: String (Required)
     *     resourceEndpoint: String (Optional)
     * }
     * }</pre>
     *
     * @param discoveryId The discovery identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DiscoveryUpload items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> list(String discoveryId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.list(discoveryId, requestOptions));
    }

    /**
     * Returns SAS signed URIs for reading special files from Azure Storage.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     clientFileName: String (Required)
     *     fileUri: String (Required)
     * }
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> list(String uploadId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.list(uploadId, requestOptions));
    }

    /**
     * List of the measurement identifiers that have been created by the upload.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     measurementId: String (Required)
     * }
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of UploadResultMeasurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> list(String uploadId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.list(uploadId, requestOptions));
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param discoveryId The discovery identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginGenerate(String discoveryId, RequestOptions requestOptions) {
        return this.client.beginGenerate(discoveryId, requestOptions).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginGenerate(String uploadId, RequestOptions requestOptions) {
        return this.client.beginGenerate(uploadId, requestOptions).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginGenerate(String uploadId, RequestOptions requestOptions) {
        return this.client.beginGenerate(uploadId, requestOptions).getSyncPoller();
    }

    /**
     * List special files details for the discovery resource. Returns SAS signed URI that allows uploading special files
     * to Azure Storage. This URI expires in 24 hours.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     clientFileName: String (Required)
     *     fileUri: String (Required)
     * }
     * }</pre>
     *
     * @param discoveryId The discovery identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DiscoverySpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listWritableUris(String discoveryId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.listWritableUris(discoveryId, requestOptions));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading special files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     clientFileName: String (Required)
     *     fileUri: String (Required)
     * }
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listWritableUris(String uploadId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.listWritableUris(uploadId, requestOptions));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading data files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     clientFileName: String (Required)
     *     fileUri: String (Required)
     * }
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of UploadDataFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listWritableUris(String uploadId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.listWritableUris(uploadId, requestOptions));
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param discoveryId The discovery identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginGenerate(String discoveryId, RequestOptions requestOptions) {
        return this.client.beginGenerate(discoveryId, requestOptions).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginGenerate(String uploadId, RequestOptions requestOptions) {
        return this.client.beginGenerate(uploadId, requestOptions).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginGenerate(String uploadId, RequestOptions requestOptions) {
        return this.client.beginGenerate(uploadId, requestOptions).getSyncPoller();
    }

    /**
     * List special files details for the discovery resource. Returns SAS signed URI that allows uploading special files
     * to Azure Storage. This URI expires in 24 hours.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     clientFileName: String (Required)
     *     fileUri: String (Required)
     * }
     * }</pre>
     *
     * @param discoveryId The discovery identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DiscoverySpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listWritableUris(String discoveryId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.listWritableUris(discoveryId, requestOptions));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading special files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     clientFileName: String (Required)
     *     fileUri: String (Required)
     * }
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listWritableUris(String uploadId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.listWritableUris(uploadId, requestOptions));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading data files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     clientFileName: String (Required)
     *     fileUri: String (Required)
     * }
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of UploadDataFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listWritableUris(String uploadId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.listWritableUris(uploadId, requestOptions));
    }

    /**
     * List upload detail for the discovery resource.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     uploadId: String (Required)
     *     manifestUri: String (Required)
     *     resourceEndpoint: String (Optional)
     * }
     * }</pre>
     *
     * @param discoveryId The discovery identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DiscoveryUpload items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> list(String discoveryId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.list(discoveryId, requestOptions));
    }

    /**
     * Returns SAS signed URIs for reading special files from Azure Storage.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     clientFileName: String (Required)
     *     fileUri: String (Required)
     * }
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> list(String uploadId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.list(uploadId, requestOptions));
    }

    /**
     * List of the measurement identifiers that have been created by the upload.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     measurementId: String (Required)
     * }
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of UploadResultMeasurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> list(String uploadId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.list(uploadId, requestOptions));
    }

    /**
     * Get the details of an LRO.
     *
     * @param operationId The unique ID of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of an LRO.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LongRunningOperation getStatus(String operationId) {
        // Generated convenience method for getStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getStatusWithResponse(operationId, requestOptions).getValue().toObject(LongRunningOperation.class);
    }

    /**
     * Creates a new ingestion discovery instance.
     *
     * @param discoveryId The discovery identifier.
     * @param body Parameter of type 'DiscoveryCreationParameters' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Discovery createOrReplace(String discoveryId, DiscoveryCreationParameters body) {
        // Generated convenience method for createOrReplaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        return createOrReplaceWithResponse(discoveryId, requestOptions).getValue().toObject(Discovery.class);
    }

    /**
     * Creates a new ingestion discovery instance.
     *
     * @param discoveryId The discovery identifier.
     * @param body Parameter of type 'DiscoveryCreationParameters' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Discovery createOrReplace(String discoveryId, DiscoveryCreationParameters body) {
        // Generated convenience method for createOrReplaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        return createOrReplaceWithResponse(uploadId, requestOptions).getValue().toObject(Discovery.class);
    }

    /**
     * Creates a new ingestion discovery instance.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Discovery createOrReplace(String discoveryId) {
        // Generated convenience method for createOrReplaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceWithResponse(discoveryId, requestOptions).getValue().toObject(Discovery.class);
    }

    /**
     * Creates a new ingestion discovery instance.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Discovery createOrReplace(String discoveryId) {
        // Generated convenience method for createOrReplaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceWithResponse(uploadId, requestOptions).getValue().toObject(Discovery.class);
    }

    /**
     * Creates a new ingestion upload instance.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Upload createOrReplace(String uploadId) {
        // Generated convenience method for createOrReplaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceWithResponse(discoveryId, requestOptions).getValue().toObject(Upload.class);
    }

    /**
     * Creates a new ingestion upload instance.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Upload createOrReplace(String uploadId) {
        // Generated convenience method for createOrReplaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceWithResponse(uploadId, requestOptions).getValue().toObject(Upload.class);
    }

    /**
     * Creates a new ingestion discovery instance.
     *
     * @param discoveryId The discovery identifier.
     * @param body Parameter of type 'DiscoveryCreationParameters' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Discovery createOrReplace(String discoveryId, DiscoveryCreationParameters body) {
        // Generated convenience method for createOrReplaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        return createOrReplaceWithResponse(discoveryId, requestOptions).getValue().toObject(Discovery.class);
    }

    /**
     * Creates a new ingestion discovery instance.
     *
     * @param discoveryId The discovery identifier.
     * @param body Parameter of type 'DiscoveryCreationParameters' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Discovery createOrReplace(String discoveryId, DiscoveryCreationParameters body) {
        // Generated convenience method for createOrReplaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        return createOrReplaceWithResponse(uploadId, requestOptions).getValue().toObject(Discovery.class);
    }

    /**
     * Creates a new ingestion discovery instance.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Discovery createOrReplace(String discoveryId) {
        // Generated convenience method for createOrReplaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceWithResponse(discoveryId, requestOptions).getValue().toObject(Discovery.class);
    }

    /**
     * Creates a new ingestion discovery instance.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Discovery createOrReplace(String discoveryId) {
        // Generated convenience method for createOrReplaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceWithResponse(uploadId, requestOptions).getValue().toObject(Discovery.class);
    }

    /**
     * Creates a new ingestion upload instance.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Upload createOrReplace(String uploadId) {
        // Generated convenience method for createOrReplaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceWithResponse(discoveryId, requestOptions).getValue().toObject(Upload.class);
    }

    /**
     * Creates a new ingestion upload instance.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Upload createOrReplace(String uploadId) {
        // Generated convenience method for createOrReplaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceWithResponse(uploadId, requestOptions).getValue().toObject(Upload.class);
    }

    /**
     * Get discovery by ID.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discovery by ID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Discovery get(String discoveryId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(discoveryId, requestOptions).getValue().toObject(Discovery.class);
    }

    /**
     * Get discovery by ID.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discovery by ID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Discovery get(String discoveryId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(uploadId, requestOptions).getValue().toObject(Discovery.class);
    }

    /**
     * Get discovery by ID.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discovery by ID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Upload get(String uploadId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(discoveryId, requestOptions).getValue().toObject(Upload.class);
    }

    /**
     * Get discovery by ID.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discovery by ID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Upload get(String uploadId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(uploadId, requestOptions).getValue().toObject(Upload.class);
    }

    /**
     * Get discovery by ID.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discovery by ID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Discovery get(String discoveryId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(discoveryId, requestOptions).getValue().toObject(Discovery.class);
    }

    /**
     * Get discovery by ID.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discovery by ID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Discovery get(String discoveryId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(uploadId, requestOptions).getValue().toObject(Discovery.class);
    }

    /**
     * Get discovery by ID.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discovery by ID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Upload get(String uploadId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(discoveryId, requestOptions).getValue().toObject(Upload.class);
    }

    /**
     * Get discovery by ID.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discovery by ID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Upload get(String uploadId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(uploadId, requestOptions).getValue().toObject(Upload.class);
    }

    /**
     * Initiates the process of completing the discovery and creating the upload file grouping manifest files.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginComplete(String discoveryId, String operationId) {
        // Generated convenience method for beginCompleteWithModel
        return client.beginComplete(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of completing the discovery and creating the upload file grouping manifest files.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginComplete(String discoveryId, String operationId) {
        // Generated convenience method for beginCompleteWithModel
        return client.beginComplete(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of completing the upload and creating the measurements.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginComplete(String uploadId, String operationId) {
        // Generated convenience method for beginCompleteWithModel
        return client.beginComplete(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of completing the upload and creating the measurements.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginComplete(String uploadId, String operationId) {
        // Generated convenience method for beginCompleteWithModel
        return client.beginComplete(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of completing the discovery and creating the upload file grouping manifest files.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginComplete(String discoveryId) {
        // Generated convenience method for beginCompleteWithModel
        return client.beginComplete(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of completing the discovery and creating the upload file grouping manifest files.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginComplete(String discoveryId) {
        // Generated convenience method for beginCompleteWithModel
        return client.beginComplete(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of completing the upload and creating the measurements.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginComplete(String uploadId) {
        // Generated convenience method for beginCompleteWithModel
        return client.beginComplete(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of completing the upload and creating the measurements.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginComplete(String uploadId) {
        // Generated convenience method for beginCompleteWithModel
        return client.beginComplete(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of completing the discovery and creating the upload file grouping manifest files.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginComplete(String discoveryId, String operationId) {
        // Generated convenience method for beginCompleteWithModel
        return client.beginComplete(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of completing the discovery and creating the upload file grouping manifest files.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginComplete(String discoveryId, String operationId) {
        // Generated convenience method for beginCompleteWithModel
        return client.beginComplete(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of completing the upload and creating the measurements.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginComplete(String uploadId, String operationId) {
        // Generated convenience method for beginCompleteWithModel
        return client.beginComplete(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of completing the upload and creating the measurements.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginComplete(String uploadId, String operationId) {
        // Generated convenience method for beginCompleteWithModel
        return client.beginComplete(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of completing the discovery and creating the upload file grouping manifest files.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginComplete(String discoveryId) {
        // Generated convenience method for beginCompleteWithModel
        return client.beginComplete(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of completing the discovery and creating the upload file grouping manifest files.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginComplete(String discoveryId) {
        // Generated convenience method for beginCompleteWithModel
        return client.beginComplete(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of completing the upload and creating the measurements.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginComplete(String uploadId) {
        // Generated convenience method for beginCompleteWithModel
        return client.beginComplete(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of completing the upload and creating the measurements.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginComplete(String uploadId) {
        // Generated convenience method for beginCompleteWithModel
        return client.beginComplete(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCancel(String discoveryId, String operationId) {
        // Generated convenience method for beginCancelWithModel
        return client.beginCancel(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCancel(String discoveryId, String operationId) {
        // Generated convenience method for beginCancelWithModel
        return client.beginCancel(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCancel(String uploadId, String operationId) {
        // Generated convenience method for beginCancelWithModel
        return client.beginCancel(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCancel(String uploadId, String operationId) {
        // Generated convenience method for beginCancelWithModel
        return client.beginCancel(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCancel(String discoveryId) {
        // Generated convenience method for beginCancelWithModel
        return client.beginCancel(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCancel(String discoveryId) {
        // Generated convenience method for beginCancelWithModel
        return client.beginCancel(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCancel(String uploadId) {
        // Generated convenience method for beginCancelWithModel
        return client.beginCancel(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCancel(String uploadId) {
        // Generated convenience method for beginCancelWithModel
        return client.beginCancel(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCancel(String discoveryId, String operationId) {
        // Generated convenience method for beginCancelWithModel
        return client.beginCancel(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCancel(String discoveryId, String operationId) {
        // Generated convenience method for beginCancelWithModel
        return client.beginCancel(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCancel(String uploadId, String operationId) {
        // Generated convenience method for beginCancelWithModel
        return client.beginCancel(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCancel(String uploadId, String operationId) {
        // Generated convenience method for beginCancelWithModel
        return client.beginCancel(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCancel(String discoveryId) {
        // Generated convenience method for beginCancelWithModel
        return client.beginCancel(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCancel(String discoveryId) {
        // Generated convenience method for beginCancelWithModel
        return client.beginCancel(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCancel(String uploadId) {
        // Generated convenience method for beginCancelWithModel
        return client.beginCancel(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCancel(String uploadId) {
        // Generated convenience method for beginCancelWithModel
        return client.beginCancel(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * List special files details for the discovery resource. Returns SAS signed URI that allows uploading special files
     * to Azure Storage. This URI expires in 24 hours.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoverySpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoverySpecialFile> listWritableUris(String discoveryId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(discoveryId));
    }

    /**
     * List special files details for the discovery resource. Returns SAS signed URI that allows uploading special files
     * to Azure Storage. This URI expires in 24 hours.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoverySpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoverySpecialFile> listWritableUris(String discoveryId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(discoveryId));
    }

    /**
     * List special files details for the discovery resource. Returns SAS signed URI that allows uploading special files
     * to Azure Storage. This URI expires in 24 hours.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoverySpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoverySpecialFile> listWritableUris(String discoveryId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(discoveryId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading special files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading special files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading special files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading data files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadDataFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadDataFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading data files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadDataFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadDataFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading data files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadDataFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadDataFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the discovery resource. Returns SAS signed URI that allows uploading special files
     * to Azure Storage. This URI expires in 24 hours.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoverySpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoverySpecialFile> listWritableUris(String discoveryId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(discoveryId));
    }

    /**
     * List special files details for the discovery resource. Returns SAS signed URI that allows uploading special files
     * to Azure Storage. This URI expires in 24 hours.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoverySpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoverySpecialFile> listWritableUris(String discoveryId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(discoveryId));
    }

    /**
     * List special files details for the discovery resource. Returns SAS signed URI that allows uploading special files
     * to Azure Storage. This URI expires in 24 hours.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoverySpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoverySpecialFile> listWritableUris(String discoveryId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(discoveryId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading special files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading special files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading special files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading data files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadDataFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadDataFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading data files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadDataFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadDataFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading data files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadDataFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadDataFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the discovery resource. Returns SAS signed URI that allows uploading special files
     * to Azure Storage. This URI expires in 24 hours.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoverySpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoverySpecialFile> listWritableUris(String discoveryId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(discoveryId));
    }

    /**
     * List special files details for the discovery resource. Returns SAS signed URI that allows uploading special files
     * to Azure Storage. This URI expires in 24 hours.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoverySpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoverySpecialFile> listWritableUris(String discoveryId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(discoveryId));
    }

    /**
     * List special files details for the discovery resource. Returns SAS signed URI that allows uploading special files
     * to Azure Storage. This URI expires in 24 hours.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoverySpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoverySpecialFile> listWritableUris(String discoveryId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(discoveryId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading special files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading special files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading special files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading data files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadDataFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadDataFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading data files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadDataFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadDataFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading data files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadDataFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadDataFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List upload detail for the discovery resource.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoveryUpload items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoveryUpload> list(String discoveryId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(discoveryId));
    }

    /**
     * List upload detail for the discovery resource.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoveryUpload items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoveryUpload> list(String discoveryId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(discoveryId));
    }

    /**
     * List upload detail for the discovery resource.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoveryUpload items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoveryUpload> list(String discoveryId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(discoveryId));
    }

    /**
     * Returns SAS signed URIs for reading special files from Azure Storage.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * Returns SAS signed URIs for reading special files from Azure Storage.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * Returns SAS signed URIs for reading special files from Azure Storage.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * List of the measurement identifiers that have been created by the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadResultMeasurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadResultMeasurement> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * List of the measurement identifiers that have been created by the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadResultMeasurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadResultMeasurement> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * List of the measurement identifiers that have been created by the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadResultMeasurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadResultMeasurement> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * List upload detail for the discovery resource.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoveryUpload items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoveryUpload> list(String discoveryId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(discoveryId));
    }

    /**
     * List upload detail for the discovery resource.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoveryUpload items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoveryUpload> list(String discoveryId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(discoveryId));
    }

    /**
     * List upload detail for the discovery resource.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoveryUpload items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoveryUpload> list(String discoveryId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(discoveryId));
    }

    /**
     * Returns SAS signed URIs for reading special files from Azure Storage.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * Returns SAS signed URIs for reading special files from Azure Storage.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * Returns SAS signed URIs for reading special files from Azure Storage.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * List of the measurement identifiers that have been created by the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadResultMeasurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadResultMeasurement> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * List of the measurement identifiers that have been created by the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadResultMeasurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadResultMeasurement> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * List of the measurement identifiers that have been created by the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadResultMeasurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadResultMeasurement> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * List upload detail for the discovery resource.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoveryUpload items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoveryUpload> list(String discoveryId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(discoveryId));
    }

    /**
     * List upload detail for the discovery resource.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoveryUpload items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoveryUpload> list(String discoveryId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(discoveryId));
    }

    /**
     * List upload detail for the discovery resource.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoveryUpload items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoveryUpload> list(String discoveryId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(discoveryId));
    }

    /**
     * Returns SAS signed URIs for reading special files from Azure Storage.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * Returns SAS signed URIs for reading special files from Azure Storage.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * Returns SAS signed URIs for reading special files from Azure Storage.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * List of the measurement identifiers that have been created by the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadResultMeasurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadResultMeasurement> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * List of the measurement identifiers that have been created by the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadResultMeasurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadResultMeasurement> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * List of the measurement identifiers that have been created by the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadResultMeasurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadResultMeasurement> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * Creates a new ingestion upload instance.
     *
     * @param uploadId The upload resource identifier.
     * @param body Parameter of type 'UploadCreationParameters' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Upload createOrReplace(String uploadId, UploadCreationParameters body) {
        // Generated convenience method for createOrReplaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        return createOrReplaceWithResponse(discoveryId, requestOptions).getValue().toObject(Upload.class);
    }

    /**
     * Creates a new ingestion upload instance.
     *
     * @param uploadId The upload resource identifier.
     * @param body Parameter of type 'UploadCreationParameters' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Upload createOrReplace(String uploadId, UploadCreationParameters body) {
        // Generated convenience method for createOrReplaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        return createOrReplaceWithResponse(uploadId, requestOptions).getValue().toObject(Upload.class);
    }

    /**
     * Creates a new ingestion discovery instance.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Discovery createOrReplace(String discoveryId) {
        // Generated convenience method for createOrReplaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceWithResponse(discoveryId, requestOptions).getValue().toObject(Discovery.class);
    }

    /**
     * Creates a new ingestion discovery instance.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Discovery createOrReplace(String discoveryId) {
        // Generated convenience method for createOrReplaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceWithResponse(uploadId, requestOptions).getValue().toObject(Discovery.class);
    }

    /**
     * Creates a new ingestion upload instance.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Upload createOrReplace(String uploadId) {
        // Generated convenience method for createOrReplaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceWithResponse(discoveryId, requestOptions).getValue().toObject(Upload.class);
    }

    /**
     * Creates a new ingestion upload instance.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Upload createOrReplace(String uploadId) {
        // Generated convenience method for createOrReplaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceWithResponse(uploadId, requestOptions).getValue().toObject(Upload.class);
    }

    /**
     * Creates a new ingestion upload instance.
     *
     * @param uploadId The upload resource identifier.
     * @param body Parameter of type 'UploadCreationParameters' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Upload createOrReplace(String uploadId, UploadCreationParameters body) {
        // Generated convenience method for createOrReplaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        return createOrReplaceWithResponse(discoveryId, requestOptions).getValue().toObject(Upload.class);
    }

    /**
     * Creates a new ingestion upload instance.
     *
     * @param uploadId The upload resource identifier.
     * @param body Parameter of type 'UploadCreationParameters' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Upload createOrReplace(String uploadId, UploadCreationParameters body) {
        // Generated convenience method for createOrReplaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        return createOrReplaceWithResponse(uploadId, requestOptions).getValue().toObject(Upload.class);
    }

    /**
     * Creates a new ingestion discovery instance.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Discovery createOrReplace(String discoveryId) {
        // Generated convenience method for createOrReplaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceWithResponse(discoveryId, requestOptions).getValue().toObject(Discovery.class);
    }

    /**
     * Creates a new ingestion discovery instance.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Discovery createOrReplace(String discoveryId) {
        // Generated convenience method for createOrReplaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceWithResponse(uploadId, requestOptions).getValue().toObject(Discovery.class);
    }

    /**
     * Creates a new ingestion upload instance.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Upload createOrReplace(String uploadId) {
        // Generated convenience method for createOrReplaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceWithResponse(discoveryId, requestOptions).getValue().toObject(Upload.class);
    }

    /**
     * Creates a new ingestion upload instance.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Upload createOrReplace(String uploadId) {
        // Generated convenience method for createOrReplaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceWithResponse(uploadId, requestOptions).getValue().toObject(Upload.class);
    }

    /**
     * Get discovery by ID.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discovery by ID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Discovery get(String discoveryId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(discoveryId, requestOptions).getValue().toObject(Discovery.class);
    }

    /**
     * Get discovery by ID.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discovery by ID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Discovery get(String discoveryId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(uploadId, requestOptions).getValue().toObject(Discovery.class);
    }

    /**
     * Get discovery by ID.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discovery by ID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Upload get(String uploadId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(discoveryId, requestOptions).getValue().toObject(Upload.class);
    }

    /**
     * Get discovery by ID.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discovery by ID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Upload get(String uploadId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(uploadId, requestOptions).getValue().toObject(Upload.class);
    }

    /**
     * Get discovery by ID.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discovery by ID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Discovery get(String discoveryId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(discoveryId, requestOptions).getValue().toObject(Discovery.class);
    }

    /**
     * Get discovery by ID.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discovery by ID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Discovery get(String discoveryId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(uploadId, requestOptions).getValue().toObject(Discovery.class);
    }

    /**
     * Get discovery by ID.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discovery by ID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Upload get(String uploadId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(discoveryId, requestOptions).getValue().toObject(Upload.class);
    }

    /**
     * Get discovery by ID.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discovery by ID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Upload get(String uploadId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(uploadId, requestOptions).getValue().toObject(Upload.class);
    }

    /**
     * Initiates the process of completing the discovery and creating the upload file grouping manifest files.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginComplete(String discoveryId, String operationId) {
        // Generated convenience method for beginCompleteWithModel
        return client.beginComplete(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of completing the discovery and creating the upload file grouping manifest files.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginComplete(String discoveryId, String operationId) {
        // Generated convenience method for beginCompleteWithModel
        return client.beginComplete(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of completing the upload and creating the measurements.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginComplete(String uploadId, String operationId) {
        // Generated convenience method for beginCompleteWithModel
        return client.beginComplete(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of completing the upload and creating the measurements.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginComplete(String uploadId, String operationId) {
        // Generated convenience method for beginCompleteWithModel
        return client.beginComplete(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of completing the discovery and creating the upload file grouping manifest files.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginComplete(String discoveryId) {
        // Generated convenience method for beginCompleteWithModel
        return client.beginComplete(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of completing the discovery and creating the upload file grouping manifest files.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginComplete(String discoveryId) {
        // Generated convenience method for beginCompleteWithModel
        return client.beginComplete(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of completing the upload and creating the measurements.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginComplete(String uploadId) {
        // Generated convenience method for beginCompleteWithModel
        return client.beginComplete(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of completing the upload and creating the measurements.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginComplete(String uploadId) {
        // Generated convenience method for beginCompleteWithModel
        return client.beginComplete(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of completing the discovery and creating the upload file grouping manifest files.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginComplete(String discoveryId, String operationId) {
        // Generated convenience method for beginCompleteWithModel
        return client.beginComplete(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of completing the discovery and creating the upload file grouping manifest files.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginComplete(String discoveryId, String operationId) {
        // Generated convenience method for beginCompleteWithModel
        return client.beginComplete(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of completing the upload and creating the measurements.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginComplete(String uploadId, String operationId) {
        // Generated convenience method for beginCompleteWithModel
        return client.beginComplete(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of completing the upload and creating the measurements.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginComplete(String uploadId, String operationId) {
        // Generated convenience method for beginCompleteWithModel
        return client.beginComplete(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of completing the discovery and creating the upload file grouping manifest files.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginComplete(String discoveryId) {
        // Generated convenience method for beginCompleteWithModel
        return client.beginComplete(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of completing the discovery and creating the upload file grouping manifest files.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginComplete(String discoveryId) {
        // Generated convenience method for beginCompleteWithModel
        return client.beginComplete(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of completing the upload and creating the measurements.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginComplete(String uploadId) {
        // Generated convenience method for beginCompleteWithModel
        return client.beginComplete(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of completing the upload and creating the measurements.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginComplete(String uploadId) {
        // Generated convenience method for beginCompleteWithModel
        return client.beginComplete(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCancel(String discoveryId, String operationId) {
        // Generated convenience method for beginCancelWithModel
        return client.beginCancel(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCancel(String discoveryId, String operationId) {
        // Generated convenience method for beginCancelWithModel
        return client.beginCancel(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCancel(String uploadId, String operationId) {
        // Generated convenience method for beginCancelWithModel
        return client.beginCancel(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCancel(String uploadId, String operationId) {
        // Generated convenience method for beginCancelWithModel
        return client.beginCancel(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCancel(String discoveryId) {
        // Generated convenience method for beginCancelWithModel
        return client.beginCancel(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCancel(String discoveryId) {
        // Generated convenience method for beginCancelWithModel
        return client.beginCancel(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCancel(String uploadId) {
        // Generated convenience method for beginCancelWithModel
        return client.beginCancel(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCancel(String uploadId) {
        // Generated convenience method for beginCancelWithModel
        return client.beginCancel(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCancel(String discoveryId, String operationId) {
        // Generated convenience method for beginCancelWithModel
        return client.beginCancel(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCancel(String discoveryId, String operationId) {
        // Generated convenience method for beginCancelWithModel
        return client.beginCancel(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCancel(String uploadId, String operationId) {
        // Generated convenience method for beginCancelWithModel
        return client.beginCancel(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCancel(String uploadId, String operationId) {
        // Generated convenience method for beginCancelWithModel
        return client.beginCancel(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCancel(String discoveryId) {
        // Generated convenience method for beginCancelWithModel
        return client.beginCancel(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCancel(String discoveryId) {
        // Generated convenience method for beginCancelWithModel
        return client.beginCancel(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCancel(String uploadId) {
        // Generated convenience method for beginCancelWithModel
        return client.beginCancel(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCancel(String uploadId) {
        // Generated convenience method for beginCancelWithModel
        return client.beginCancel(uploadId).getSyncPoller();
    }

    /**
     * List upload detail for the discovery resource.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoveryUpload items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoveryUpload> list(String discoveryId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(discoveryId));
    }

    /**
     * List upload detail for the discovery resource.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoveryUpload items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoveryUpload> list(String discoveryId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(discoveryId));
    }

    /**
     * List upload detail for the discovery resource.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoveryUpload items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoveryUpload> list(String discoveryId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(discoveryId));
    }

    /**
     * Returns SAS signed URIs for reading special files from Azure Storage.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * Returns SAS signed URIs for reading special files from Azure Storage.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * Returns SAS signed URIs for reading special files from Azure Storage.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * List of the measurement identifiers that have been created by the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadResultMeasurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadResultMeasurement> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * List of the measurement identifiers that have been created by the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadResultMeasurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadResultMeasurement> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * List of the measurement identifiers that have been created by the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadResultMeasurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadResultMeasurement> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * List upload detail for the discovery resource.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoveryUpload items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoveryUpload> list(String discoveryId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(discoveryId));
    }

    /**
     * List upload detail for the discovery resource.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoveryUpload items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoveryUpload> list(String discoveryId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(discoveryId));
    }

    /**
     * List upload detail for the discovery resource.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoveryUpload items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoveryUpload> list(String discoveryId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(discoveryId));
    }

    /**
     * Returns SAS signed URIs for reading special files from Azure Storage.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * Returns SAS signed URIs for reading special files from Azure Storage.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * Returns SAS signed URIs for reading special files from Azure Storage.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * List of the measurement identifiers that have been created by the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadResultMeasurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadResultMeasurement> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * List of the measurement identifiers that have been created by the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadResultMeasurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadResultMeasurement> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * List of the measurement identifiers that have been created by the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadResultMeasurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadResultMeasurement> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * List upload detail for the discovery resource.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoveryUpload items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoveryUpload> list(String discoveryId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(discoveryId));
    }

    /**
     * List upload detail for the discovery resource.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoveryUpload items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoveryUpload> list(String discoveryId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(discoveryId));
    }

    /**
     * List upload detail for the discovery resource.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoveryUpload items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoveryUpload> list(String discoveryId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(discoveryId));
    }

    /**
     * Returns SAS signed URIs for reading special files from Azure Storage.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * Returns SAS signed URIs for reading special files from Azure Storage.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * Returns SAS signed URIs for reading special files from Azure Storage.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * List of the measurement identifiers that have been created by the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadResultMeasurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadResultMeasurement> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * List of the measurement identifiers that have been created by the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadResultMeasurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadResultMeasurement> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * List of the measurement identifiers that have been created by the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadResultMeasurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadResultMeasurement> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * List special files details for the discovery resource. Returns SAS signed URI that allows uploading special files
     * to Azure Storage. This URI expires in 24 hours.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoverySpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoverySpecialFile> listWritableUris(String discoveryId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(discoveryId));
    }

    /**
     * List special files details for the discovery resource. Returns SAS signed URI that allows uploading special files
     * to Azure Storage. This URI expires in 24 hours.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoverySpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoverySpecialFile> listWritableUris(String discoveryId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(discoveryId));
    }

    /**
     * List special files details for the discovery resource. Returns SAS signed URI that allows uploading special files
     * to Azure Storage. This URI expires in 24 hours.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoverySpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoverySpecialFile> listWritableUris(String discoveryId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(discoveryId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading special files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading special files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading special files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading data files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadDataFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadDataFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading data files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadDataFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadDataFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading data files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadDataFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadDataFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the discovery resource. Returns SAS signed URI that allows uploading special files
     * to Azure Storage. This URI expires in 24 hours.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoverySpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoverySpecialFile> listWritableUris(String discoveryId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(discoveryId));
    }

    /**
     * List special files details for the discovery resource. Returns SAS signed URI that allows uploading special files
     * to Azure Storage. This URI expires in 24 hours.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoverySpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoverySpecialFile> listWritableUris(String discoveryId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(discoveryId));
    }

    /**
     * List special files details for the discovery resource. Returns SAS signed URI that allows uploading special files
     * to Azure Storage. This URI expires in 24 hours.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoverySpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoverySpecialFile> listWritableUris(String discoveryId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(discoveryId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading special files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading special files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading special files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading data files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadDataFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadDataFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading data files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadDataFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadDataFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading data files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadDataFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadDataFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the discovery resource. Returns SAS signed URI that allows uploading special files
     * to Azure Storage. This URI expires in 24 hours.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoverySpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoverySpecialFile> listWritableUris(String discoveryId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(discoveryId));
    }

    /**
     * List special files details for the discovery resource. Returns SAS signed URI that allows uploading special files
     * to Azure Storage. This URI expires in 24 hours.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoverySpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoverySpecialFile> listWritableUris(String discoveryId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(discoveryId));
    }

    /**
     * List special files details for the discovery resource. Returns SAS signed URI that allows uploading special files
     * to Azure Storage. This URI expires in 24 hours.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoverySpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoverySpecialFile> listWritableUris(String discoveryId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(discoveryId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading special files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading special files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading special files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading data files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadDataFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadDataFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading data files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadDataFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadDataFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading data files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadDataFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadDataFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String discoveryId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerate(String uploadId) {
        // Generated convenience method for beginGenerateWithModel
        return client.beginGenerate(uploadId).getSyncPoller();
    }

    /**
     * List special files details for the discovery resource. Returns SAS signed URI that allows uploading special files
     * to Azure Storage. This URI expires in 24 hours.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoverySpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoverySpecialFile> listWritableUris(String discoveryId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(discoveryId));
    }

    /**
     * List special files details for the discovery resource. Returns SAS signed URI that allows uploading special files
     * to Azure Storage. This URI expires in 24 hours.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoverySpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoverySpecialFile> listWritableUris(String discoveryId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(discoveryId));
    }

    /**
     * List special files details for the discovery resource. Returns SAS signed URI that allows uploading special files
     * to Azure Storage. This URI expires in 24 hours.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoverySpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoverySpecialFile> listWritableUris(String discoveryId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(discoveryId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading special files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading special files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading special files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading data files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadDataFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadDataFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading data files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadDataFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadDataFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading data files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadDataFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadDataFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the discovery resource. Returns SAS signed URI that allows uploading special files
     * to Azure Storage. This URI expires in 24 hours.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoverySpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoverySpecialFile> listWritableUris(String discoveryId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(discoveryId));
    }

    /**
     * List special files details for the discovery resource. Returns SAS signed URI that allows uploading special files
     * to Azure Storage. This URI expires in 24 hours.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoverySpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoverySpecialFile> listWritableUris(String discoveryId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(discoveryId));
    }

    /**
     * List special files details for the discovery resource. Returns SAS signed URI that allows uploading special files
     * to Azure Storage. This URI expires in 24 hours.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoverySpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoverySpecialFile> listWritableUris(String discoveryId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(discoveryId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading special files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading special files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading special files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading data files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadDataFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadDataFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading data files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadDataFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadDataFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading data files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadDataFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadDataFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the discovery resource. Returns SAS signed URI that allows uploading special files
     * to Azure Storage. This URI expires in 24 hours.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoverySpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoverySpecialFile> listWritableUris(String discoveryId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(discoveryId));
    }

    /**
     * List special files details for the discovery resource. Returns SAS signed URI that allows uploading special files
     * to Azure Storage. This URI expires in 24 hours.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoverySpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoverySpecialFile> listWritableUris(String discoveryId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(discoveryId));
    }

    /**
     * List special files details for the discovery resource. Returns SAS signed URI that allows uploading special files
     * to Azure Storage. This URI expires in 24 hours.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoverySpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoverySpecialFile> listWritableUris(String discoveryId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(discoveryId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading special files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading special files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading special files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading data files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadDataFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadDataFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading data files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadDataFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadDataFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading data files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadDataFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadDataFile> listWritableUris(String uploadId) {
        // Generated convenience method for listWritableUris
        return new PagedIterable<>(client.listWritableUris(uploadId));
    }

    /**
     * List upload detail for the discovery resource.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoveryUpload items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoveryUpload> list(String discoveryId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(discoveryId));
    }

    /**
     * List upload detail for the discovery resource.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoveryUpload items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoveryUpload> list(String discoveryId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(discoveryId));
    }

    /**
     * List upload detail for the discovery resource.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoveryUpload items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoveryUpload> list(String discoveryId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(discoveryId));
    }

    /**
     * Returns SAS signed URIs for reading special files from Azure Storage.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * Returns SAS signed URIs for reading special files from Azure Storage.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * Returns SAS signed URIs for reading special files from Azure Storage.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * List of the measurement identifiers that have been created by the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadResultMeasurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadResultMeasurement> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * List of the measurement identifiers that have been created by the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadResultMeasurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadResultMeasurement> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * List of the measurement identifiers that have been created by the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadResultMeasurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadResultMeasurement> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * List upload detail for the discovery resource.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoveryUpload items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoveryUpload> list(String discoveryId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(discoveryId));
    }

    /**
     * List upload detail for the discovery resource.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoveryUpload items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoveryUpload> list(String discoveryId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(discoveryId));
    }

    /**
     * List upload detail for the discovery resource.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoveryUpload items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoveryUpload> list(String discoveryId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(discoveryId));
    }

    /**
     * Returns SAS signed URIs for reading special files from Azure Storage.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * Returns SAS signed URIs for reading special files from Azure Storage.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * Returns SAS signed URIs for reading special files from Azure Storage.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * List of the measurement identifiers that have been created by the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadResultMeasurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadResultMeasurement> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * List of the measurement identifiers that have been created by the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadResultMeasurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadResultMeasurement> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * List of the measurement identifiers that have been created by the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadResultMeasurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadResultMeasurement> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * List upload detail for the discovery resource.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoveryUpload items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoveryUpload> list(String discoveryId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(discoveryId));
    }

    /**
     * List upload detail for the discovery resource.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoveryUpload items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoveryUpload> list(String discoveryId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(discoveryId));
    }

    /**
     * List upload detail for the discovery resource.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoveryUpload items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoveryUpload> list(String discoveryId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(discoveryId));
    }

    /**
     * Returns SAS signed URIs for reading special files from Azure Storage.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * Returns SAS signed URIs for reading special files from Azure Storage.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * Returns SAS signed URIs for reading special files from Azure Storage.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * List of the measurement identifiers that have been created by the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadResultMeasurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadResultMeasurement> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * List of the measurement identifiers that have been created by the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadResultMeasurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadResultMeasurement> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }

    /**
     * List of the measurement identifiers that have been created by the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadResultMeasurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadResultMeasurement> list(String uploadId) {
        // Generated convenience method for list
        return new PagedIterable<>(client.list(uploadId));
    }
}
