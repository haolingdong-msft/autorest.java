// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.adp.datamanagement;

import com.adp.datamanagement.models.ClassificationSchema;
import com.adp.datamanagement.models.ClassificationSchemaCreationParameters;
import com.adp.datamanagement.models.DataStream;
import com.adp.datamanagement.models.DataStreamCreationParameters;
import com.adp.datamanagement.models.DataStreamFile;
import com.adp.datamanagement.models.DataStreamLogsContainerBase;
import com.adp.datamanagement.models.DataStreamsGraphListResponse;
import com.adp.datamanagement.models.Discovery;
import com.adp.datamanagement.models.DiscoveryCreationParameters;
import com.adp.datamanagement.models.DiscoverySpecialFile;
import com.adp.datamanagement.models.DiscoveryUpload;
import com.adp.datamanagement.models.FindDataStreamByLineageGraphRequestParameters;
import com.adp.datamanagement.models.FindDataStreamByLineageRequestParameters;
import com.adp.datamanagement.models.FindDataStreamByTagsRequestParameters;
import com.adp.datamanagement.models.LongRunningOperation;
import com.adp.datamanagement.models.Measurement;
import com.adp.datamanagement.models.MeasurementClassification;
import com.adp.datamanagement.models.MeasurementClassificationCreationParameters;
import com.adp.datamanagement.models.MeasurementListRequestParameters;
import com.adp.datamanagement.models.MeasurementMetadataBase;
import com.adp.datamanagement.models.MeasurementMetadataSchemaFileInfoBase;
import com.adp.datamanagement.models.MeasurementProcessingResultsBase;
import com.adp.datamanagement.models.MeasurementWithMetadata;
import com.adp.datamanagement.models.StateMachine;
import com.adp.datamanagement.models.StateMachineAction;
import com.adp.datamanagement.models.Storage;
import com.adp.datamanagement.models.StorageBase;
import com.adp.datamanagement.models.StorageCreationParameters;
import com.adp.datamanagement.models.TagSet;
import com.adp.datamanagement.models.TagSetBase;
import com.adp.datamanagement.models.TagSetCreationParameters;
import com.adp.datamanagement.models.Upload;
import com.adp.datamanagement.models.UploadCreationParameters;
import com.adp.datamanagement.models.UploadDataFile;
import com.adp.datamanagement.models.UploadDerivedDataStreamFilesRequest;
import com.adp.datamanagement.models.UploadDerivedDataStreamFilesResponse;
import com.adp.datamanagement.models.UploadResultMeasurement;
import com.adp.datamanagement.models.UploadSpecialFile;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.polling.SyncPoller;

/** Initializes a new instance of the synchronous DataManagementClient type. */
@ServiceClient(builder = DataManagementClientBuilder.class)
public final class DataManagementClient {
    @Generated private final DataManagementAsyncClient client;

    /**
     * Initializes an instance of DataManagementClient class.
     *
     * @param client the async client.
     */
    @Generated
    DataManagementClient(DataManagementAsyncClient client) {
        this.client = client;
    }

    /**
     * Get the details of an LRO.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String (Required)
     *     status: String(Created/InProgress/Succeeded/Failed/Canceled) (Required)
     *     operationType: String (Optional)
     *     error: ResponseError (Optional)
     *     lastModifiedBy: String (Required)
     *     resultLocation: String (Optional)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param operationId The unique ID of the operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of an LRO along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLongRunningWithResponse(String operationId, RequestOptions requestOptions) {
        return this.client.getLongRunningWithResponse(operationId, requestOptions).block();
    }

    /**
     * Creates a new ingestion discovery instance.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     externalPackageId: String (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     discoveryId: String (Required)
     *     externalPackageId: String (Optional)
     *     manifestUri: String (Optional)
     *     status: String(Created/GeneratingSpecialFilesUploadInfo/GeneratedSpecialFilesUploadInfo/Completing/Completed/Aborting/Aborted/Failed) (Optional)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param discoveryId The discovery identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a discovery resource along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrReplaceDiscoveryWithResponse(
            String discoveryId, RequestOptions requestOptions) {
        return this.client.createOrReplaceDiscoveryWithResponse(discoveryId, requestOptions).block();
    }

    /**
     * Get discovery by ID.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     discoveryId: String (Required)
     *     externalPackageId: String (Optional)
     *     manifestUri: String (Optional)
     *     status: String(Created/GeneratingSpecialFilesUploadInfo/GeneratedSpecialFilesUploadInfo/Completing/Completed/Aborting/Aborted/Failed) (Optional)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param discoveryId The discovery identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return discovery by ID along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDiscoveryWithResponse(String discoveryId, RequestOptions requestOptions) {
        return this.client.getDiscoveryWithResponse(discoveryId, requestOptions).block();
    }

    /**
     * Initiates the process of completing the discovery and creating the upload file grouping manifest files.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param discoveryId The discovery identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginCompleteDiscovery(
            String discoveryId, RequestOptions requestOptions) {
        return this.client.beginCompleteDiscovery(discoveryId, requestOptions).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the discovery.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param discoveryId The discovery identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginCancelDiscovery(String discoveryId, RequestOptions requestOptions) {
        return this.client.beginCancelDiscovery(discoveryId, requestOptions).getSyncPoller();
    }

    /**
     * List special files details for the discovery resource. Returns SAS signed URI that allows uploading special files
     * to Azure Storage. This URI expires in 24 hours.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     clientFileName: String (Required)
     *     fileUri: String (Required)
     * }
     * }</pre>
     *
     * @param discoveryId The discovery identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DiscoverySpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> getDiscoverySpecialFileUploadLocations(
            String discoveryId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.getDiscoverySpecialFileUploadLocations(discoveryId, requestOptions));
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param discoveryId The discovery identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginGenerateDiscoverySpecialFileUploadLocations(
            String discoveryId, RequestOptions requestOptions) {
        return this.client
                .beginGenerateDiscoverySpecialFileUploadLocations(discoveryId, requestOptions)
                .getSyncPoller();
    }

    /**
     * List upload detail for the discovery resource.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     uploadId: String (Required)
     *     manifestUri: String (Required)
     *     resourceEndpoint: String (Optional)
     * }
     * }</pre>
     *
     * @param discoveryId The discovery identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DiscoveryUpload items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> getAllDiscoveryUploads(String discoveryId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.getAllDiscoveryUploads(discoveryId, requestOptions));
    }

    /**
     * Creates a new ingestion upload instance.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     externalPackageId: String (Optional)
     *     discoveryId: String (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     uploadId: String (Required)
     *     externalPackageId: String (Optional)
     *     discoveryId: String (Optional)
     *     manifestUri: String (Optional)
     *     status: String(Created/GeneratingSpecialFilesUploadInfo/GeneratedSpecialFilesUploadInfo/GeneratingDataFilesUploadInfo/GeneratedDataFilesUploadInfo/Completing/Completed/Aborting/Aborted/Failed) (Optional)
     *     resourceEndpoint: String (Optional)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an upload resource along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrReplaceUploadWithResponse(String uploadId, RequestOptions requestOptions) {
        return this.client.createOrReplaceUploadWithResponse(uploadId, requestOptions).block();
    }

    /**
     * Get discovery by ID.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     uploadId: String (Required)
     *     externalPackageId: String (Optional)
     *     discoveryId: String (Optional)
     *     manifestUri: String (Optional)
     *     status: String(Created/GeneratingSpecialFilesUploadInfo/GeneratedSpecialFilesUploadInfo/GeneratingDataFilesUploadInfo/GeneratedDataFilesUploadInfo/Completing/Completed/Aborting/Aborted/Failed) (Optional)
     *     resourceEndpoint: String (Optional)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return discovery by ID along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getUploadWithResponse(String uploadId, RequestOptions requestOptions) {
        return this.client.getUploadWithResponse(uploadId, requestOptions).block();
    }

    /**
     * Initiates the process of completing the upload and creating the measurements.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginCompleteUpload(String uploadId, RequestOptions requestOptions) {
        return this.client.beginCompleteUpload(uploadId, requestOptions).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the upload.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginCancelUpload(String uploadId, RequestOptions requestOptions) {
        return this.client.beginCancelUpload(uploadId, requestOptions).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginGenerateUploadSpecialFiles(
            String uploadId, RequestOptions requestOptions) {
        return this.client.beginGenerateUploadSpecialFiles(uploadId, requestOptions).getSyncPoller();
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading special files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     clientFileName: String (Required)
     *     fileUri: String (Required)
     * }
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> getUploadSpecialFiles(String uploadId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.getUploadSpecialFiles(uploadId, requestOptions));
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginGenerateUploadDataFiles(
            String uploadId, RequestOptions requestOptions) {
        return this.client.beginGenerateUploadDataFiles(uploadId, requestOptions).getSyncPoller();
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading data files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     clientFileName: String (Required)
     *     fileUri: String (Required)
     * }
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of UploadDataFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> getUploadDataFiles(String uploadId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.getUploadDataFiles(uploadId, requestOptions));
    }

    /**
     * List of the measurement identifiers that have been created by the upload.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     measurementId: String (Required)
     * }
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of UploadResultMeasurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listMeasurements(String uploadId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.listMeasurements(uploadId, requestOptions));
    }

    /**
     * Get classification schema by name.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Required)
     *     schemaDefinition: String (Required)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param name Classification schema identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return classification schema by name along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getClassificationSchemaWithResponse(String name, RequestOptions requestOptions) {
        return this.client.getClassificationSchemaWithResponse(name, requestOptions).block();
    }

    /**
     * Creates new classification schema.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     schemaDefinition: String (Required)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of classification schema resource model.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginCreateClassificationSchema(RequestOptions requestOptions) {
        return this.client.beginCreateClassificationSchema(requestOptions).getSyncPoller();
    }

    /**
     * Deletes the classification schema and all related classification assignments (instances).
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String (Required)
     *     status: String(Created/InProgress/Succeeded/Failed/Canceled) (Required)
     *     operationType: String(default) (Optional)
     *     error: ResponseError (Optional)
     *     lastModifiedBy: String (Required)
     *     resultLocation: String (Optional)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param name Classification schema identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, Void> beginDeleteClassificationSchema(String name, RequestOptions requestOptions) {
        return this.client.beginDeleteClassificationSchema(name, requestOptions).getSyncPoller();
    }

    /**
     * List all classification schemas.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Required)
     *     schemaDefinition: String (Required)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of ClassificationSchema items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> getClassificationSchemas(RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.getClassificationSchemas(requestOptions));
    }

    /**
     * Get measurement by ID.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     measurementId: String (Required)
     *     location: String (Required)
     *     ingestTimestampUtc: OffsetDateTime (Optional)
     *     resourceEndpoint: String (Optional)
     *     externalPackageId: String (Optional)
     *     uploadId: String (Optional)
     *     discoveryId: String (Optional)
     *     recordTimestampUtc: OffsetDateTime (Optional)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return measurement by ID along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getMeasurementWithResponse(String measurementId, RequestOptions requestOptions) {
        return this.client.getMeasurementWithResponse(measurementId, requestOptions).block();
    }

    /**
     * Deletes the measurement.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String (Required)
     *     status: String(Created/InProgress/Succeeded/Failed/Canceled) (Required)
     *     operationType: String(default) (Optional)
     *     error: ResponseError (Optional)
     *     lastModifiedBy: String (Required)
     *     resultLocation: String (Optional)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, Void> beginDeleteMeasurement(String measurementId, RequestOptions requestOptions) {
        return this.client.beginDeleteMeasurement(measurementId, requestOptions).getSyncPoller();
    }

    /**
     * Lists the measurements in a workspace.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     measurementId: String (Required)
     *     location: String (Required)
     *     ingestTimestampUtc: OffsetDateTime (Optional)
     *     resourceEndpoint: String (Optional)
     *     externalPackageId: String (Optional)
     *     uploadId: String (Optional)
     *     discoveryId: String (Optional)
     *     recordTimestampUtc: OffsetDateTime (Optional)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Measurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> getMeasurements(RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.getMeasurements(requestOptions));
    }

    /**
     * Lists the measurements in a workspace with extended metadata.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     measurementId: String (Required)
     *     location: String (Required)
     *     ingestTimestampUtc: OffsetDateTime (Optional)
     *     resourceEndpoint: String (Optional)
     *     externalPackageId: String (Optional)
     *     uploadId: String (Optional)
     *     discoveryId: String (Optional)
     *     recordTimestampUtc: OffsetDateTime (Optional)
     *     etag: String (Required)
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of MeasurementWithMetadata items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> getMeasurementsWithMetadata(RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.getMeasurementsWithMetadata(requestOptions));
    }

    /**
     * Lists the measurements in a workspace that are in the given measurement IDs list.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     measurementIds (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     measurementId: String (Required)
     *     location: String (Required)
     *     ingestTimestampUtc: OffsetDateTime (Optional)
     *     resourceEndpoint: String (Optional)
     *     externalPackageId: String (Optional)
     *     uploadId: String (Optional)
     *     discoveryId: String (Optional)
     *     recordTimestampUtc: OffsetDateTime (Optional)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Measurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> getMeasurementsByIds(RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.getMeasurementsByIds(requestOptions));
    }

    /**
     * Returns the measurement metadata.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     metadata (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return measurement metadata without resource identifier along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getMeasurementMetadataWithResponse(
            String measurementId, RequestOptions requestOptions) {
        return this.client.getMeasurementMetadataWithResponse(measurementId, requestOptions).block();
    }

    /**
     * Returns the measurement processing result.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     validationPassed: Boolean (Optional)
     *     results (Optional): [
     *          (Optional){
     *             ruleCategory: String (Optional)
     *             ruleName: String (Optional)
     *             details (Optional): {
     *                 String: String (Optional)
     *             }
     *             validationPassed: Boolean (Optional)
     *             validationError: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return tODO: REMOVE - not in use along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getMeasurementProcessingResultsWithResponse(
            String measurementId, RequestOptions requestOptions) {
        return this.client.getMeasurementProcessingResultsWithResponse(measurementId, requestOptions).block();
    }

    /**
     * Returns the state machine instance for the measurement.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     type: String (Required)
     *     availableActionNames (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param id The state machine identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return state machine along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getMeasurementStateMachineWithResponse(
            String measurementId, String id, RequestOptions requestOptions) {
        return this.client.getMeasurementStateMachineWithResponse(measurementId, id, requestOptions).block();
    }

    /**
     * List state machines instance for the measurement.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     type: String (Required)
     *     availableActionNames (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of StateMachine items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> getMeasurementStateMachines(String measurementId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.getMeasurementStateMachines(measurementId, requestOptions));
    }

    /**
     * Initiates process of applying an action on the measurement.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     actionName: String (Required)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param id The state machine identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of state machine.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginActMeasurementStateMachine(
            String measurementId, String id, RequestOptions requestOptions) {
        return this.client.beginActMeasurementStateMachine(measurementId, id, requestOptions).getSyncPoller();
    }

    /**
     * Returns the measurement metadata schema file information.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     schemaFileName: String (Optional)
     *     schemaFileUri: String (Required)
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return measurement metadata schema file information model along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getMeasurementMetadataSchemaFileInfoWithResponse(
            String measurementId, RequestOptions requestOptions) {
        return this.client.getMeasurementMetadataSchemaFileInfoWithResponse(measurementId, requestOptions).block();
    }

    /**
     * Get measurement classification by schema name.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     schemaName: String (Required)
     *     classificationObject: String (Required)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param schemaName Classification schema name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return measurement classification by schema name along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getMeasurementClassificationWithResponse(
            String measurementId, String schemaName, RequestOptions requestOptions) {
        return this.client.getMeasurementClassificationWithResponse(measurementId, schemaName, requestOptions).block();
    }

    /**
     * Lists the classifications assigned to the measurement.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     schemaName: String (Required)
     *     classificationObject: String (Required)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of MeasurementClassification items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> getMeasurementClassifications(
            String measurementId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.getMeasurementClassifications(measurementId, requestOptions));
    }

    /**
     * Unassign the classification from the measurement.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String (Required)
     *     status: String(Created/InProgress/Succeeded/Failed/Canceled) (Required)
     *     operationType: String(default) (Optional)
     *     error: ResponseError (Optional)
     *     lastModifiedBy: String (Required)
     *     resultLocation: String (Optional)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param schemaName Classification schema name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, Void> beginDeleteMeasurementClassification(
            String measurementId, String schemaName, RequestOptions requestOptions) {
        return this.client
                .beginDeleteMeasurementClassification(measurementId, schemaName, requestOptions)
                .getSyncPoller();
    }

    /**
     * Assigns classification to the measurement.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     schemaName: String (Required)
     *     classificationObject: String (Required)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of measurement classification.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginCreateMeasurementClassification(
            String measurementId, RequestOptions requestOptions) {
        return this.client.beginCreateMeasurementClassification(measurementId, requestOptions).getSyncPoller();
    }

    /**
     * Creates new data-stream resource.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     lineage (Required): {
     *         producerMetadata (Required): {
     *             String: String (Required)
     *         }
     *         inputs (Required): [
     *              (Required){
     *                 sourceDataStreamId: String (Required)
     *                 channels (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginCreateDataStream(
            String measurementId, RequestOptions requestOptions) {
        return this.client.beginCreateDataStream(measurementId, requestOptions).getSyncPoller();
    }

    /**
     * Get data-stream by identifier.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     dataStreamId: String (Required)
     *     resourceEndpoint: String (Optional)
     *     lineage (Required): {
     *         producerMetadata (Required): {
     *             String: String (Required)
     *         }
     *         inputs (Required): [
     *              (Required){
     *                 sourceDataStreamId: String (Required)
     *                 channels (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *         ]
     *     }
     *     status: String(Created/Completing/Completed/Failed/Failing/Clearing/Cleared) (Required)
     *     type: String(System/Raw/Derived) (Required)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return data-stream by identifier along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDataStreamWithResponse(
            String measurementId, String dataStreamId, RequestOptions requestOptions) {
        return this.client.getDataStreamWithResponse(measurementId, dataStreamId, requestOptions).block();
    }

    /**
     * Lists the existing data-streams. Supports the following filter expressions: - filter="type=[System | Raw |
     * Derived]".
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>Filter the result list using the given expression.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     dataStreamId: String (Required)
     *     resourceEndpoint: String (Optional)
     *     lineage (Required): {
     *         producerMetadata (Required): {
     *             String: String (Required)
     *         }
     *         inputs (Required): [
     *              (Required){
     *                 sourceDataStreamId: String (Required)
     *                 channels (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *         ]
     *     }
     *     status: String(Created/Completing/Completed/Failed/Failing/Clearing/Cleared) (Required)
     *     type: String(System/Raw/Derived) (Required)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DataStream items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> getAllDataStream(String measurementId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.getAllDataStream(measurementId, requestOptions));
    }

    /**
     * Clear the data-stream content.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginClearContentOfDataStream(
            String measurementId, String dataStreamId, RequestOptions requestOptions) {
        return this.client.beginClearContentOfDataStream(measurementId, dataStreamId, requestOptions).getSyncPoller();
    }

    /**
     * Returns SAS-signed upload URIs for files that need to be uploaded to Azure Storage. This URI expires in 24 hours.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     files (Required): [
     *          (Required){
     *             clientFileName: String (Required)
     *             recordingTimestampUtc: OffsetDateTime (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     files (Required): [
     *          (Required){
     *             clientFileName: String (Required)
     *             fileUri: String (Required)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return data stream file upload request parameters along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> stageFilesForDataStreamWithResponse(
            String measurementId, String dataStreamId, RequestOptions requestOptions) {
        return this.client.stageFilesForDataStreamWithResponse(measurementId, dataStreamId, requestOptions).block();
    }

    /**
     * Marks a data stream as completed.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginCompleteDataStream(
            String measurementId, String dataStreamId, RequestOptions requestOptions) {
        return this.client.beginCompleteDataStream(measurementId, dataStreamId, requestOptions).getSyncPoller();
    }

    /**
     * Marks a data stream as failed.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginFailDataStream(
            String measurementId, String dataStreamId, RequestOptions requestOptions) {
        return this.client.beginFailDataStream(measurementId, dataStreamId, requestOptions).getSyncPoller();
    }

    /**
     * Lists the data-streams by tags.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     tags (Required): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     dataStreamId: String (Required)
     *     resourceEndpoint: String (Optional)
     *     lineage (Required): {
     *         producerMetadata (Required): {
     *             String: String (Required)
     *         }
     *         inputs (Required): [
     *              (Required){
     *                 sourceDataStreamId: String (Required)
     *                 channels (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *         ]
     *     }
     *     status: String(Created/Completing/Completed/Failed/Failing/Clearing/Cleared) (Required)
     *     type: String(System/Raw/Derived) (Required)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DataStream items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> getDataStreamsByTags(String measurementId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.getDataStreamsByTags(measurementId, requestOptions));
    }

    /**
     * Lists the data-streams by lineage.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     lineage (Required): {
     *         producerMetadata (Required): {
     *             String: String (Required)
     *         }
     *         inputs (Required): [
     *              (Required){
     *                 sourceDataStreamId: String (Required)
     *                 channels (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     dataStreamId: String (Required)
     *     resourceEndpoint: String (Optional)
     *     lineage (Required): {
     *         producerMetadata (Required): {
     *             String: String (Required)
     *         }
     *         inputs (Required): [
     *              (Required){
     *                 sourceDataStreamId: String (Required)
     *                 channels (Optional): [
     *                     String (Optional)
     *                 ]
     *             }
     *         ]
     *     }
     *     status: String(Created/Completing/Completed/Failed/Failing/Clearing/Cleared) (Required)
     *     type: String(System/Raw/Derived) (Required)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DataStream items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> getDataStreamsByLineage(String measurementId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.getDataStreamsByLineage(measurementId, requestOptions));
    }

    /**
     * Lists the data-streams by lineage graph.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     processingObjects (Required): [
     *          (Required){
     *             metadata (Required): {
     *                 String: String (Required)
     *             }
     *             id: String (Required)
     *         }
     *     ]
     *     edges (Required): [
     *          (Required){
     *             sourceId: String (Required)
     *             targetId: String (Required)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     dataStreamsGraphs (Required): [
     *          (Required){
     *             dataStreamByProcessingObjectId (Required): {
     *                 String (Required): {
     *                     dataStreamId: String (Required)
     *                     resourceEndpoint: String (Optional)
     *                     lineage (Required): {
     *                         producerMetadata (Required): {
     *                             String: String (Required)
     *                         }
     *                         inputs (Required): [
     *                              (Required){
     *                                 sourceDataStreamId: String (Required)
     *                                 channels (Optional): [
     *                                     String (Optional)
     *                                 ]
     *                             }
     *                         ]
     *                     }
     *                     status: String(Created/Completing/Completed/Failed/Failing/Clearing/Cleared) (Required)
     *                     type: String(System/Raw/Derived) (Required)
     *                     etag: String (Required)
     *                 }
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DataStreamsGraphListResponse items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> getDataStreamLineageGraphsByLineage(
            String measurementId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.getDataStreamLineageGraphsByLineage(measurementId, requestOptions));
    }

    /**
     * Create or replace storage information of the data-stream. Returns the data-stream storage resource with SAS
     * signed URIs that allow uploading to Azure Storage. The SAS token expires in 24 hours.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     type: String (Required)
     *     rollingInformation (Optional): {
     *         strategy: String(Time/Size) (Required)
     *         unit: String(Seconds/Minutes/kB/MB/GB) (Required)
     *         value: int (Required)
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String(current) (Required)
     *     type: String (Required)
     *     rollingInformation (Optional): {
     *         strategy: String(Time/Size) (Required)
     *         unit: String(Seconds/Minutes/kB/MB/GB) (Required)
     *         value: int (Required)
     *     }
     *     manifestUri: String (Required)
     *     dataFolderUri: String (Optional)
     *     shards (Required): [
     *          (Required){
     *             shardFolderUri: String (Required)
     *             manifestFileUri: String (Required)
     *         }
     *     ]
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a data-stream with non sharded storage resource along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrReplaceDataStreamStorageWithResponse(
            String measurementId, String dataStreamId, RequestOptions requestOptions) {
        return this.client
                .createOrReplaceDataStreamStorageWithResponse(measurementId, dataStreamId, requestOptions)
                .block();
    }

    /**
     * Returns the data-stream storage resource with SAS signed URIs that allow uploading to Azure Storage. The SAS
     * token expires in 24 hours.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     type: String (Required)
     *     rollingInformation (Optional): {
     *         strategy: String(Time/Size) (Required)
     *         unit: String(Seconds/Minutes/kB/MB/GB) (Required)
     *         value: int (Required)
     *     }
     *     manifestUri: String (Required)
     *     dataFolderUri: String (Optional)
     *     shards (Required): [
     *          (Required){
     *             shardFolderUri: String (Required)
     *             manifestFileUri: String (Required)
     *         }
     *     ]
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return common data-stream storage model along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDataStreamStorageWithResponse(
            String measurementId, String dataStreamId, RequestOptions requestOptions) {
        return this.client.getDataStreamStorageWithResponse(measurementId, dataStreamId, requestOptions).block();
    }

    /**
     * Create or replace all tags at once.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     tags (Required): [
     *          (Required){
     *             key: String (Required)
     *             value: String (Required)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     tags (Required): [
     *          (Required){
     *             key: String (Required)
     *             value: String (Required)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return tag set along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createOrReplaceDataStreamTagsWithResponse(
            String measurementId, String dataStreamId, RequestOptions requestOptions) {
        return this.client
                .createOrReplaceDataStreamTagsWithResponse(measurementId, dataStreamId, requestOptions)
                .block();
    }

    /**
     * Returns set of the data-stream tags.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String(current) (Required)
     *     tags (Required): [
     *          (Required){
     *             key: String (Required)
     *             value: String (Required)
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a data-stream tags along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDataStreamTagsWithResponse(
            String measurementId, String dataStreamId, RequestOptions requestOptions) {
        return this.client.getDataStreamTagsWithResponse(measurementId, dataStreamId, requestOptions).block();
    }

    /**
     * Initiates the process of generating SAS signed URIs for accessing the data-stream files.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of data-stream file list.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginGenerateDataStreamFiles(
            String measurementId, String dataStreamId, RequestOptions requestOptions) {
        return this.client.beginGenerateDataStreamFiles(measurementId, dataStreamId, requestOptions).getSyncPoller();
    }

    /**
     * Returns SAS signed URIs for reading special files from Azure Storage.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     clientFileName: String (Required)
     *     fileUri: String (Required)
     *     externalTimeStamp: OffsetDateTime (Required)
     *     size: long (Required)
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of DataStreamFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> getDataStreamFiles(
            String measurementId, String dataStreamId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.client.getDataStreamFiles(measurementId, dataStreamId, requestOptions));
    }

    /**
     * Returns SAS signed URI of the data-stream logs folder that allow uploading log files to Azure Storage. The SAS
     * token expires in 24 hours.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     logFolderUri: String (Required)
     * }
     * }</pre>
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return data-stream logs folder along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getDataStreamLogsContainerLocationWithResponse(
            String measurementId, String dataStreamId, RequestOptions requestOptions) {
        return this.client
                .getDataStreamLogsContainerLocationWithResponse(measurementId, dataStreamId, requestOptions)
                .block();
    }

    /**
     * Get the details of an LRO.
     *
     * @param operationId The unique ID of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of an LRO.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LongRunningOperation getLongRunning(String operationId) {
        // Generated convenience method for getLongRunningWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getLongRunningWithResponse(operationId, requestOptions).getValue().toObject(LongRunningOperation.class);
    }

    /**
     * Creates a new ingestion discovery instance.
     *
     * @param discoveryId The discovery identifier.
     * @param body Parameter of type 'DiscoveryCreationParameters' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Discovery createOrReplaceDiscovery(String discoveryId, DiscoveryCreationParameters body) {
        // Generated convenience method for createOrReplaceDiscoveryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        return createOrReplaceDiscoveryWithResponse(discoveryId, requestOptions).getValue().toObject(Discovery.class);
    }

    /**
     * Creates a new ingestion discovery instance.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Discovery createOrReplaceDiscovery(String discoveryId) {
        // Generated convenience method for createOrReplaceDiscoveryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceDiscoveryWithResponse(discoveryId, requestOptions).getValue().toObject(Discovery.class);
    }

    /**
     * Get discovery by ID.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discovery by ID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Discovery getDiscovery(String discoveryId) {
        // Generated convenience method for getDiscoveryWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDiscoveryWithResponse(discoveryId, requestOptions).getValue().toObject(Discovery.class);
    }

    /**
     * Initiates the process of completing the discovery and creating the upload file grouping manifest files.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCompleteDiscovery(String discoveryId, String operationId) {
        // Generated convenience method for beginCompleteDiscoveryWithModel
        return client.beginCompleteDiscovery(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of completing the discovery and creating the upload file grouping manifest files.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCompleteDiscovery(String discoveryId) {
        // Generated convenience method for beginCompleteDiscoveryWithModel
        return client.beginCompleteDiscovery(discoveryId).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCancelDiscovery(String discoveryId, String operationId) {
        // Generated convenience method for beginCancelDiscoveryWithModel
        return client.beginCancelDiscovery(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCancelDiscovery(String discoveryId) {
        // Generated convenience method for beginCancelDiscoveryWithModel
        return client.beginCancelDiscovery(discoveryId).getSyncPoller();
    }

    /**
     * List special files details for the discovery resource. Returns SAS signed URI that allows uploading special files
     * to Azure Storage. This URI expires in 24 hours.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoverySpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoverySpecialFile> getDiscoverySpecialFileUploadLocations(String discoveryId) {
        // Generated convenience method for getDiscoverySpecialFileUploadLocations
        return new PagedIterable<>(client.getDiscoverySpecialFileUploadLocations(discoveryId));
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerateDiscoverySpecialFileUploadLocations(
            String discoveryId, String operationId) {
        // Generated convenience method for beginGenerateDiscoverySpecialFileUploadLocationsWithModel
        return client.beginGenerateDiscoverySpecialFileUploadLocations(discoveryId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the discovery.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a discovery special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerateDiscoverySpecialFileUploadLocations(
            String discoveryId) {
        // Generated convenience method for beginGenerateDiscoverySpecialFileUploadLocationsWithModel
        return client.beginGenerateDiscoverySpecialFileUploadLocations(discoveryId).getSyncPoller();
    }

    /**
     * List upload detail for the discovery resource.
     *
     * @param discoveryId The discovery identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DiscoveryUpload items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoveryUpload> getAllDiscoveryUploads(String discoveryId) {
        // Generated convenience method for getAllDiscoveryUploads
        return new PagedIterable<>(client.getAllDiscoveryUploads(discoveryId));
    }

    /**
     * Creates a new ingestion upload instance.
     *
     * @param uploadId The upload resource identifier.
     * @param body Parameter of type 'UploadCreationParameters' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Upload createOrReplaceUpload(String uploadId, UploadCreationParameters body) {
        // Generated convenience method for createOrReplaceUploadWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        return createOrReplaceUploadWithResponse(uploadId, requestOptions).getValue().toObject(Upload.class);
    }

    /**
     * Creates a new ingestion upload instance.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Upload createOrReplaceUpload(String uploadId) {
        // Generated convenience method for createOrReplaceUploadWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceUploadWithResponse(uploadId, requestOptions).getValue().toObject(Upload.class);
    }

    /**
     * Get discovery by ID.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discovery by ID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Upload getUpload(String uploadId) {
        // Generated convenience method for getUploadWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getUploadWithResponse(uploadId, requestOptions).getValue().toObject(Upload.class);
    }

    /**
     * Initiates the process of completing the upload and creating the measurements.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCompleteUpload(String uploadId, String operationId) {
        // Generated convenience method for beginCompleteUploadWithModel
        return client.beginCompleteUpload(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of completing the upload and creating the measurements.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCompleteUpload(String uploadId) {
        // Generated convenience method for beginCompleteUploadWithModel
        return client.beginCompleteUpload(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCancelUpload(String uploadId, String operationId) {
        // Generated convenience method for beginCancelUploadWithModel
        return client.beginCancelUpload(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of cancelling the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of an upload resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCancelUpload(String uploadId) {
        // Generated convenience method for beginCancelUploadWithModel
        return client.beginCancelUpload(uploadId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerateUploadSpecialFiles(
            String uploadId, String operationId) {
        // Generated convenience method for beginGenerateUploadSpecialFilesWithModel
        return client.beginGenerateUploadSpecialFiles(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for uploading special files for the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of special file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerateUploadSpecialFiles(String uploadId) {
        // Generated convenience method for beginGenerateUploadSpecialFilesWithModel
        return client.beginGenerateUploadSpecialFiles(uploadId).getSyncPoller();
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading special files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadSpecialFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadSpecialFile> getUploadSpecialFiles(String uploadId) {
        // Generated convenience method for getUploadSpecialFiles
        return new PagedIterable<>(client.getUploadSpecialFiles(uploadId));
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerateUploadDataFiles(String uploadId, String operationId) {
        // Generated convenience method for beginGenerateUploadDataFilesWithModel
        return client.beginGenerateUploadDataFiles(uploadId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of allocating the data files.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data file resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerateUploadDataFiles(String uploadId) {
        // Generated convenience method for beginGenerateUploadDataFilesWithModel
        return client.beginGenerateUploadDataFiles(uploadId).getSyncPoller();
    }

    /**
     * List special files details for the upload resource. Returns SAS signed URI that allows uploading data files to
     * Azure Storage. This URI expires in 24 hours.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadDataFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadDataFile> getUploadDataFiles(String uploadId) {
        // Generated convenience method for getUploadDataFiles
        return new PagedIterable<>(client.getUploadDataFiles(uploadId));
    }

    /**
     * List of the measurement identifiers that have been created by the upload.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of UploadResultMeasurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<UploadResultMeasurement> listMeasurements(String uploadId) {
        // Generated convenience method for listMeasurements
        return new PagedIterable<>(client.listMeasurements(uploadId));
    }

    /**
     * Get classification schema by name.
     *
     * @param name Classification schema identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return classification schema by name.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ClassificationSchema getClassificationSchema(String name) {
        // Generated convenience method for getClassificationSchemaWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getClassificationSchemaWithResponse(name, requestOptions)
                .getValue()
                .toObject(ClassificationSchema.class);
    }

    /**
     * Creates new classification schema.
     *
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @param body Parameter of type 'ClassificationSchemaCreationParameters' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of classification schema resource model.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCreateClassificationSchema(
            String operationId, ClassificationSchemaCreationParameters body) {
        // Generated convenience method for beginCreateClassificationSchemaWithModel
        return client.beginCreateClassificationSchema(operationId, body).getSyncPoller();
    }

    /**
     * Creates new classification schema.
     *
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of classification schema resource model.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCreateClassificationSchema() {
        // Generated convenience method for beginCreateClassificationSchemaWithModel
        return client.beginCreateClassificationSchema().getSyncPoller();
    }

    /**
     * Deletes the classification schema and all related classification assignments (instances).
     *
     * @param name Classification schema identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Void> beginDeleteClassificationSchema(String name, String operationId) {
        // Generated convenience method for beginDeleteClassificationSchemaWithModel
        return client.beginDeleteClassificationSchema(name, operationId).getSyncPoller();
    }

    /**
     * Deletes the classification schema and all related classification assignments (instances).
     *
     * @param name Classification schema identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Void> beginDeleteClassificationSchema(String name) {
        // Generated convenience method for beginDeleteClassificationSchemaWithModel
        return client.beginDeleteClassificationSchema(name).getSyncPoller();
    }

    /**
     * List all classification schemas.
     *
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of ClassificationSchema items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ClassificationSchema> getClassificationSchemas() {
        // Generated convenience method for getClassificationSchemas
        return new PagedIterable<>(client.getClassificationSchemas());
    }

    /**
     * Get measurement by ID.
     *
     * @param measurementId The measurement identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return measurement by ID.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Measurement getMeasurement(String measurementId) {
        // Generated convenience method for getMeasurementWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getMeasurementWithResponse(measurementId, requestOptions).getValue().toObject(Measurement.class);
    }

    /**
     * Deletes the measurement.
     *
     * @param measurementId The measurement identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Void> beginDeleteMeasurement(String measurementId, String operationId) {
        // Generated convenience method for beginDeleteMeasurementWithModel
        return client.beginDeleteMeasurement(measurementId, operationId).getSyncPoller();
    }

    /**
     * Deletes the measurement.
     *
     * @param measurementId The measurement identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Void> beginDeleteMeasurement(String measurementId) {
        // Generated convenience method for beginDeleteMeasurementWithModel
        return client.beginDeleteMeasurement(measurementId).getSyncPoller();
    }

    /**
     * Lists the measurements in a workspace.
     *
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of Measurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Measurement> getMeasurements() {
        // Generated convenience method for getMeasurements
        return new PagedIterable<>(client.getMeasurements());
    }

    /**
     * Lists the measurements in a workspace with extended metadata.
     *
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of MeasurementWithMetadata items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MeasurementWithMetadata> getMeasurementsWithMetadata() {
        // Generated convenience method for getMeasurementsWithMetadata
        return new PagedIterable<>(client.getMeasurementsWithMetadata());
    }

    /**
     * Lists the measurements in a workspace that are in the given measurement IDs list.
     *
     * @param body Parameter of type 'MeasurementListRequestParameters' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of Measurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Measurement> getMeasurementsByIds(MeasurementListRequestParameters body) {
        // Generated convenience method for getMeasurementsByIds
        return new PagedIterable<>(client.getMeasurementsByIds(body));
    }

    /**
     * Lists the measurements in a workspace that are in the given measurement IDs list.
     *
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of Measurement items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<Measurement> getMeasurementsByIds() {
        // Generated convenience method for getMeasurementsByIds
        return new PagedIterable<>(client.getMeasurementsByIds());
    }

    /**
     * Returns the measurement metadata.
     *
     * @param measurementId The measurement identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return measurement metadata without resource identifier.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MeasurementMetadataBase getMeasurementMetadata(String measurementId) {
        // Generated convenience method for getMeasurementMetadataWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getMeasurementMetadataWithResponse(measurementId, requestOptions)
                .getValue()
                .toObject(MeasurementMetadataBase.class);
    }

    /**
     * Returns the measurement processing result.
     *
     * @param measurementId The measurement identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tODO: REMOVE - not in use.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MeasurementProcessingResultsBase getMeasurementProcessingResults(String measurementId) {
        // Generated convenience method for getMeasurementProcessingResultsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getMeasurementProcessingResultsWithResponse(measurementId, requestOptions)
                .getValue()
                .toObject(MeasurementProcessingResultsBase.class);
    }

    /**
     * Returns the state machine instance for the measurement.
     *
     * @param measurementId The measurement identifier.
     * @param id The state machine identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return state machine.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StateMachine getMeasurementStateMachine(String measurementId, String id) {
        // Generated convenience method for getMeasurementStateMachineWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getMeasurementStateMachineWithResponse(measurementId, id, requestOptions)
                .getValue()
                .toObject(StateMachine.class);
    }

    /**
     * List state machines instance for the measurement.
     *
     * @param measurementId The measurement identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of StateMachine items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<StateMachine> getMeasurementStateMachines(String measurementId) {
        // Generated convenience method for getMeasurementStateMachines
        return new PagedIterable<>(client.getMeasurementStateMachines(measurementId));
    }

    /**
     * Initiates process of applying an action on the measurement.
     *
     * @param measurementId The measurement identifier.
     * @param id The state machine identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @param body Parameter of type 'StateMachineAction' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of state machine.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginActMeasurementStateMachine(
            String measurementId, String id, String operationId, StateMachineAction body) {
        // Generated convenience method for beginActMeasurementStateMachineWithModel
        return client.beginActMeasurementStateMachine(measurementId, id, operationId, body).getSyncPoller();
    }

    /**
     * Initiates process of applying an action on the measurement.
     *
     * @param measurementId The measurement identifier.
     * @param id The state machine identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of state machine.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginActMeasurementStateMachine(String measurementId, String id) {
        // Generated convenience method for beginActMeasurementStateMachineWithModel
        return client.beginActMeasurementStateMachine(measurementId, id).getSyncPoller();
    }

    /**
     * Returns the measurement metadata schema file information.
     *
     * @param measurementId The measurement identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return measurement metadata schema file information model.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MeasurementMetadataSchemaFileInfoBase getMeasurementMetadataSchemaFileInfo(String measurementId) {
        // Generated convenience method for getMeasurementMetadataSchemaFileInfoWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getMeasurementMetadataSchemaFileInfoWithResponse(measurementId, requestOptions)
                .getValue()
                .toObject(MeasurementMetadataSchemaFileInfoBase.class);
    }

    /**
     * Get measurement classification by schema name.
     *
     * @param measurementId The measurement identifier.
     * @param schemaName Classification schema name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return measurement classification by schema name.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MeasurementClassification getMeasurementClassification(String measurementId, String schemaName) {
        // Generated convenience method for getMeasurementClassificationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getMeasurementClassificationWithResponse(measurementId, schemaName, requestOptions)
                .getValue()
                .toObject(MeasurementClassification.class);
    }

    /**
     * Lists the classifications assigned to the measurement.
     *
     * @param measurementId The measurement identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of MeasurementClassification items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<MeasurementClassification> getMeasurementClassifications(String measurementId) {
        // Generated convenience method for getMeasurementClassifications
        return new PagedIterable<>(client.getMeasurementClassifications(measurementId));
    }

    /**
     * Unassign the classification from the measurement.
     *
     * @param measurementId The measurement identifier.
     * @param schemaName Classification schema name.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Void> beginDeleteMeasurementClassification(
            String measurementId, String schemaName, String operationId) {
        // Generated convenience method for beginDeleteMeasurementClassificationWithModel
        return client.beginDeleteMeasurementClassification(measurementId, schemaName, operationId).getSyncPoller();
    }

    /**
     * Unassign the classification from the measurement.
     *
     * @param measurementId The measurement identifier.
     * @param schemaName Classification schema name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Void> beginDeleteMeasurementClassification(
            String measurementId, String schemaName) {
        // Generated convenience method for beginDeleteMeasurementClassificationWithModel
        return client.beginDeleteMeasurementClassification(measurementId, schemaName).getSyncPoller();
    }

    /**
     * Assigns classification to the measurement.
     *
     * @param measurementId The measurement identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @param body Parameter of type 'MeasurementClassificationCreationParameters' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of measurement classification.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCreateMeasurementClassification(
            String measurementId, String operationId, MeasurementClassificationCreationParameters body) {
        // Generated convenience method for beginCreateMeasurementClassificationWithModel
        return client.beginCreateMeasurementClassification(measurementId, operationId, body).getSyncPoller();
    }

    /**
     * Assigns classification to the measurement.
     *
     * @param measurementId The measurement identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of measurement classification.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCreateMeasurementClassification(String measurementId) {
        // Generated convenience method for beginCreateMeasurementClassificationWithModel
        return client.beginCreateMeasurementClassification(measurementId).getSyncPoller();
    }

    /**
     * Creates new data-stream resource.
     *
     * @param measurementId The measurement identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @param body Parameter of type 'DataStreamCreationParameters' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCreateDataStream(
            String measurementId, String operationId, DataStreamCreationParameters body) {
        // Generated convenience method for beginCreateDataStreamWithModel
        return client.beginCreateDataStream(measurementId, operationId, body).getSyncPoller();
    }

    /**
     * Creates new data-stream resource.
     *
     * @param measurementId The measurement identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCreateDataStream(String measurementId) {
        // Generated convenience method for beginCreateDataStreamWithModel
        return client.beginCreateDataStream(measurementId).getSyncPoller();
    }

    /**
     * Get data-stream by identifier.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data-stream by identifier.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DataStream getDataStream(String measurementId, String dataStreamId) {
        // Generated convenience method for getDataStreamWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDataStreamWithResponse(measurementId, dataStreamId, requestOptions)
                .getValue()
                .toObject(DataStream.class);
    }

    /**
     * Lists the existing data-streams. Supports the following filter expressions: - filter="type=[System | Raw |
     * Derived]".
     *
     * @param measurementId The measurement identifier.
     * @param filter Filter the result list using the given expression.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DataStream items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DataStream> getAllDataStream(String measurementId, String filter) {
        // Generated convenience method for getAllDataStream
        return new PagedIterable<>(client.getAllDataStream(measurementId, filter));
    }

    /**
     * Lists the existing data-streams. Supports the following filter expressions: - filter="type=[System | Raw |
     * Derived]".
     *
     * @param measurementId The measurement identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DataStream items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DataStream> getAllDataStream(String measurementId) {
        // Generated convenience method for getAllDataStream
        return new PagedIterable<>(client.getAllDataStream(measurementId));
    }

    /**
     * Clear the data-stream content.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginClearContentOfDataStream(
            String measurementId, String dataStreamId, String operationId) {
        // Generated convenience method for beginClearContentOfDataStreamWithModel
        return client.beginClearContentOfDataStream(measurementId, dataStreamId, operationId).getSyncPoller();
    }

    /**
     * Clear the data-stream content.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginClearContentOfDataStream(
            String measurementId, String dataStreamId) {
        // Generated convenience method for beginClearContentOfDataStreamWithModel
        return client.beginClearContentOfDataStream(measurementId, dataStreamId).getSyncPoller();
    }

    /**
     * Returns SAS-signed upload URIs for files that need to be uploaded to Azure Storage. This URI expires in 24 hours.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param body Parameter of type 'UploadDerivedDataStreamFilesRequest' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data stream file upload request parameters.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UploadDerivedDataStreamFilesResponse stageFilesForDataStream(
            String measurementId, String dataStreamId, UploadDerivedDataStreamFilesRequest body) {
        // Generated convenience method for stageFilesForDataStreamWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        return stageFilesForDataStreamWithResponse(measurementId, dataStreamId, requestOptions)
                .getValue()
                .toObject(UploadDerivedDataStreamFilesResponse.class);
    }

    /**
     * Returns SAS-signed upload URIs for files that need to be uploaded to Azure Storage. This URI expires in 24 hours.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data stream file upload request parameters.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UploadDerivedDataStreamFilesResponse stageFilesForDataStream(String measurementId, String dataStreamId) {
        // Generated convenience method for stageFilesForDataStreamWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return stageFilesForDataStreamWithResponse(measurementId, dataStreamId, requestOptions)
                .getValue()
                .toObject(UploadDerivedDataStreamFilesResponse.class);
    }

    /**
     * Marks a data stream as completed.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCompleteDataStream(
            String measurementId, String dataStreamId, String operationId) {
        // Generated convenience method for beginCompleteDataStreamWithModel
        return client.beginCompleteDataStream(measurementId, dataStreamId, operationId).getSyncPoller();
    }

    /**
     * Marks a data stream as completed.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginCompleteDataStream(String measurementId, String dataStreamId) {
        // Generated convenience method for beginCompleteDataStreamWithModel
        return client.beginCompleteDataStream(measurementId, dataStreamId).getSyncPoller();
    }

    /**
     * Marks a data stream as failed.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginFailDataStream(
            String measurementId, String dataStreamId, String operationId) {
        // Generated convenience method for beginFailDataStreamWithModel
        return client.beginFailDataStream(measurementId, dataStreamId, operationId).getSyncPoller();
    }

    /**
     * Marks a data stream as failed.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a data-stream resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginFailDataStream(String measurementId, String dataStreamId) {
        // Generated convenience method for beginFailDataStreamWithModel
        return client.beginFailDataStream(measurementId, dataStreamId).getSyncPoller();
    }

    /**
     * Lists the data-streams by tags.
     *
     * @param measurementId The measurement identifier.
     * @param body Parameter of type 'FindDataStreamByTagsRequestParameters' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DataStream items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DataStream> getDataStreamsByTags(
            String measurementId, FindDataStreamByTagsRequestParameters body) {
        // Generated convenience method for getDataStreamsByTags
        return new PagedIterable<>(client.getDataStreamsByTags(measurementId, body));
    }

    /**
     * Lists the data-streams by tags.
     *
     * @param measurementId The measurement identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DataStream items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DataStream> getDataStreamsByTags(String measurementId) {
        // Generated convenience method for getDataStreamsByTags
        return new PagedIterable<>(client.getDataStreamsByTags(measurementId));
    }

    /**
     * Lists the data-streams by lineage.
     *
     * @param measurementId The measurement identifier.
     * @param body Parameter of type 'FindDataStreamByLineageRequestParameters' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DataStream items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DataStream> getDataStreamsByLineage(
            String measurementId, FindDataStreamByLineageRequestParameters body) {
        // Generated convenience method for getDataStreamsByLineage
        return new PagedIterable<>(client.getDataStreamsByLineage(measurementId, body));
    }

    /**
     * Lists the data-streams by lineage.
     *
     * @param measurementId The measurement identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DataStream items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DataStream> getDataStreamsByLineage(String measurementId) {
        // Generated convenience method for getDataStreamsByLineage
        return new PagedIterable<>(client.getDataStreamsByLineage(measurementId));
    }

    /**
     * Lists the data-streams by lineage graph.
     *
     * @param measurementId The measurement identifier.
     * @param body Parameter of type 'FindDataStreamByLineageGraphRequestParameters' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DataStreamsGraphListResponse items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DataStreamsGraphListResponse> getDataStreamLineageGraphsByLineage(
            String measurementId, FindDataStreamByLineageGraphRequestParameters body) {
        // Generated convenience method for getDataStreamLineageGraphsByLineage
        return new PagedIterable<>(client.getDataStreamLineageGraphsByLineage(measurementId, body));
    }

    /**
     * Lists the data-streams by lineage graph.
     *
     * @param measurementId The measurement identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DataStreamsGraphListResponse items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DataStreamsGraphListResponse> getDataStreamLineageGraphsByLineage(String measurementId) {
        // Generated convenience method for getDataStreamLineageGraphsByLineage
        return new PagedIterable<>(client.getDataStreamLineageGraphsByLineage(measurementId));
    }

    /**
     * Create or replace storage information of the data-stream. Returns the data-stream storage resource with SAS
     * signed URIs that allow uploading to Azure Storage. The SAS token expires in 24 hours.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param body Parameter of type 'StorageCreationParameters' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a data-stream with non sharded storage resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Storage createOrReplaceDataStreamStorage(
            String measurementId, String dataStreamId, StorageCreationParameters body) {
        // Generated convenience method for createOrReplaceDataStreamStorageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        return createOrReplaceDataStreamStorageWithResponse(measurementId, dataStreamId, requestOptions)
                .getValue()
                .toObject(Storage.class);
    }

    /**
     * Create or replace storage information of the data-stream. Returns the data-stream storage resource with SAS
     * signed URIs that allow uploading to Azure Storage. The SAS token expires in 24 hours.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a data-stream with non sharded storage resource.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Storage createOrReplaceDataStreamStorage(String measurementId, String dataStreamId) {
        // Generated convenience method for createOrReplaceDataStreamStorageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceDataStreamStorageWithResponse(measurementId, dataStreamId, requestOptions)
                .getValue()
                .toObject(Storage.class);
    }

    /**
     * Returns the data-stream storage resource with SAS signed URIs that allow uploading to Azure Storage. The SAS
     * token expires in 24 hours.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return common data-stream storage model.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StorageBase getDataStreamStorage(String measurementId, String dataStreamId) {
        // Generated convenience method for getDataStreamStorageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDataStreamStorageWithResponse(measurementId, dataStreamId, requestOptions)
                .getValue()
                .toObject(StorageBase.class);
    }

    /**
     * Create or replace all tags at once.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param body Parameter of type 'TagSetCreationParameters' in the body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tag set.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TagSetBase createOrReplaceDataStreamTags(
            String measurementId, String dataStreamId, TagSetCreationParameters body) {
        // Generated convenience method for createOrReplaceDataStreamTagsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        return createOrReplaceDataStreamTagsWithResponse(measurementId, dataStreamId, requestOptions)
                .getValue()
                .toObject(TagSetBase.class);
    }

    /**
     * Create or replace all tags at once.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tag set.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TagSetBase createOrReplaceDataStreamTags(String measurementId, String dataStreamId) {
        // Generated convenience method for createOrReplaceDataStreamTagsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceDataStreamTagsWithResponse(measurementId, dataStreamId, requestOptions)
                .getValue()
                .toObject(TagSetBase.class);
    }

    /**
     * Returns set of the data-stream tags.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a data-stream tags.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TagSet getDataStreamTags(String measurementId, String dataStreamId) {
        // Generated convenience method for getDataStreamTagsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDataStreamTagsWithResponse(measurementId, dataStreamId, requestOptions)
                .getValue()
                .toObject(TagSet.class);
    }

    /**
     * Initiates the process of generating SAS signed URIs for accessing the data-stream files.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @param operationId The long running operation identifier. Operation-Id should be valid UUID string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data-stream file list.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerateDataStreamFiles(
            String measurementId, String dataStreamId, String operationId) {
        // Generated convenience method for beginGenerateDataStreamFilesWithModel
        return client.beginGenerateDataStreamFiles(measurementId, dataStreamId, operationId).getSyncPoller();
    }

    /**
     * Initiates the process of generating SAS signed URIs for accessing the data-stream files.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of data-stream file list.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<LongRunningOperation, Object> beginGenerateDataStreamFiles(
            String measurementId, String dataStreamId) {
        // Generated convenience method for beginGenerateDataStreamFilesWithModel
        return client.beginGenerateDataStreamFiles(measurementId, dataStreamId).getSyncPoller();
    }

    /**
     * Returns SAS signed URIs for reading special files from Azure Storage.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of DataStreamFile items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DataStreamFile> getDataStreamFiles(String measurementId, String dataStreamId) {
        // Generated convenience method for getDataStreamFiles
        return new PagedIterable<>(client.getDataStreamFiles(measurementId, dataStreamId));
    }

    /**
     * Returns SAS signed URI of the data-stream logs folder that allow uploading log files to Azure Storage. The SAS
     * token expires in 24 hours.
     *
     * @param measurementId The measurement identifier.
     * @param dataStreamId The data stream identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data-stream logs folder.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DataStreamLogsContainerBase getDataStreamLogsContainerLocation(String measurementId, String dataStreamId) {
        // Generated convenience method for getDataStreamLogsContainerLocationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getDataStreamLogsContainerLocationWithResponse(measurementId, dataStreamId, requestOptions)
                .getValue()
                .toObject(DataStreamLogsContainerBase.class);
    }
}
