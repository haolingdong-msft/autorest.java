// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.adp.datamanagement;

import com.adp.datamanagement.implementation.LongRunningOperationsClientImpl;
import com.adp.datamanagement.models.LongRunningOperation;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous LongRunningOperationsClient type. */
@ServiceClient(builder = LongRunningOperationsClientBuilder.class, isAsync = true)
public final class LongRunningOperationsAsyncClient {

    @Generated private final LongRunningOperationsClientImpl serviceClient;

    /**
     * Initializes an instance of LongRunningOperationsAsyncClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    LongRunningOperationsAsyncClient(LongRunningOperationsClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Get the details of an LRO.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String (Required)
     *     status: String(Created/InProgress/Succeeded/Failed/Canceled) (Required)
     *     operationType: String (Optional)
     *     error: ResponseError (Optional)
     *     resultUri: String (Optional)
     *     etag: String (Required)
     * }
     * }</pre>
     *
     * @param operationId The unique ID of the operation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the details of an LRO along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getStatusWithResponse(String operationId, RequestOptions requestOptions) {
        return this.serviceClient.getStatusWithResponseAsync(operationId, requestOptions);
    }

    /**
     * Get the details of an LRO.
     *
     * @param operationId The unique ID of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of an LRO on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LongRunningOperation> getStatus(String operationId) {
        // Generated convenience method for getStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getStatusWithResponse(operationId, requestOptions)
                .flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(LongRunningOperation.class));
    }
}
