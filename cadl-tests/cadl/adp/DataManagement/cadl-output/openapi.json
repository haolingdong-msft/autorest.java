{
  "swagger": "2.0",
  "info": {
    "title": "Adp",
    "version": "2022-11-30-preview",
    "x-cadl-generated": [
      {
        "emitter": "@azure-tools/cadl-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "OAuth2Auth": [
        "https://adp.azure.com/.default"
      ]
    }
  ],
  "securityDefinitions": {
    "OAuth2Auth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "https://adp.azure.com/.default": ""
      }
    }
  },
  "tags": [
    {
      "name": "Long Running Operation"
    },
    {
      "name": "Discovery"
    },
    {
      "name": "Upload"
    },
    {
      "name": "Classification Schema"
    },
    {
      "name": "Measurement Classification"
    },
    {
      "name": "Measurement"
    },
    {
      "name": "Data Stream Classification"
    },
    {
      "name": "Data Stream"
    }
  ],
  "paths": {
    "/classificationSchemas": {
      "post": {
        "tags": [
          "Classification Schema"
        ],
        "operationId": "ClassificationSchemaOperations_Create",
        "description": "Creates new classification schema.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Adp.LongRunningOperationIdHeader"
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "description": "Parameter of type 'ClassificationSchemaCreationParameters' in the body.",
            "schema": {
              "$ref": "#/definitions/ClassificationSchema.ClassificationSchemaCreationParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ClassificationSchema.ClassificationSchema"
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "description": "The location of an instance of LongRunningOperation",
                "type": "string",
                "format": "uri"
              }
            },
            "schema": {
              "$ref": "#/definitions/DefaultLroResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "Error code for specific error that occurred.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "tags": [
          "Classification Schema"
        ],
        "operationId": "ClassificationSchemaOperations_GetAll",
        "description": "List all classification schemas.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedClassificationSchema"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/classificationSchemas/{name}": {
      "get": {
        "tags": [
          "Classification Schema"
        ],
        "operationId": "ClassificationSchemaOperations_Get",
        "description": "Get classification schema by name.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Classification schema identifier.",
            "minLength": 1,
            "maxLength": 256,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ClassificationSchema.ClassificationSchema"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Classification Schema"
        ],
        "operationId": "ClassificationSchemaOperations_Delete",
        "description": "Deletes the classification schema and all related classification assignments (instances).",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Classification schema identifier.",
            "minLength": 1,
            "maxLength": 256,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Adp.LongRunningOperationIdHeader"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "description": "The location of an instance of LongRunningOperation",
                "type": "string",
                "format": "uri"
              }
            },
            "schema": {
              "$ref": "#/definitions/DefaultLroResponse"
            }
          },
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "Error code for specific error that occurred.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/discoveries/{discoveryId}": {
      "put": {
        "tags": [
          "Discovery"
        ],
        "operationId": "DiscoveryOperations_CreateOrReplace",
        "description": "Creates a new ingestion discovery instance.",
        "parameters": [
          {
            "name": "discoveryId",
            "in": "path",
            "required": true,
            "description": "The discovery identifier.",
            "minLength": 1,
            "maxLength": 36,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "description": "Parameter of type 'DiscoveryCreationParameters' in the body.",
            "schema": {
              "$ref": "#/definitions/Ingestion.Discovery.DiscoveryCreationParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Ingestion.Discovery.Discovery"
            }
          },
          "201": {
            "description": "A Discovery resource was successfully created.",
            "schema": {
              "$ref": "#/definitions/Ingestion.Discovery.Discovery"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Discovery"
        ],
        "operationId": "DiscoveryOperations_Get",
        "description": "Get discovery by ID.",
        "parameters": [
          {
            "name": "discoveryId",
            "in": "path",
            "required": true,
            "description": "The discovery identifier.",
            "minLength": 1,
            "maxLength": 36,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Ingestion.Discovery.Discovery"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      }
    },
    "/discoveries/{discoveryId}:complete": {
      "post": {
        "tags": [
          "Discovery"
        ],
        "operationId": "DiscoveryOperations_Complete",
        "description": "Initiates the process of completing the discovery and creating the upload file grouping manifest files.",
        "parameters": [
          {
            "name": "discoveryId",
            "in": "path",
            "required": true,
            "description": "The discovery identifier.",
            "minLength": 1,
            "maxLength": 36,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Adp.LongRunningOperationIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Ingestion.Discovery.Discovery"
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "description": "The location of an instance of LongRunningOperation",
                "type": "string",
                "format": "uri"
              }
            },
            "schema": {
              "$ref": "#/definitions/Ingestion.Discovery.DiscoveryLroResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "Error code for specific error that occurred.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/discoveries/{discoveryId}:cancel": {
      "post": {
        "tags": [
          "Discovery"
        ],
        "operationId": "DiscoveryOperations_Cancel",
        "description": "Initiates the process of cancelling the discovery.",
        "parameters": [
          {
            "name": "discoveryId",
            "in": "path",
            "required": true,
            "description": "The discovery identifier.",
            "minLength": 1,
            "maxLength": 36,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Adp.LongRunningOperationIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Ingestion.Discovery.Discovery"
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "description": "The location of an instance of LongRunningOperation",
                "type": "string",
                "format": "uri"
              }
            },
            "schema": {
              "$ref": "#/definitions/Ingestion.Discovery.DiscoveryLroResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "Error code for specific error that occurred.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/discoveries/{discoveryId}/specialFilesUploadInfo:generate": {
      "post": {
        "tags": [
          "Discovery"
        ],
        "operationId": "DiscoverySpecialFileOperations_Generate",
        "description": "Initiates the process of generating SAS signed URIs for uploading special files for the discovery.",
        "parameters": [
          {
            "name": "discoveryId",
            "in": "path",
            "required": true,
            "description": "The discovery identifier.",
            "minLength": 1,
            "maxLength": 36,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Adp.LongRunningOperationIdHeader"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Ingestion.Discovery.DiscoverySpecialFile"
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "description": "The location of an instance of LongRunningOperation",
                "type": "string",
                "format": "uri"
              }
            },
            "schema": {
              "$ref": "#/definitions/Ingestion.Discovery.DiscoveryLroResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/discoveries/{discoveryId}/specialFilesUploadInfo:listWritableUris": {
      "post": {
        "tags": [
          "Discovery"
        ],
        "operationId": "DiscoverySpecialFileOperations_ListWritableUris",
        "description": "List special files details for the discovery resource.\nReturns SAS signed URI that allows uploading special files to Azure Storage.\nThis URI expires in 24 hours.",
        "parameters": [
          {
            "name": "discoveryId",
            "in": "path",
            "required": true,
            "description": "The discovery identifier.",
            "minLength": 1,
            "maxLength": 36,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedDiscoverySpecialFile"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/discoveries/{discoveryId}/uploads": {
      "get": {
        "tags": [
          "Discovery"
        ],
        "operationId": "DiscoveryResultUploadOperations_List",
        "description": "List upload detail for the discovery resource.",
        "parameters": [
          {
            "name": "discoveryId",
            "in": "path",
            "required": true,
            "description": "The discovery identifier.",
            "minLength": 1,
            "maxLength": 36,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedDiscoveryUpload"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/measurements": {
      "get": {
        "tags": [
          "Measurement"
        ],
        "operationId": "MeasurementOperations_GetAll",
        "description": "Lists the measurements in a workspace.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedMeasurement"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/measurements/{measurementId}": {
      "get": {
        "tags": [
          "Measurement"
        ],
        "operationId": "MeasurementOperations_Get",
        "description": "Get measurement by ID.",
        "parameters": [
          {
            "name": "measurementId",
            "in": "path",
            "required": true,
            "description": "The measurement identifier.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Measurement.Measurement"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Measurement"
        ],
        "operationId": "MeasurementOperations_Delete",
        "description": "Deletes the measurement.",
        "parameters": [
          {
            "name": "measurementId",
            "in": "path",
            "required": true,
            "description": "The measurement identifier.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Adp.LongRunningOperationIdHeader"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "description": "The location of an instance of LongRunningOperation",
                "type": "string",
                "format": "uri"
              }
            },
            "schema": {
              "$ref": "#/definitions/DefaultLroResponse"
            }
          },
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "Error code for specific error that occurred.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/measurements/{measurementId}/classifications": {
      "post": {
        "tags": [
          "Measurement Classification"
        ],
        "operationId": "MeasurementClassificationOperations_Create",
        "description": "Assigns classification to the measurement.",
        "parameters": [
          {
            "name": "measurementId",
            "in": "path",
            "required": true,
            "description": "The measurement identifier.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Adp.LongRunningOperationIdHeader"
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "description": "Parameter of type 'MeasurementClassificationCreationParameters' in the body.",
            "schema": {
              "$ref": "#/definitions/Measurement.Classification.MeasurementClassificationCreationParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Measurement.Classification.MeasurementClassification"
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "description": "The location of an instance of LongRunningOperation",
                "type": "string",
                "format": "uri"
              }
            },
            "schema": {
              "$ref": "#/definitions/DefaultLroResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "Error code for specific error that occurred.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "tags": [
          "Measurement Classification"
        ],
        "operationId": "MeasurementClassificationOperations_GetAll",
        "description": "Lists the classifications assigned to the measurement.",
        "parameters": [
          {
            "name": "measurementId",
            "in": "path",
            "required": true,
            "description": "The measurement identifier.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedMeasurementClassification"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/measurements/{measurementId}/classifications/{schemaName}": {
      "get": {
        "tags": [
          "Measurement Classification"
        ],
        "operationId": "MeasurementClassificationOperations_Get",
        "description": "Get measurement classification by schema name.",
        "parameters": [
          {
            "name": "measurementId",
            "in": "path",
            "required": true,
            "description": "The measurement identifier.",
            "type": "string"
          },
          {
            "name": "schemaName",
            "in": "path",
            "required": true,
            "description": "Classification schema name.",
            "minLength": 1,
            "maxLength": 256,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Measurement.Classification.MeasurementClassification"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Measurement Classification"
        ],
        "operationId": "MeasurementClassificationOperations_Delete",
        "description": "Unassign the classification from the measurement.",
        "parameters": [
          {
            "name": "measurementId",
            "in": "path",
            "required": true,
            "description": "The measurement identifier.",
            "type": "string"
          },
          {
            "name": "schemaName",
            "in": "path",
            "required": true,
            "description": "Classification schema name.",
            "minLength": 1,
            "maxLength": 256,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Adp.LongRunningOperationIdHeader"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "description": "The location of an instance of LongRunningOperation",
                "type": "string",
                "format": "uri"
              }
            },
            "schema": {
              "$ref": "#/definitions/DefaultLroResponse"
            }
          },
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "Error code for specific error that occurred.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/measurements/{measurementId}/dataStreams": {
      "post": {
        "tags": [
          "Data Stream"
        ],
        "operationId": "DataStreamOperations_Create",
        "description": "Creates new data-stream resource.",
        "parameters": [
          {
            "name": "measurementId",
            "in": "path",
            "required": true,
            "description": "The measurement identifier.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Adp.LongRunningOperationIdHeader"
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "description": "Parameter of type 'DataStreamCreationParameters' in the body.",
            "schema": {
              "$ref": "#/definitions/DataStream.DataStreamCreationParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DataStream.DataStream"
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "description": "The location of an instance of LongRunningOperation",
                "type": "string",
                "format": "uri"
              }
            },
            "schema": {
              "$ref": "#/definitions/DefaultLroResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "Error code for specific error that occurred.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "tags": [
          "Data Stream"
        ],
        "operationId": "DataStreamOperations_GetAll",
        "description": "Lists the existing data-streams.\nSupports the following filter expressions:\n- filter=\"type=[System | Raw | Derived]\"",
        "parameters": [
          {
            "name": "measurementId",
            "in": "path",
            "required": true,
            "description": "The measurement identifier.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.FilterQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedDataStream"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/measurements/{measurementId}/dataStreams/{dataStreamId}": {
      "get": {
        "tags": [
          "Data Stream"
        ],
        "operationId": "DataStreamOperations_Get",
        "description": "Get data-stream by identifier.",
        "parameters": [
          {
            "name": "measurementId",
            "in": "path",
            "required": true,
            "description": "The measurement identifier.",
            "type": "string"
          },
          {
            "name": "dataStreamId",
            "in": "path",
            "required": true,
            "description": "The data stream identifier",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DataStream.DataStream"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      }
    },
    "/measurements/{measurementId}/dataStreams/{dataStreamId}:clearContent": {
      "post": {
        "tags": [
          "Data Stream"
        ],
        "operationId": "DataStreamOperations_ClearContent",
        "description": "Clear the data-stream content.",
        "parameters": [
          {
            "name": "measurementId",
            "in": "path",
            "required": true,
            "description": "The measurement identifier.",
            "type": "string"
          },
          {
            "name": "dataStreamId",
            "in": "path",
            "required": true,
            "description": "The data stream identifier",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Adp.LongRunningOperationIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DataStream.DataStream"
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "description": "The location of an instance of LongRunningOperation",
                "type": "string",
                "format": "uri"
              }
            },
            "schema": {
              "$ref": "#/definitions/DefaultLroResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "Error code for specific error that occurred.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/measurements/{measurementId}/dataStreams/{dataStreamId}:stageFiles": {
      "post": {
        "tags": [
          "Data Stream"
        ],
        "operationId": "DataStreamOperations_StageFiles",
        "description": "Returns SAS-signed upload URIs for files that need to be uploaded to Azure Storage.\nThis URI expires in 24 hours.",
        "parameters": [
          {
            "name": "measurementId",
            "in": "path",
            "required": true,
            "description": "The measurement identifier.",
            "type": "string"
          },
          {
            "name": "dataStreamId",
            "in": "path",
            "required": true,
            "description": "The data stream identifier",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "description": "Parameter of type 'UploadDerivedDataStreamFilesRequest' in the body.",
            "schema": {
              "$ref": "#/definitions/DataStream.UploadDerivedDataStreamFilesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DataStream.UploadDerivedDataStreamFilesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      }
    },
    "/measurements/{measurementId}/dataStreams/{dataStreamId}:complete": {
      "post": {
        "tags": [
          "Data Stream"
        ],
        "operationId": "DataStreamOperations_Complete",
        "description": "Marks a data stream as completed",
        "parameters": [
          {
            "name": "measurementId",
            "in": "path",
            "required": true,
            "description": "The measurement identifier.",
            "type": "string"
          },
          {
            "name": "dataStreamId",
            "in": "path",
            "required": true,
            "description": "The data stream identifier",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Adp.LongRunningOperationIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DataStream.DataStream"
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "description": "The location of an instance of LongRunningOperation",
                "type": "string",
                "format": "uri"
              }
            },
            "schema": {
              "$ref": "#/definitions/DefaultLroResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "Error code for specific error that occurred.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/measurements/{measurementId}/dataStreams/{dataStreamId}:fail": {
      "post": {
        "tags": [
          "Data Stream"
        ],
        "operationId": "DataStreamOperations_Fail",
        "description": "Marks a data stream as failed",
        "parameters": [
          {
            "name": "measurementId",
            "in": "path",
            "required": true,
            "description": "The measurement identifier.",
            "type": "string"
          },
          {
            "name": "dataStreamId",
            "in": "path",
            "required": true,
            "description": "The data stream identifier",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Adp.LongRunningOperationIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DataStream.DataStream"
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "description": "The location of an instance of LongRunningOperation",
                "type": "string",
                "format": "uri"
              }
            },
            "schema": {
              "$ref": "#/definitions/DefaultLroResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "Error code for specific error that occurred.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/measurements/{measurementId}/dataStreams/{dataStreamId}/classifications": {
      "post": {
        "tags": [
          "Data Stream Classification"
        ],
        "operationId": "DataStreamClassificationOperations_Create",
        "description": "Assigns the classification to the data-stream.",
        "parameters": [
          {
            "name": "measurementId",
            "in": "path",
            "required": true,
            "description": "The measurement identifier.",
            "type": "string"
          },
          {
            "name": "dataStreamId",
            "in": "path",
            "required": true,
            "description": "The data stream identifier",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Adp.LongRunningOperationIdHeader"
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "description": "Parameter of type 'DataStreamClassificationCreationParameters' in the body.",
            "schema": {
              "$ref": "#/definitions/DataStream.Classification.DataStreamClassificationCreationParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DataStream.Classification.DataStreamClassification"
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "description": "The location of an instance of LongRunningOperation",
                "type": "string",
                "format": "uri"
              }
            },
            "schema": {
              "$ref": "#/definitions/DefaultLroResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "Error code for specific error that occurred.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "tags": [
          "Data Stream Classification"
        ],
        "operationId": "DataStreamClassificationOperations_GetAll",
        "description": "Lists the classifications assigned to the data-stream.",
        "parameters": [
          {
            "name": "measurementId",
            "in": "path",
            "required": true,
            "description": "The measurement identifier.",
            "type": "string"
          },
          {
            "name": "dataStreamId",
            "in": "path",
            "required": true,
            "description": "The data stream identifier",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedDataStreamClassification"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/measurements/{measurementId}/dataStreams/{dataStreamId}/classifications/{schemaName}": {
      "get": {
        "tags": [
          "Data Stream Classification"
        ],
        "operationId": "DataStreamClassificationOperations_Get",
        "description": "Get classification by schema name.",
        "parameters": [
          {
            "name": "measurementId",
            "in": "path",
            "required": true,
            "description": "The measurement identifier.",
            "type": "string"
          },
          {
            "name": "dataStreamId",
            "in": "path",
            "required": true,
            "description": "The data stream identifier",
            "type": "string"
          },
          {
            "name": "schemaName",
            "in": "path",
            "required": true,
            "description": "Classification schema name.",
            "minLength": 1,
            "maxLength": 256,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DataStream.Classification.DataStreamClassification"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Data Stream Classification"
        ],
        "operationId": "DataStreamClassificationOperations_Delete",
        "description": "Unassign the classification from the data-stream.",
        "parameters": [
          {
            "name": "measurementId",
            "in": "path",
            "required": true,
            "description": "The measurement identifier.",
            "type": "string"
          },
          {
            "name": "dataStreamId",
            "in": "path",
            "required": true,
            "description": "The data stream identifier",
            "type": "string"
          },
          {
            "name": "schemaName",
            "in": "path",
            "required": true,
            "description": "Classification schema name.",
            "minLength": 1,
            "maxLength": 256,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Adp.LongRunningOperationIdHeader"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "description": "The location of an instance of LongRunningOperation",
                "type": "string",
                "format": "uri"
              }
            },
            "schema": {
              "$ref": "#/definitions/DefaultLroResponse"
            }
          },
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "Error code for specific error that occurred.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/measurements/{measurementId}/dataStreams/{dataStreamId}/files": {
      "get": {
        "tags": [
          "Data Stream"
        ],
        "operationId": "DataStreamFileOperations_GetAll",
        "description": "Returns SAS signed URIs for reading special files from Azure Storage.",
        "parameters": [
          {
            "name": "measurementId",
            "in": "path",
            "required": true,
            "description": "The measurement identifier.",
            "type": "string"
          },
          {
            "name": "dataStreamId",
            "in": "path",
            "required": true,
            "description": "The data stream identifier",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedDataStreamFile"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/measurements/{measurementId}/dataStreams/{dataStreamId}/files:generate": {
      "post": {
        "tags": [
          "Data Stream"
        ],
        "operationId": "DataStreamFileOperations_Generate",
        "description": "Initiates the process of generating SAS signed URIs for accessing the data-stream files.",
        "parameters": [
          {
            "name": "measurementId",
            "in": "path",
            "required": true,
            "description": "The measurement identifier.",
            "type": "string"
          },
          {
            "name": "dataStreamId",
            "in": "path",
            "required": true,
            "description": "The data stream identifier",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Adp.LongRunningOperationIdHeader"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DataStream.DataStreamFile"
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "description": "The location of an instance of LongRunningOperation",
                "type": "string",
                "format": "uri"
              }
            },
            "schema": {
              "$ref": "#/definitions/DefaultLroResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/measurements/{measurementId}/dataStreams/{dataStreamId}/logs:getWritableUri": {
      "post": {
        "tags": [
          "Data Stream"
        ],
        "operationId": "DataStreamLogsContainerOperations_GetWritableUri",
        "description": "Returns SAS signed URI of the data-stream logs folder that allow uploading log files to Azure Storage.\nThe SAS token expires in 24 hours.",
        "parameters": [
          {
            "name": "measurementId",
            "in": "path",
            "required": true,
            "description": "The measurement identifier.",
            "type": "string"
          },
          {
            "name": "dataStreamId",
            "in": "path",
            "required": true,
            "description": "The data stream identifier",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DataStream.DataStreamLogsContainerBase"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      }
    },
    "/measurements/{measurementId}/dataStreams/{dataStreamId}/storage": {
      "put": {
        "tags": [
          "Data Stream"
        ],
        "operationId": "DataStreamStorageOperations_CreateOrReplace",
        "description": "Create or replace storage information of the data-stream.\nReturns the data-stream storage resource with SAS signed URIs that allow uploading to Azure Storage.\nThe SAS token expires in 24 hours.",
        "parameters": [
          {
            "name": "measurementId",
            "in": "path",
            "required": true,
            "description": "The measurement identifier.",
            "type": "string"
          },
          {
            "name": "dataStreamId",
            "in": "path",
            "required": true,
            "description": "The data stream identifier",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "description": "Parameter of type 'StorageCreationParameters' in the body.",
            "schema": {
              "$ref": "#/definitions/DataStream.StorageCreationParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DataStream.Storage"
            }
          },
          "201": {
            "description": "A Storage resource was successfully created.",
            "schema": {
              "$ref": "#/definitions/DataStream.Storage"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      }
    },
    "/measurements/{measurementId}/dataStreams/{dataStreamId}/storage:get": {
      "post": {
        "tags": [
          "Data Stream"
        ],
        "operationId": "DataStreamStorageOperations_Get",
        "description": "Returns the data-stream storage resource with SAS signed URIs that allow uploading to Azure Storage.\nThe SAS token expires in 24 hours.",
        "parameters": [
          {
            "name": "measurementId",
            "in": "path",
            "required": true,
            "description": "The measurement identifier.",
            "type": "string"
          },
          {
            "name": "dataStreamId",
            "in": "path",
            "required": true,
            "description": "The data stream identifier",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DataStream.StorageBase"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      }
    },
    "/measurements/{measurementId}/dataStreams/{dataStreamId}/tags": {
      "get": {
        "tags": [
          "Data Stream"
        ],
        "operationId": "DataStreamTagsOperations_Get",
        "description": "Returns set of the data-stream tags.",
        "parameters": [
          {
            "name": "measurementId",
            "in": "path",
            "required": true,
            "description": "The measurement identifier.",
            "type": "string"
          },
          {
            "name": "dataStreamId",
            "in": "path",
            "required": true,
            "description": "The data stream identifier",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DataStream.TagSet"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Data Stream"
        ],
        "operationId": "DataStreamTagsOperations_CreateOrReplace",
        "description": "Create or replace all tags at once.",
        "parameters": [
          {
            "name": "measurementId",
            "in": "path",
            "required": true,
            "description": "The measurement identifier.",
            "type": "string"
          },
          {
            "name": "dataStreamId",
            "in": "path",
            "required": true,
            "description": "The data stream identifier",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "description": "Parameter of type 'TagSetCreationParameters' in the body.",
            "schema": {
              "$ref": "#/definitions/DataStream.TagSetCreationParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DataStream.TagSetBase"
            }
          },
          "201": {
            "description": "A TagSetBase resource was successfully created.",
            "schema": {
              "$ref": "#/definitions/DataStream.TagSetBase"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      }
    },
    "/measurements/{measurementId}/dataStreams:findByLineage": {
      "post": {
        "tags": [
          "Data Stream"
        ],
        "operationId": "DataStreamOperations_FindByLineage",
        "description": "Lists the data-streams by lineage.",
        "parameters": [
          {
            "name": "measurementId",
            "in": "path",
            "required": true,
            "description": "The measurement identifier.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "description": "Parameter of type 'FindDataStreamByLineageRequestParameters' in the body.",
            "schema": {
              "$ref": "#/definitions/DataStream.FindDataStreamByLineageRequestParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedDataStream"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/measurements/{measurementId}/dataStreams:findByTags": {
      "post": {
        "tags": [
          "Data Stream"
        ],
        "operationId": "DataStreamOperations_FindByTags",
        "description": "Lists the data-streams by tags.",
        "parameters": [
          {
            "name": "measurementId",
            "in": "path",
            "required": true,
            "description": "The measurement identifier.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "description": "Parameter of type 'FindDataStreamByTagsRequestParameters' in the body.",
            "schema": {
              "$ref": "#/definitions/DataStream.FindDataStreamByTagsRequestParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedDataStream"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/measurements/{measurementId}/dataStreams:getLineageGraphsByLineage": {
      "post": {
        "tags": [
          "Data Stream"
        ],
        "operationId": "DataStreamOperations_GetLineageGraphsByLineage",
        "description": "Lists the data-streams by lineage graph.",
        "parameters": [
          {
            "name": "measurementId",
            "in": "path",
            "required": true,
            "description": "The measurement identifier.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "description": "Parameter of type 'FindDataStreamByLineageGraphRequestParameters' in the body.",
            "schema": {
              "$ref": "#/definitions/DataStream.FindDataStreamByLineageGraphRequestParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedDataStreamsGraphListResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/measurements/{measurementId}/metadata": {
      "get": {
        "tags": [
          "Measurement"
        ],
        "operationId": "MeasurementMetadataOperations_Get",
        "description": "Returns the measurement metadata.",
        "parameters": [
          {
            "name": "measurementId",
            "in": "path",
            "required": true,
            "description": "The measurement identifier.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Measurement.MeasurementMetadataBase"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      }
    },
    "/measurements/{measurementId}/metadataFileInfo:complete": {
      "post": {
        "tags": [
          "Measurement"
        ],
        "operationId": "MeasurementMetadataFileInfoOperations_Complete",
        "description": "Initiates a process that replaces the measurement's metadata file",
        "parameters": [
          {
            "name": "measurementId",
            "in": "path",
            "required": true,
            "description": "The measurement identifier.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Adp.LongRunningOperationIdHeader"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "description": "Parameter of type 'CompleteUploadMetadataFileRequest' in the body.",
            "schema": {
              "$ref": "#/definitions/Measurement.CompleteUploadMetadataFileRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "ETag": {
                "description": "The entity tag for the response.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Measurement.MeasurementMetadataFileInfoBase"
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "description": "The location of an instance of LongRunningOperation",
                "type": "string",
                "format": "uri"
              }
            },
            "schema": {
              "$ref": "#/definitions/DefaultLroResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/measurements/{measurementId}/metadataFileInfo:getWritableUri": {
      "post": {
        "tags": [
          "Measurement"
        ],
        "operationId": "MeasurementMetadataFileInfoOperations_GetWritableUri",
        "description": "Returns SAS signed URI that allows uploading temporary measurement metadata file to Azure Storage.\nThis URI expires in 24 hours.",
        "parameters": [
          {
            "name": "measurementId",
            "in": "path",
            "required": true,
            "description": "The measurement identifier.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "ETag": {
                "description": "The entity tag for the response.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Measurement.MeasurementMetadataFileInfoBase"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      }
    },
    "/measurements/{measurementId}/metadataSchemaFileInfo": {
      "get": {
        "tags": [
          "Measurement"
        ],
        "operationId": "MeasurementMetadataSchemaFileInfoOperations_Get",
        "description": "Returns the measurement metadata schema file information.",
        "parameters": [
          {
            "name": "measurementId",
            "in": "path",
            "required": true,
            "description": "The measurement identifier.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Measurement.MeasurementMetadataSchemaFileInfoBase"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      }
    },
    "/measurements/{measurementId}/processingResults": {
      "get": {
        "tags": [
          "Measurement"
        ],
        "operationId": "MeasurementProcessingResultsOperations_Get",
        "description": "Returns the measurement processing result.",
        "parameters": [
          {
            "name": "measurementId",
            "in": "path",
            "required": true,
            "description": "The measurement identifier.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Measurement.MeasurementProcessingResultsBase"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      }
    },
    "/measurements/{measurementId}/stateMachines": {
      "get": {
        "tags": [
          "Measurement"
        ],
        "operationId": "MeasurementStateMachineOperations_GetAll",
        "description": "List state machines instance for the measurement.",
        "parameters": [
          {
            "name": "measurementId",
            "in": "path",
            "required": true,
            "description": "The measurement identifier.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedStateMachine"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/measurements/{measurementId}/stateMachines/{id}": {
      "get": {
        "tags": [
          "Measurement"
        ],
        "operationId": "MeasurementStateMachineOperations_Get",
        "description": "Returns the state machine instance for the measurement.",
        "parameters": [
          {
            "name": "measurementId",
            "in": "path",
            "required": true,
            "description": "The measurement identifier.",
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The state machine identifier.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Measurement.StateMachine"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      }
    },
    "/measurements/{measurementId}/stateMachines/{id}:act": {
      "post": {
        "tags": [
          "Measurement"
        ],
        "operationId": "MeasurementStateMachineOperations_Act",
        "description": "Initiates process of applying an action on the measurement.",
        "parameters": [
          {
            "name": "measurementId",
            "in": "path",
            "required": true,
            "description": "The measurement identifier.",
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The state machine identifier.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Adp.LongRunningOperationIdHeader"
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "description": "Parameter of type 'StateMachineAction' in the body.",
            "schema": {
              "$ref": "#/definitions/Measurement.StateMachineAction"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Measurement.StateMachine"
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "description": "The location of an instance of LongRunningOperation",
                "type": "string",
                "format": "uri"
              }
            },
            "schema": {
              "$ref": "#/definitions/DefaultLroResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "Error code for specific error that occurred.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/measurements:findByIds": {
      "post": {
        "tags": [
          "Measurement"
        ],
        "operationId": "MeasurementOperations_FindByIds",
        "description": "Lists the measurements in a workspace that are in the given measurement IDs list.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "description": "Parameter of type 'MeasurementListRequestParameters' in the body.",
            "schema": {
              "$ref": "#/definitions/Measurement.MeasurementListRequestParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedMeasurement"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/measurements:queryMeasurementsWithMetadata": {
      "post": {
        "tags": [
          "Measurement"
        ],
        "operationId": "MeasurementOperations_QueryMeasurementsWithMetadata",
        "description": "Lists the measurements in a workspace with extended metadata.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedMeasurementWithMetadata"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/operations/{operationId}": {
      "get": {
        "tags": [
          "Long Running Operation"
        ],
        "operationId": "LongRunningOperationStatus",
        "description": "Get the details of an LRO.",
        "parameters": [
          {
            "name": "operationId",
            "in": "path",
            "required": true,
            "description": "The unique ID of the operation.",
            "minLength": 1,
            "maxLength": 36,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "headers": {
              "Retry-After": {
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status.",
                "type": "integer",
                "format": "int32"
              },
              "Location": {
                "description": "Final location of the operation result.",
                "type": "string",
                "format": "uri"
              }
            },
            "schema": {
              "$ref": "#/definitions/Adp.LongRunningOperationWithResponseHeaders"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      }
    },
    "/uploads/{uploadId}": {
      "put": {
        "tags": [
          "Upload"
        ],
        "operationId": "UploadOperations_CreateOrReplace",
        "description": "Creates a new ingestion upload instance.",
        "parameters": [
          {
            "name": "uploadId",
            "in": "path",
            "required": true,
            "description": "The upload resource identifier.",
            "minLength": 1,
            "maxLength": 36,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": false,
            "description": "Parameter of type 'UploadCreationParameters' in the body.",
            "schema": {
              "$ref": "#/definitions/Ingestion.Upload.UploadCreationParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Ingestion.Upload.UploadRead"
            }
          },
          "201": {
            "description": "A Upload resource was successfully created.",
            "schema": {
              "$ref": "#/definitions/Ingestion.Upload.UploadRead"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Upload"
        ],
        "operationId": "UploadOperations_Get",
        "description": "Get discovery by ID.",
        "parameters": [
          {
            "name": "uploadId",
            "in": "path",
            "required": true,
            "description": "The upload resource identifier.",
            "minLength": 1,
            "maxLength": 36,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Ingestion.Upload.UploadRead"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      }
    },
    "/uploads/{uploadId}:complete": {
      "post": {
        "tags": [
          "Upload"
        ],
        "operationId": "UploadOperations_Complete",
        "description": "Initiates the process of completing the upload and creating the measurements.",
        "parameters": [
          {
            "name": "uploadId",
            "in": "path",
            "required": true,
            "description": "The upload resource identifier.",
            "minLength": 1,
            "maxLength": 36,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Adp.LongRunningOperationIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Ingestion.Upload.UploadRead"
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "description": "The location of an instance of LongRunningOperation",
                "type": "string",
                "format": "uri"
              }
            },
            "schema": {
              "$ref": "#/definitions/Ingestion.Upload.UploadLroResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "Error code for specific error that occurred.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/uploads/{uploadId}:cancel": {
      "post": {
        "tags": [
          "Upload"
        ],
        "operationId": "UploadOperations_Cancel",
        "description": "Initiates the process of cancelling the upload.",
        "parameters": [
          {
            "name": "uploadId",
            "in": "path",
            "required": true,
            "description": "The upload resource identifier.",
            "minLength": 1,
            "maxLength": 36,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Adp.LongRunningOperationIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Ingestion.Upload.UploadRead"
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "description": "The location of an instance of LongRunningOperation",
                "type": "string",
                "format": "uri"
              }
            },
            "schema": {
              "$ref": "#/definitions/Ingestion.Upload.UploadLroResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "Error code for specific error that occurred.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/uploads/{uploadId}/dataFilesUploadInfo:generate": {
      "post": {
        "tags": [
          "Upload"
        ],
        "operationId": "UploadDataFileOperations_Generate",
        "description": "Initiates the process of allocating the data files.",
        "parameters": [
          {
            "name": "uploadId",
            "in": "path",
            "required": true,
            "description": "The upload resource identifier.",
            "minLength": 1,
            "maxLength": 36,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Adp.LongRunningOperationIdHeader"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Ingestion.Upload.UploadDataFile"
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "description": "The location of an instance of LongRunningOperation",
                "type": "string",
                "format": "uri"
              }
            },
            "schema": {
              "$ref": "#/definitions/Ingestion.Upload.UploadLroResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/uploads/{uploadId}/dataFilesUploadInfo:listWritableUris": {
      "post": {
        "tags": [
          "Upload"
        ],
        "operationId": "UploadDataFileOperations_ListWritableUris",
        "description": "List special files details for the upload resource.\nReturns SAS signed URI that allows uploading data files to Azure Storage.\nThis URI expires in 24 hours.",
        "parameters": [
          {
            "name": "uploadId",
            "in": "path",
            "required": true,
            "description": "The upload resource identifier.",
            "minLength": 1,
            "maxLength": 36,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedUploadDataFile"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/uploads/{uploadId}/measurements": {
      "get": {
        "tags": [
          "Upload"
        ],
        "operationId": "UploadResultMeasurementOperations_GetAll",
        "description": "List of the measurement identifiers that have been created by the upload.",
        "parameters": [
          {
            "name": "uploadId",
            "in": "path",
            "required": true,
            "description": "The upload resource identifier.",
            "minLength": 1,
            "maxLength": 36,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedUploadResultMeasurement"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/uploads/{uploadId}/specialFilesUploadInfo:generate": {
      "post": {
        "tags": [
          "Upload"
        ],
        "operationId": "UploadSpecialFileOperations_Generate",
        "description": "Initiates the process of generating SAS signed URIs for uploading special files for the upload.",
        "parameters": [
          {
            "name": "uploadId",
            "in": "path",
            "required": true,
            "description": "The upload resource identifier.",
            "minLength": 1,
            "maxLength": 36,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Adp.LongRunningOperationIdHeader"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Ingestion.Upload.UploadSpecialFile"
            }
          },
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "description": "The location of an instance of LongRunningOperation",
                "type": "string",
                "format": "uri"
              }
            },
            "schema": {
              "$ref": "#/definitions/Ingestion.Upload.UploadLroResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "x-ms-long-running-operation-options": {
          "final-state-via": "location"
        },
        "x-ms-long-running-operation": true
      }
    },
    "/uploads/{uploadId}/specialFilesUploadInfo:listWritableUris": {
      "post": {
        "tags": [
          "Upload"
        ],
        "operationId": "UploadSpecialFileOperations_ListWritableUris",
        "description": "List special files details for the upload resource.\nReturns SAS signed URI that allows uploading special files to Azure Storage.\nThis URI expires in 24 hours.",
        "parameters": [
          {
            "name": "uploadId",
            "in": "path",
            "required": true,
            "description": "The upload resource identifier.",
            "minLength": 1,
            "maxLength": 36,
            "type": "string"
          },
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedUploadSpecialFile"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    }
  },
  "definitions": {
    "Adp.FileUploadInformation": {
      "type": "object",
      "properties": {
        "clientFileName": {
          "type": "string",
          "description": "File name specified by the client"
        },
        "fileUri": {
          "$ref": "#/definitions/uri",
          "description": "SAS signed URI for uploading (write) file to Azure Storage.\nThis URI expires in 24 hours."
        }
      },
      "description": "File upload information",
      "required": [
        "clientFileName",
        "fileUri"
      ]
    },
    "Adp.LongRunningOperationStatus": {
      "type": "string",
      "description": "The async operation status",
      "enum": [
        "Created",
        "InProgress",
        "Succeeded",
        "Failed",
        "Canceled"
      ],
      "x-ms-enum": {
        "name": "LongRunningOperationStatus",
        "modelAsString": true
      }
    },
    "Adp.LongRunningOperationWithResponseHeaders": {
      "type": "object",
      "properties": {
        "operationId": {
          "type": "string",
          "description": "The unique ID of the operation.",
          "minLength": 1,
          "maxLength": 36
        },
        "status": {
          "$ref": "#/definitions/Adp.LongRunningOperationStatus",
          "description": "The operation status.",
          "x-ms-mutability": [
            "read",
            "update"
          ]
        },
        "operationType": {
          "type": "string",
          "description": "The operation type.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.Error",
          "description": "The operation error.",
          "x-ms-mutability": [
            "update"
          ]
        },
        "lastModifiedBy": {
          "type": "string",
          "description": "The identifier of the service that was last to modify the operation status.",
          "x-ms-mutability": [
            "read",
            "update"
          ]
        },
        "resultLocation": {
          "$ref": "#/definitions/uri",
          "description": "The result resource location (URI).",
          "x-ms-mutability": [
            "read",
            "update",
            "create"
          ]
        },
        "etag": {
          "type": "string",
          "description": "The entity tag for this resource.",
          "x-ms-mutability": [
            "read",
            "update"
          ]
        }
      },
      "description": "Standard Azure LRO response headers.",
      "required": [
        "operationId",
        "status",
        "lastModifiedBy",
        "etag"
      ]
    },
    "Adp.SingletonIdentifier": {
      "type": "string",
      "description": "[Internal] Static identifier used by singleton resources.",
      "enum": [
        "current"
      ],
      "x-ms-enum": {
        "name": "SingletonIdentifier",
        "modelAsString": true
      }
    },
    "Azure.Core.Foundations.Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "message": {
          "type": "string",
          "description": "A human-readable representation of the error."
        },
        "target": {
          "type": "string",
          "description": "The target of the error."
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Azure.Core.Foundations.Error"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "Azure.Core.Foundations.Error[]",
          "description": "An array of details about specific errors that led to this reported error."
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "An object containing more specific information than the current object about the error."
        }
      },
      "description": "The error object.",
      "required": [
        "code",
        "message",
        "details"
      ]
    },
    "Azure.Core.Foundations.ErrorResponse": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.Error",
          "description": "The error object."
        }
      },
      "description": "A response containing error details.",
      "required": [
        "error"
      ]
    },
    "Azure.Core.Foundations.Extensions.DefaultLroType": {
      "type": "string",
      "description": "for internal use",
      "enum": [
        "default"
      ],
      "x-ms-enum": {
        "name": "DefaultLroType",
        "modelAsString": true,
        "values": [
          {
            "name": "Default",
            "value": "default"
          }
        ]
      }
    },
    "Azure.Core.Foundations.InnerError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "Inner error."
        }
      },
      "description": "An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.",
      "required": [
        "code"
      ]
    },
    "ClassificationSchema.ClassificationSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Classification schema identifier.",
          "minLength": 1,
          "maxLength": 256
        },
        "schemaDefinition": {
          "type": "string",
          "description": "Classification schema definition (JSON schema as string).",
          "minLength": 2,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "etag": {
          "type": "string",
          "description": "The entity tag for this resource.",
          "x-ms-mutability": [
            "read",
            "update"
          ]
        }
      },
      "description": "Classification schema resource model.",
      "required": [
        "name",
        "schemaDefinition",
        "etag"
      ]
    },
    "ClassificationSchema.ClassificationSchemaClients": {
      "type": "string",
      "enum": [
        "ClassificationSchemaClient"
      ],
      "x-ms-enum": {
        "name": "ClassificationSchemaClients",
        "modelAsString": false
      }
    },
    "ClassificationSchema.ClassificationSchemaCreationParameters": {
      "type": "object",
      "properties": {
        "schemaDefinition": {
          "type": "string",
          "description": "Classification schema definition (JSON schema as string).",
          "minLength": 2,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "description": "ClassificationSchema resource creation parameters.",
      "required": [
        "schemaDefinition"
      ]
    },
    "ClassificationSchema.ClassificationSchemaIdentifier": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Classification schema identifier.",
          "minLength": 1,
          "maxLength": 256
        }
      },
      "description": "Classification schema identifier.",
      "required": [
        "name"
      ]
    },
    "Clients": {
      "type": "string",
      "enum": [
        "DiscoveryClient",
        "UploadClient",
        "ClassificationSchemaClient",
        "MeasurementClient",
        "DataStreamClient"
      ],
      "x-ms-enum": {
        "name": "Clients",
        "modelAsString": false
      }
    },
    "CustomErrorResponse": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.Error",
          "description": "The error object."
        }
      },
      "description": "Error response with 'x-ms-error-code' header.",
      "required": [
        "error"
      ]
    },
    "DataStream.Classification.DataStreamClassification": {
      "type": "object",
      "properties": {
        "schemaName": {
          "type": "string",
          "description": "Classification schema name.",
          "minLength": 1,
          "maxLength": 256
        },
        "classificationObject": {
          "type": "string",
          "description": "Classification object model (JSON as string)",
          "minLength": 2,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "etag": {
          "type": "string",
          "description": "The entity tag for this resource.",
          "x-ms-mutability": [
            "read",
            "update"
          ]
        }
      },
      "description": "The data-stream classification.",
      "required": [
        "schemaName",
        "classificationObject",
        "etag"
      ]
    },
    "DataStream.Classification.DataStreamClassificationClients": {
      "type": "string",
      "enum": [
        "DataStreamClassificationsClient"
      ],
      "x-ms-enum": {
        "name": "DataStreamClassificationClients",
        "modelAsString": false
      }
    },
    "DataStream.Classification.DataStreamClassificationCreationParameters": {
      "type": "object",
      "properties": {
        "schemaName": {
          "type": "string",
          "description": "Classification schema name.",
          "minLength": 1,
          "maxLength": 256
        },
        "classificationObject": {
          "type": "string",
          "description": "Classification object model (JSON as string)",
          "minLength": 2,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "description": "DataStreamClassification resource creation parameters.",
      "required": [
        "schemaName",
        "classificationObject"
      ]
    },
    "DataStream.DataStream": {
      "type": "object",
      "properties": {
        "dataStreamId": {
          "type": "string",
          "description": "The data stream identifier"
        },
        "resourceEndpoint": {
          "$ref": "#/definitions/uri",
          "description": "The endpoint uri of the owning resource",
          "readOnly": true
        },
        "lineage": {
          "$ref": "#/definitions/DataStream.DataStreamLineage",
          "description": "The data stream lineage information",
          "x-ms-mutability": [
            "create"
          ]
        },
        "status": {
          "$ref": "#/definitions/DataStream.DataStreamStatus",
          "description": "The data stream status",
          "x-ms-mutability": [
            "update"
          ]
        },
        "type": {
          "$ref": "#/definitions/DataStream.DataStreamType",
          "description": "The data stream type",
          "x-ms-mutability": [
            "update"
          ]
        },
        "etag": {
          "type": "string",
          "description": "The entity tag for this resource.",
          "x-ms-mutability": [
            "read",
            "update"
          ]
        }
      },
      "description": "A data-stream resource",
      "required": [
        "dataStreamId",
        "lineage",
        "status",
        "type",
        "etag"
      ]
    },
    "DataStream.DataStreamCreationParameters": {
      "type": "object",
      "properties": {
        "lineage": {
          "$ref": "#/definitions/DataStream.DataStreamLineage",
          "description": "The data stream lineage information",
          "x-ms-mutability": [
            "create"
          ]
        }
      },
      "description": "DataStream resource creation parameters",
      "required": [
        "lineage"
      ]
    },
    "DataStream.DataStreamFile": {
      "type": "object",
      "properties": {
        "clientFileName": {
          "type": "string",
          "description": "Client file name."
        },
        "fileUri": {
          "$ref": "#/definitions/uri",
          "description": "SAS signed URI for downloading the file from Azure Storage.\nThis URI expires in 24 hours."
        },
        "externalTimeStamp": {
          "type": "string",
          "format": "date-time",
          "description": "UTC date and time indicating the start of file recording"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Size in bytes"
        }
      },
      "description": "Data-stream file list.",
      "required": [
        "clientFileName",
        "fileUri",
        "externalTimeStamp",
        "size"
      ]
    },
    "DataStream.DataStreamInput": {
      "type": "object",
      "properties": {
        "sourceDataStreamId": {
          "type": "string",
          "description": "The source data-stream identifier"
        },
        "channels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-cadl-name": "string[]",
          "description": "Collection of the data stream's channels"
        }
      },
      "description": "Data-stream input definition.",
      "required": [
        "sourceDataStreamId"
      ]
    },
    "DataStream.DataStreamLineage": {
      "type": "object",
      "properties": {
        "producerMetadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-cadl-name": "Record<string>",
          "description": "The data stream's metadata"
        },
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataStream.DataStreamInput"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "DataStream.DataStreamInput[]",
          "description": "The data stream's inputs"
        }
      },
      "description": "Data stream lineage information",
      "required": [
        "producerMetadata",
        "inputs"
      ]
    },
    "DataStream.DataStreamListResponse": {
      "type": "object",
      "properties": {
        "dataStreams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataStream.DataStream"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "DataStream.DataStream[]",
          "description": "Collection of the data stream's channels"
        }
      },
      "description": "A wrapper for the list of data streams",
      "required": [
        "dataStreams"
      ]
    },
    "DataStream.DataStreamLogsContainer": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/Adp.SingletonIdentifier",
          "description": "Static identifier for singleton resource"
        },
        "logFolderUri": {
          "$ref": "#/definitions/uri",
          "description": "SAS signed URI for accessing the logs container on Azure Storage.\nThis URI expires in 24 hours."
        }
      },
      "description": "Data-stream logs folder",
      "required": [
        "id",
        "logFolderUri"
      ]
    },
    "DataStream.DataStreamLogsContainerBase": {
      "type": "object",
      "properties": {
        "logFolderUri": {
          "$ref": "#/definitions/uri",
          "description": "SAS signed URI for accessing the logs container on Azure Storage.\nThis URI expires in 24 hours."
        }
      },
      "description": "Data-stream logs folder",
      "required": [
        "logFolderUri"
      ]
    },
    "DataStream.DataStreamRollingInformation": {
      "type": "object",
      "properties": {
        "strategy": {
          "$ref": "#/definitions/DataStream.DataStreamRollingStrategy",
          "description": "Data stream rolling strategy"
        },
        "unit": {
          "$ref": "#/definitions/DataStream.DataStreamRollingUnit",
          "description": "Data stream rolling unit"
        },
        "value": {
          "type": "integer",
          "format": "int32",
          "description": "Data stream rolling value",
          "minimum": 0
        }
      },
      "description": "Data stream rolling information",
      "required": [
        "strategy",
        "unit",
        "value"
      ]
    },
    "DataStream.DataStreamRollingStrategy": {
      "type": "string",
      "description": "Data stream rolling strategy",
      "enum": [
        "Time",
        "Size"
      ],
      "x-ms-enum": {
        "name": "DataStreamRollingStrategy",
        "modelAsString": true,
        "values": [
          {
            "name": "Time",
            "value": "Time"
          },
          {
            "name": "Size",
            "value": "Size"
          }
        ]
      }
    },
    "DataStream.DataStreamRollingStrategyKV": {
      "type": "string",
      "enum": [
        "Time",
        "Size"
      ],
      "x-ms-enum": {
        "name": "DataStreamRollingStrategyKV",
        "modelAsString": false,
        "values": [
          {
            "name": "Time",
            "value": "Time"
          },
          {
            "name": "Size",
            "value": "Size"
          }
        ]
      }
    },
    "DataStream.DataStreamRollingUnit": {
      "type": "string",
      "description": "Data stream rolling unit",
      "enum": [
        "Seconds",
        "Minutes",
        "kB",
        "MB",
        "GB"
      ],
      "x-ms-enum": {
        "name": "DataStreamRollingUnit",
        "modelAsString": true,
        "values": [
          {
            "name": "Seconds",
            "value": "Seconds"
          },
          {
            "name": "Minutes",
            "value": "Minutes"
          },
          {
            "name": "kB",
            "value": "kB"
          },
          {
            "name": "MB",
            "value": "MB"
          },
          {
            "name": "GB",
            "value": "GB"
          }
        ]
      }
    },
    "DataStream.DataStreamRollingUnitKV": {
      "type": "string",
      "enum": [
        "Seconds",
        "Minutes",
        "kB",
        "MB",
        "GB"
      ],
      "x-ms-enum": {
        "name": "DataStreamRollingUnitKV",
        "modelAsString": false,
        "values": [
          {
            "name": "Seconds",
            "value": "Seconds"
          },
          {
            "name": "Minutes",
            "value": "Minutes"
          },
          {
            "name": "kB",
            "value": "kB"
          },
          {
            "name": "MB",
            "value": "MB"
          },
          {
            "name": "GB",
            "value": "GB"
          }
        ]
      }
    },
    "DataStream.DataStreamShardAccessInformation": {
      "type": "object",
      "properties": {
        "shardFolderUri": {
          "$ref": "#/definitions/uri",
          "description": "SAS signed URI for reading the shard folder content from Azure Storage.\nThis URI expires in 24 hours."
        },
        "manifestFileUri": {
          "$ref": "#/definitions/uri",
          "description": "SAS signed URI for reading the shard manifest file from Azure Storage.\nThis URI expires in 24 hours."
        }
      },
      "description": "The access information to the data stream shard",
      "required": [
        "shardFolderUri",
        "manifestFileUri"
      ]
    },
    "DataStream.DataStreamShardsResponse": {
      "type": "object",
      "properties": {
        "shards": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataStream.DataStreamShardAccessInformation"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "DataStream.DataStreamShardAccessInformation[]",
          "description": "The list of shards associated with the data stream"
        }
      },
      "description": "Data stream shards list and relevant metadata",
      "required": [
        "shards"
      ]
    },
    "DataStream.DataStreamStatus": {
      "type": "string",
      "description": "Data stream state",
      "enum": [
        "Created",
        "Completing",
        "Completed",
        "Failed",
        "Failing",
        "Clearing",
        "Cleared"
      ],
      "x-ms-enum": {
        "name": "DataStreamStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "Created",
            "value": "Created"
          },
          {
            "name": "Completing",
            "value": "Completing"
          },
          {
            "name": "Completed",
            "value": "Completed"
          },
          {
            "name": "Failed",
            "value": "Failed"
          },
          {
            "name": "Failing",
            "value": "Failing"
          },
          {
            "name": "Clearing",
            "value": "Clearing"
          },
          {
            "name": "Cleared",
            "value": "Cleared"
          }
        ]
      }
    },
    "DataStream.DataStreamStatusKV": {
      "type": "string",
      "enum": [
        "Created",
        "Completing",
        "Completed",
        "Failed",
        "Failing",
        "Clearing",
        "Cleared"
      ],
      "x-ms-enum": {
        "name": "DataStreamStatusKV",
        "modelAsString": false,
        "values": [
          {
            "name": "Created",
            "value": "Created"
          },
          {
            "name": "Completing",
            "value": "Completing"
          },
          {
            "name": "Completed",
            "value": "Completed"
          },
          {
            "name": "Failed",
            "value": "Failed"
          },
          {
            "name": "Failing",
            "value": "Failing"
          },
          {
            "name": "Clearing",
            "value": "Clearing"
          },
          {
            "name": "Cleared",
            "value": "Cleared"
          }
        ]
      }
    },
    "DataStream.DataStreamType": {
      "type": "string",
      "description": "Data stream type",
      "enum": [
        "System",
        "Raw",
        "Derived"
      ],
      "x-ms-enum": {
        "name": "DataStreamType",
        "modelAsString": true,
        "values": [
          {
            "name": "System",
            "value": "System"
          },
          {
            "name": "Raw",
            "value": "Raw"
          },
          {
            "name": "Derived",
            "value": "Derived"
          }
        ]
      }
    },
    "DataStream.DataStreamTypeKV": {
      "type": "string",
      "enum": [
        "System",
        "Raw",
        "Derived"
      ],
      "x-ms-enum": {
        "name": "DataStreamTypeKV",
        "modelAsString": false,
        "values": [
          {
            "name": "System",
            "value": "System"
          },
          {
            "name": "Raw",
            "value": "Raw"
          },
          {
            "name": "Derived",
            "value": "Derived"
          }
        ]
      }
    },
    "DataStream.DataStreamsGraph": {
      "type": "object",
      "properties": {
        "dataStreamByProcessingObjectId": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/DataStream.DataStream"
          },
          "x-cadl-name": "Record<DataStream.DataStream>",
          "description": "Dictionary of data stream by processing object id"
        }
      },
      "description": "Graph of matched data streams by processing objects graph",
      "required": [
        "dataStreamByProcessingObjectId"
      ]
    },
    "DataStream.DataStreamsGraphListResponse": {
      "type": "object",
      "properties": {
        "dataStreamsGraphs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataStream.DataStreamsGraph"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "DataStream.DataStreamsGraph[]",
          "description": "List of data streams matched graphs"
        }
      },
      "description": "List of graphs of matched data streams by processing objects graph",
      "required": [
        "dataStreamsGraphs"
      ]
    },
    "DataStream.DerivedDataStreamFileInformation": {
      "type": "object",
      "properties": {
        "clientFileName": {
          "type": "string",
          "description": "The file name as provided by the client"
        },
        "recordingTimestampUtc": {
          "type": "string",
          "format": "date-time",
          "description": "The file recording UTC timestamp as provided by the client"
        }
      },
      "description": "Information about a file",
      "required": [
        "clientFileName"
      ]
    },
    "DataStream.FindDataStreamByLineageGraphRequestParameters": {
      "type": "object",
      "properties": {
        "processingObjects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataStream.ProcessingObject"
          },
          "x-cadl-name": "DataStream.ProcessingObject[]",
          "description": "The processing objects"
        },
        "edges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataStream.ProcessingObjectEdge"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "DataStream.ProcessingObjectEdge[]",
          "description": "The processing objects edges"
        }
      },
      "description": "Processing objects graph",
      "required": [
        "processingObjects",
        "edges"
      ]
    },
    "DataStream.FindDataStreamByLineageRequestParameters": {
      "type": "object",
      "properties": {
        "lineage": {
          "$ref": "#/definitions/DataStream.DataStreamLineage",
          "description": "The data-stream lineage to search for"
        }
      },
      "description": "Data stream search by lineage query parameters",
      "required": [
        "lineage"
      ]
    },
    "DataStream.FindDataStreamByTagsRequestParameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-cadl-name": "Record<string>",
          "description": "The list of tags to search for"
        }
      },
      "description": "Data stream search by tags parameters",
      "required": [
        "tags"
      ]
    },
    "DataStream.FindDataStreamByTypeRequestParameters": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/DataStream.DataStreamType",
          "description": "The data-stream type to search for"
        }
      },
      "description": "Data stream search by type query parameters",
      "required": [
        "type"
      ]
    },
    "DataStream.ProcessingObject": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-cadl-name": "Record<string>",
          "description": "The processing object metadata"
        },
        "id": {
          "type": "string",
          "description": "A request unique ID to identify processing objects in graph"
        }
      },
      "description": "Processing object node information in a processing objects Graph",
      "required": [
        "metadata",
        "id"
      ]
    },
    "DataStream.ProcessingObjectEdge": {
      "type": "object",
      "properties": {
        "sourceId": {
          "type": "string",
          "description": "The source processing object ID"
        },
        "targetId": {
          "type": "string",
          "description": "The target processing object ID"
        }
      },
      "description": "Processing objects edge",
      "required": [
        "sourceId",
        "targetId"
      ]
    },
    "DataStream.Storage": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/Adp.SingletonIdentifier",
          "description": "The data stream storage identifier.\nNot in use as this is a singleton resource.\nTODO: check with CADL team how to define a singleton child resource without key."
        },
        "type": {
          "type": "string",
          "description": "Storage type.",
          "enum": [
            "shardedStorage",
            "storage"
          ],
          "x-ms-enum": {
            "name": "string",
            "modelAsString": true,
            "values": [
              {
                "name": "ShardedStorage",
                "value": "shardedStorage"
              },
              {
                "name": "Storage",
                "value": "storage"
              }
            ]
          }
        },
        "rollingInformation": {
          "$ref": "#/definitions/DataStream.DataStreamRollingInformation",
          "description": "The data stream rolling information",
          "x-ms-mutability": [
            "create"
          ]
        },
        "manifestUri": {
          "$ref": "#/definitions/uri",
          "description": "SAS signed URI for downloading the data stream storage manifest file from Azure Storage.\nThis URI expires in 24 hours.",
          "x-ms-mutability": [
            "read",
            "update"
          ]
        },
        "dataFolderUri": {
          "$ref": "#/definitions/uri",
          "description": "SAS signed URI for accessing the data stream data stored on the Azure Storage.\nThis URI expires in 24 hours.",
          "readOnly": true
        },
        "shards": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataStream.DataStreamShardAccessInformation"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "DataStream.DataStreamShardAccessInformation[]",
          "description": "The list of shards associated with the data stream",
          "minItems": 1,
          "x-ms-mutability": [
            "read",
            "update"
          ]
        },
        "etag": {
          "type": "string",
          "description": "The entity tag for this resource.",
          "x-ms-mutability": [
            "read",
            "update"
          ]
        }
      },
      "description": "A data-stream with non sharded storage resource",
      "required": [
        "id",
        "type",
        "manifestUri",
        "shards",
        "etag"
      ]
    },
    "DataStream.StorageBase": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Storage type.",
          "enum": [
            "shardedStorage",
            "storage"
          ],
          "x-ms-enum": {
            "name": "string",
            "modelAsString": true,
            "values": [
              {
                "name": "ShardedStorage",
                "value": "shardedStorage"
              },
              {
                "name": "Storage",
                "value": "storage"
              }
            ]
          }
        },
        "rollingInformation": {
          "$ref": "#/definitions/DataStream.DataStreamRollingInformation",
          "description": "The data stream rolling information",
          "x-ms-mutability": [
            "create"
          ]
        },
        "manifestUri": {
          "$ref": "#/definitions/uri",
          "description": "SAS signed URI for downloading the data stream storage manifest file from Azure Storage.\nThis URI expires in 24 hours.",
          "x-ms-mutability": [
            "read",
            "update"
          ]
        },
        "dataFolderUri": {
          "$ref": "#/definitions/uri",
          "description": "SAS signed URI for accessing the data stream data stored on the Azure Storage.\nThis URI expires in 24 hours.",
          "readOnly": true
        },
        "shards": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataStream.DataStreamShardAccessInformation"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "DataStream.DataStreamShardAccessInformation[]",
          "description": "The list of shards associated with the data stream",
          "minItems": 1,
          "x-ms-mutability": [
            "read",
            "update"
          ]
        },
        "etag": {
          "type": "string",
          "description": "The entity tag for this resource.",
          "x-ms-mutability": [
            "read",
            "update"
          ]
        }
      },
      "description": "Common data-stream storage model.",
      "required": [
        "type",
        "manifestUri",
        "shards",
        "etag"
      ]
    },
    "DataStream.StorageCreationParameters": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Storage type.",
          "enum": [
            "shardedStorage",
            "storage"
          ],
          "x-ms-enum": {
            "name": "string",
            "modelAsString": true,
            "values": [
              {
                "name": "ShardedStorage",
                "value": "shardedStorage"
              },
              {
                "name": "Storage",
                "value": "storage"
              }
            ]
          }
        },
        "rollingInformation": {
          "$ref": "#/definitions/DataStream.DataStreamRollingInformation",
          "description": "The data stream rolling information",
          "x-ms-mutability": [
            "create"
          ]
        }
      },
      "description": "Storage resource creation parameters",
      "required": [
        "type"
      ]
    },
    "DataStream.StorageTypes": {
      "type": "string",
      "enum": [
        "shardedStorage",
        "storage"
      ],
      "x-ms-enum": {
        "name": "StorageTypes",
        "modelAsString": false,
        "values": [
          {
            "name": "ShardedStorage",
            "value": "shardedStorage"
          },
          {
            "name": "Storage",
            "value": "storage"
          }
        ]
      }
    },
    "DataStream.Tag": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Tag identifier"
        },
        "value": {
          "type": "string",
          "description": "Tag value."
        }
      },
      "description": "Tag element.",
      "required": [
        "key",
        "value"
      ]
    },
    "DataStream.TagSet": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/Adp.SingletonIdentifier",
          "description": "The data stream tag set identifier.\nNot in use as this is a singleton resource. Tags could be set or returned as singleton set.\nTODO: check with CADL team how to define a singleton child resource without key."
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataStream.Tag"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "DataStream.Tag[]",
          "description": "Set of data-stream tags.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "description": "A data-stream tags.",
      "required": [
        "id",
        "tags"
      ]
    },
    "DataStream.TagSetBase": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataStream.Tag"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "DataStream.Tag[]",
          "description": "Set of data-stream tags.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "description": "Tag set.",
      "required": [
        "tags"
      ]
    },
    "DataStream.TagSetCreationParameters": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataStream.Tag"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "DataStream.Tag[]",
          "description": "Set of data-stream tags.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "description": "Storage resource creation parameters",
      "required": [
        "tags"
      ]
    },
    "DataStream.UploadDerivedDataStreamFilesRequest": {
      "type": "object",
      "properties": {
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataStream.DerivedDataStreamFileInformation"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "DataStream.DerivedDataStreamFileInformation[]",
          "description": "The information of the files that are to be uploaded"
        }
      },
      "description": "Data stream file upload parameters",
      "required": [
        "files"
      ]
    },
    "DataStream.UploadDerivedDataStreamFilesResponse": {
      "type": "object",
      "properties": {
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Adp.FileUploadInformation"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "Adp.FileUploadInformation[]",
          "description": "Per-file upload instructions"
        }
      },
      "description": "Data stream file upload request parameters",
      "required": [
        "files"
      ]
    },
    "DefaultLroResponse": {
      "type": "object",
      "properties": {
        "operationId": {
          "type": "string",
          "description": "The operation Id.",
          "minLength": 1,
          "maxLength": 36
        },
        "status": {
          "$ref": "#/definitions/Adp.LongRunningOperationStatus",
          "description": "The operation status.",
          "x-ms-mutability": [
            "read",
            "update"
          ]
        },
        "operationType": {
          "$ref": "#/definitions/Azure.Core.Foundations.Extensions.DefaultLroType",
          "description": "The operation type.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.Error",
          "description": "The operation error.",
          "x-ms-mutability": [
            "update"
          ]
        },
        "lastModifiedBy": {
          "type": "string",
          "description": "The identifier of the service that was last to modify the operation status.",
          "x-ms-mutability": [
            "read",
            "update"
          ]
        },
        "resultLocation": {
          "$ref": "#/definitions/uri",
          "description": "The result resource location (URI).",
          "x-ms-mutability": [
            "read",
            "update",
            "create"
          ]
        },
        "etag": {
          "type": "string",
          "description": "The entity tag for this resource.",
          "x-ms-mutability": [
            "read",
            "update"
          ]
        }
      },
      "required": [
        "operationId",
        "status",
        "lastModifiedBy",
        "etag"
      ]
    },
    "Ingestion.Discovery.Discovery": {
      "type": "object",
      "properties": {
        "discoveryId": {
          "type": "string",
          "description": "The discovery identifier.",
          "minLength": 1,
          "maxLength": 36
        },
        "externalPackageId": {
          "type": "string",
          "description": "ID of the external package (for example, the disk which contained data) which was used upon the creation of upload",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "manifestUri": {
          "$ref": "#/definitions/uri",
          "description": "SAS signed URI for accessing the discovery manifest file on Azure Storage.\nThis URI expires in 24 hours.",
          "x-ms-mutability": [
            "read",
            "update"
          ]
        },
        "status": {
          "$ref": "#/definitions/Ingestion.Discovery.DiscoveryStatus",
          "description": "The discovery status.",
          "x-ms-mutability": [
            "read",
            "update"
          ]
        },
        "etag": {
          "type": "string",
          "description": "The entity tag for this resource.",
          "x-ms-mutability": [
            "read",
            "update"
          ]
        }
      },
      "description": "A discovery resource.",
      "required": [
        "discoveryId",
        "etag"
      ]
    },
    "Ingestion.Discovery.DiscoveryCreationParameters": {
      "type": "object",
      "properties": {
        "externalPackageId": {
          "type": "string",
          "description": "ID of the external package (for example, the disk which contained data) which was used upon the creation of upload",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "description": "Discovery resource creation parameters."
    },
    "Ingestion.Discovery.DiscoveryIdentifier": {
      "type": "object",
      "properties": {
        "discoveryId": {
          "type": "string",
          "description": "The discovery identifier.",
          "minLength": 1,
          "maxLength": 36
        }
      },
      "description": "Internal - the model for internal use",
      "required": [
        "discoveryId"
      ]
    },
    "Ingestion.Discovery.DiscoveryLroResponse": {
      "type": "object",
      "properties": {
        "operationId": {
          "type": "string",
          "description": "The operation Id.",
          "minLength": 1,
          "maxLength": 36
        },
        "status": {
          "$ref": "#/definitions/Adp.LongRunningOperationStatus",
          "description": "The operation status.",
          "x-ms-mutability": [
            "read",
            "update"
          ]
        },
        "operationType": {
          "$ref": "#/definitions/Ingestion.Discovery.DiscoveryOperationType",
          "description": "The operation type.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.Error",
          "description": "The operation error.",
          "x-ms-mutability": [
            "update"
          ]
        },
        "lastModifiedBy": {
          "type": "string",
          "description": "The identifier of the service that was last to modify the operation status.",
          "x-ms-mutability": [
            "read",
            "update"
          ]
        },
        "resultLocation": {
          "$ref": "#/definitions/uri",
          "description": "The result resource location (URI).",
          "x-ms-mutability": [
            "read",
            "update",
            "create"
          ]
        },
        "etag": {
          "type": "string",
          "description": "The entity tag for this resource.",
          "x-ms-mutability": [
            "read",
            "update"
          ]
        }
      },
      "description": "LRO of DiscoveryOperationType type",
      "required": [
        "operationId",
        "status",
        "lastModifiedBy",
        "etag"
      ]
    },
    "Ingestion.Discovery.DiscoveryOperationErrorCode": {
      "type": "string",
      "description": "Known discovery error codes.",
      "enum": [
        "Succeeded",
        "DiscoveryManifestNotFound",
        "InvalidDiscoveryManifestFormat",
        "SpecialFileNotFound",
        "InvalidSpecialFileFormat",
        "DataPoolDoesNotExist",
        "WorkspaceDoesNotExist",
        "InvalidDiskFolderStructure",
        "Unknown"
      ],
      "x-ms-enum": {
        "name": "DiscoveryOperationErrorCode",
        "modelAsString": true,
        "values": [
          {
            "name": "Succeeded",
            "value": "Succeeded",
            "description": "The operation has succeeded"
          },
          {
            "name": "DiscoveryManifestNotFound",
            "value": "DiscoveryManifestNotFound",
            "description": "Discovery manifest file doesn't exist"
          },
          {
            "name": "InvalidDiscoveryManifestFormat",
            "value": "InvalidDiscoveryManifestFormat",
            "description": "Invalid discovery manifest format"
          },
          {
            "name": "SpecialFileNotFound",
            "value": "SpecialFileNotFound",
            "description": "The special file doesn't exist"
          },
          {
            "name": "InvalidSpecialFileFormat",
            "value": "InvalidSpecialFileFormat",
            "description": "The special file has an invalid format"
          },
          {
            "name": "DataPoolDoesNotExist",
            "value": "DataPoolDoesNotExist",
            "description": "Data pool doesn't exist"
          },
          {
            "name": "WorkspaceDoesNotExist",
            "value": "WorkspaceDoesNotExist",
            "description": "Workspace doesn't exist"
          },
          {
            "name": "InvalidDiskFolderStructure",
            "value": "InvalidDiskFolderStructure",
            "description": "Invalid disk structure"
          },
          {
            "name": "Unknown",
            "value": "Unknown",
            "description": "The operation has failed with an unexpected error"
          }
        ]
      }
    },
    "Ingestion.Discovery.DiscoveryOperationErrorCodeKV": {
      "type": "string",
      "enum": [
        "Succeeded",
        "DiscoveryManifestNotFound",
        "InvalidDiscoveryManifestFormat",
        "SpecialFileNotFound",
        "InvalidSpecialFileFormat",
        "DataPoolDoesNotExist",
        "WorkspaceDoesNotExist",
        "InvalidDiskFolderStructure",
        "Unknown"
      ],
      "x-ms-enum": {
        "name": "DiscoveryOperationErrorCodeKV",
        "modelAsString": false,
        "values": [
          {
            "name": "Succeeded",
            "value": "Succeeded",
            "description": "The operation has succeeded"
          },
          {
            "name": "DiscoveryManifestNotFound",
            "value": "DiscoveryManifestNotFound",
            "description": "Discovery manifest file doesn't exist"
          },
          {
            "name": "InvalidDiscoveryManifestFormat",
            "value": "InvalidDiscoveryManifestFormat",
            "description": "Invalid discovery manifest format"
          },
          {
            "name": "SpecialFileNotFound",
            "value": "SpecialFileNotFound",
            "description": "The special file doesn't exist"
          },
          {
            "name": "InvalidSpecialFileFormat",
            "value": "InvalidSpecialFileFormat",
            "description": "The special file has an invalid format"
          },
          {
            "name": "DataPoolDoesNotExist",
            "value": "DataPoolDoesNotExist",
            "description": "Data pool doesn't exist"
          },
          {
            "name": "WorkspaceDoesNotExist",
            "value": "WorkspaceDoesNotExist",
            "description": "Workspace doesn't exist"
          },
          {
            "name": "InvalidDiskFolderStructure",
            "value": "InvalidDiskFolderStructure",
            "description": "Invalid disk structure"
          },
          {
            "name": "Unknown",
            "value": "Unknown",
            "description": "The operation has failed with an unexpected error"
          }
        ]
      }
    },
    "Ingestion.Discovery.DiscoveryOperationType": {
      "type": "string",
      "description": "Known discovery operation types.",
      "enum": [
        "CompleteDiscovery",
        "FinalizeFileList",
        "AbortDiscovery"
      ],
      "x-ms-enum": {
        "name": "DiscoveryOperationType",
        "modelAsString": true,
        "values": [
          {
            "name": "CompleteDiscovery",
            "value": "CompleteDiscovery",
            "description": "The process of completing the discovery"
          },
          {
            "name": "FinalizeFileList",
            "value": "FinalizeFileList",
            "description": "The process of finalizing the file list of the discovery"
          },
          {
            "name": "AbortDiscovery",
            "value": "AbortDiscovery",
            "description": "The process of cancelling the discovery"
          }
        ]
      }
    },
    "Ingestion.Discovery.DiscoveryOperationTypeKV": {
      "type": "string",
      "description": "The supported actions on discovery",
      "enum": [
        "CompleteDiscovery",
        "FinalizeFileList",
        "AbortDiscovery"
      ],
      "x-ms-enum": {
        "name": "DiscoveryOperationTypeKV",
        "modelAsString": false,
        "values": [
          {
            "name": "CompleteDiscovery",
            "value": "CompleteDiscovery",
            "description": "The process of completing the discovery"
          },
          {
            "name": "FinalizeFileList",
            "value": "FinalizeFileList",
            "description": "The process of finalizing the file list of the discovery"
          },
          {
            "name": "AbortDiscovery",
            "value": "AbortDiscovery",
            "description": "The process of cancelling the discovery"
          }
        ]
      }
    },
    "Ingestion.Discovery.DiscoverySpecialFile": {
      "type": "object",
      "properties": {
        "clientFileName": {
          "type": "string",
          "description": "Client file name."
        },
        "fileUri": {
          "type": "string",
          "description": "File name on storage."
        }
      },
      "description": "A discovery special file resource.",
      "required": [
        "clientFileName",
        "fileUri"
      ]
    },
    "Ingestion.Discovery.DiscoverySpecialFilesResponse": {
      "type": "object",
      "properties": {
        "discoveryId": {
          "type": "string",
          "description": "The discovery identifier.",
          "minLength": 1,
          "maxLength": 36
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Adp.FileUploadInformation"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "Adp.FileUploadInformation[]",
          "description": "List of the special files"
        }
      },
      "description": "Describes the list of special files to be uploaded",
      "required": [
        "discoveryId",
        "files"
      ]
    },
    "Ingestion.Discovery.DiscoveryStatus": {
      "type": "string",
      "description": "Known discovery statuses.",
      "enum": [
        "Created",
        "GeneratingSpecialFilesUploadInfo",
        "GeneratedSpecialFilesUploadInfo",
        "Completing",
        "Completed",
        "Aborting",
        "Aborted",
        "Failed"
      ],
      "x-ms-enum": {
        "name": "DiscoveryStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "Created",
            "value": "Created",
            "description": "The discovery process has been initiated"
          },
          {
            "name": "GeneratingSpecialFilesUploadInfo",
            "value": "GeneratingSpecialFilesUploadInfo",
            "description": "The system is analyzing the discovery manifest file uploaded by the client and generating the upload information for uploading special files."
          },
          {
            "name": "GeneratedSpecialFilesUploadInfo",
            "value": "GeneratedSpecialFilesUploadInfo",
            "description": "The system has analyzed the discovery manifest file and generated the upload information for uploading special files."
          },
          {
            "name": "Completing",
            "value": "Completing",
            "description": "The system is processing the special files uploaded by the client"
          },
          {
            "name": "Completed",
            "value": "Completed",
            "description": "The system has finished the analysis of special files"
          },
          {
            "name": "Aborting",
            "value": "Aborting",
            "description": "The system is cancelling the discovery process"
          },
          {
            "name": "Aborted",
            "value": "Aborted",
            "description": "The discovery process has been aborted"
          },
          {
            "name": "Failed",
            "value": "Failed",
            "description": "The discovery process has been failed"
          }
        ]
      }
    },
    "Ingestion.Discovery.DiscoveryStatusKV": {
      "type": "string",
      "description": "The status of the discovery",
      "enum": [
        "Created",
        "GeneratingSpecialFilesUploadInfo",
        "GeneratedSpecialFilesUploadInfo",
        "Completing",
        "Completed",
        "Aborting",
        "Aborted",
        "Failed"
      ],
      "x-ms-enum": {
        "name": "DiscoveryStatusKV",
        "modelAsString": false,
        "values": [
          {
            "name": "Created",
            "value": "Created",
            "description": "The discovery process has been initiated"
          },
          {
            "name": "GeneratingSpecialFilesUploadInfo",
            "value": "GeneratingSpecialFilesUploadInfo",
            "description": "The system is analyzing the discovery manifest file uploaded by the client and generating the upload information for uploading special files."
          },
          {
            "name": "GeneratedSpecialFilesUploadInfo",
            "value": "GeneratedSpecialFilesUploadInfo",
            "description": "The system has analyzed the discovery manifest file and generated the upload information for uploading special files."
          },
          {
            "name": "Completing",
            "value": "Completing",
            "description": "The system is processing the special files uploaded by the client"
          },
          {
            "name": "Completed",
            "value": "Completed",
            "description": "The system has finished the analysis of special files"
          },
          {
            "name": "Aborting",
            "value": "Aborting",
            "description": "The system is cancelling the discovery process"
          },
          {
            "name": "Aborted",
            "value": "Aborted",
            "description": "The discovery process has been aborted"
          },
          {
            "name": "Failed",
            "value": "Failed",
            "description": "The discovery process has been failed"
          }
        ]
      }
    },
    "Ingestion.Discovery.DiscoveryUpload": {
      "type": "object",
      "properties": {
        "uploadId": {
          "type": "string",
          "description": "Upload identifier.",
          "minLength": 1,
          "maxLength": 36
        },
        "manifestUri": {
          "$ref": "#/definitions/uri",
          "description": "SAS signed URI for downloading the manifest file from Azure Storage.\nThe manifest file contains list of all files in the group.\nThis URI expires in 24 hours."
        },
        "resourceEndpoint": {
          "$ref": "#/definitions/uri",
          "description": "The endpoint uri of the owning resource",
          "readOnly": true
        }
      },
      "description": "A discovery upload resource.",
      "required": [
        "uploadId",
        "manifestUri"
      ]
    },
    "Ingestion.Upload.GetUploadManifestUriResponse": {
      "type": "object",
      "properties": {
        "uploadId": {
          "type": "string",
          "description": "The upload identifier.",
          "minLength": 1,
          "maxLength": 36
        },
        "manifestUri": {
          "$ref": "#/definitions/uri",
          "description": "SAS signed URI for uploading the manifest file to Azure Storage.\nThis URI expires in 24 hours."
        },
        "resourceEndpoint": {
          "$ref": "#/definitions/uri",
          "description": "The endpoint uri of the owning resource",
          "readOnly": true
        }
      },
      "description": "Provides upload manifest URI on Azure Storage.",
      "required": [
        "uploadId",
        "manifestUri"
      ]
    },
    "Ingestion.Upload.Upload": {
      "type": "object",
      "properties": {
        "externalPackageId": {
          "type": "string",
          "description": "ID of the external package (for example, the disk which contained data) which was used upon the creation of upload.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "discoveryId": {
          "type": "string",
          "description": "The discovery identifier.",
          "minLength": 1,
          "maxLength": 36,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "manifestUri": {
          "$ref": "#/definitions/uri",
          "description": "SAS signed URI for uploading or reading the upload manifest file on Azure Storage.\nNote, if the upload status is 'Created' then the URI is signed with 'Write' permissions, otherwise with 'Read' permission.\nThis URI expires in 24 hours.",
          "readOnly": true
        },
        "status": {
          "$ref": "#/definitions/Ingestion.Upload.UploadStatus",
          "description": "The upload state",
          "x-ms-mutability": [
            "read",
            "update"
          ]
        },
        "resourceEndpoint": {
          "$ref": "#/definitions/uri",
          "description": "The endpoint uri of the owning resource",
          "readOnly": true
        },
        "etag": {
          "type": "string",
          "description": "The entity tag for this resource.",
          "x-ms-mutability": [
            "read",
            "update"
          ]
        }
      },
      "description": "An upload resource.",
      "required": [
        "etag"
      ]
    },
    "Ingestion.Upload.UploadCreationParameters": {
      "type": "object",
      "properties": {
        "externalPackageId": {
          "type": "string",
          "description": "ID of the external package (for example, the disk which contained data) which was used upon the creation of upload.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "discoveryId": {
          "type": "string",
          "description": "The discovery identifier.",
          "minLength": 1,
          "maxLength": 36,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "description": "Upload resource creation parameters"
    },
    "Ingestion.Upload.UploadDataFile": {
      "type": "object",
      "properties": {
        "clientFileName": {
          "type": "string",
          "description": "File name specified by the client"
        },
        "fileUri": {
          "$ref": "#/definitions/uri",
          "description": "SAS signed URI for uploading (write) file to Azure Storage.\nThis URI expires in 24 hours."
        }
      },
      "description": "Data file resource.",
      "required": [
        "clientFileName",
        "fileUri"
      ]
    },
    "Ingestion.Upload.UploadFilesRequest": {
      "type": "object",
      "properties": {
        "clientFileNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-cadl-name": "string[]",
          "description": "List of client file names for which the upload URIs are requested"
        }
      },
      "description": "Parameters to the upload URIs retrieval request",
      "required": [
        "clientFileNames"
      ]
    },
    "Ingestion.Upload.UploadFilesResponse": {
      "type": "object",
      "properties": {
        "uploadId": {
          "type": "string",
          "description": "The upload identifier.",
          "minLength": 1,
          "maxLength": 36
        },
        "resourceEndpoint": {
          "$ref": "#/definitions/uri",
          "description": "The endpoint uri of the owning resource",
          "readOnly": true
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Adp.FileUploadInformation"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "Adp.FileUploadInformation[]",
          "description": "List of SAS-signed file upload URIs"
        }
      },
      "description": "A response providing the list of upload Uris for the files to be uploaded"
    },
    "Ingestion.Upload.UploadIdentifier": {
      "type": "object",
      "properties": {},
      "description": "Internal - the model for internal use"
    },
    "Ingestion.Upload.UploadIdentifierAndEndpoint": {
      "type": "object",
      "properties": {
        "uploadId": {
          "type": "string",
          "description": "The upload identifier.",
          "minLength": 1,
          "maxLength": 36
        },
        "resourceEndpoint": {
          "$ref": "#/definitions/uri",
          "description": "The endpoint uri of the owning resource",
          "readOnly": true
        }
      },
      "description": "Upload resource response.",
      "required": [
        "uploadId"
      ]
    },
    "Ingestion.Upload.UploadLroResponse": {
      "type": "object",
      "properties": {
        "operationId": {
          "type": "string",
          "description": "The operation Id.",
          "minLength": 1,
          "maxLength": 36
        },
        "status": {
          "$ref": "#/definitions/Adp.LongRunningOperationStatus",
          "description": "The operation status.",
          "x-ms-mutability": [
            "read",
            "update"
          ]
        },
        "operationType": {
          "$ref": "#/definitions/Ingestion.Upload.UploadOperationType",
          "description": "The operation type.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.Error",
          "description": "The operation error.",
          "x-ms-mutability": [
            "update"
          ]
        },
        "lastModifiedBy": {
          "type": "string",
          "description": "The identifier of the service that was last to modify the operation status.",
          "x-ms-mutability": [
            "read",
            "update"
          ]
        },
        "resultLocation": {
          "$ref": "#/definitions/uri",
          "description": "The result resource location (URI).",
          "x-ms-mutability": [
            "read",
            "update",
            "create"
          ]
        },
        "etag": {
          "type": "string",
          "description": "The entity tag for this resource.",
          "x-ms-mutability": [
            "read",
            "update"
          ]
        }
      },
      "description": "LRO of UploadOperationType type",
      "required": [
        "operationId",
        "status",
        "lastModifiedBy",
        "etag"
      ]
    },
    "Ingestion.Upload.UploadOperationErrorCode": {
      "type": "string",
      "description": "Known upload types.",
      "enum": [
        "Succeeded",
        "UploadManifestNotFound",
        "InvalidUploadManifestFormat",
        "InvalidDiskFolderStructure",
        "InvalidSpecialFileFormat",
        "DataPoolMismatch",
        "SpecialFileNotFound",
        "MissingDataFiles",
        "Unknown"
      ],
      "x-ms-enum": {
        "name": "UploadOperationErrorCode",
        "modelAsString": true,
        "values": [
          {
            "name": "Succeeded",
            "value": "Succeeded",
            "description": "The operation has succeeded"
          },
          {
            "name": "UploadManifestNotFound",
            "value": "UploadManifestNotFound",
            "description": "Upload manifest file doesn't exist"
          },
          {
            "name": "InvalidUploadManifestFormat",
            "value": "InvalidUploadManifestFormat",
            "description": "Invalid upload manifest format"
          },
          {
            "name": "InvalidDiskFolderStructure",
            "value": "InvalidDiskFolderStructure",
            "description": "Invalid disk structure"
          },
          {
            "name": "InvalidSpecialFileFormat",
            "value": "InvalidSpecialFileFormat",
            "description": "One or more special files was of an invalid format"
          },
          {
            "name": "DataPoolMismatch",
            "value": "DataPoolMismatch",
            "description": "One or more special files assigned the measurement to a different data pool than that of the upload."
          },
          {
            "name": "SpecialFileNotFound",
            "value": "SpecialFileNotFound",
            "description": "One or more special files doesn't exist"
          },
          {
            "name": "MissingDataFiles",
            "value": "MissingDataFiles",
            "description": "Expected data files are missing from one or more shards"
          },
          {
            "name": "Unknown",
            "value": "Unknown",
            "description": "The operation has failed with an unexpected error"
          }
        ]
      }
    },
    "Ingestion.Upload.UploadOperationErrorCodeKV": {
      "type": "string",
      "enum": [
        "Succeeded",
        "UploadManifestNotFound",
        "InvalidUploadManifestFormat",
        "InvalidDiskFolderStructure",
        "InvalidSpecialFileFormat",
        "DataPoolMismatch",
        "SpecialFileNotFound",
        "MissingDataFiles",
        "Unknown"
      ],
      "x-ms-enum": {
        "name": "UploadOperationErrorCodeKV",
        "modelAsString": false,
        "values": [
          {
            "name": "Succeeded",
            "value": "Succeeded",
            "description": "The operation has succeeded"
          },
          {
            "name": "UploadManifestNotFound",
            "value": "UploadManifestNotFound",
            "description": "Upload manifest file doesn't exist"
          },
          {
            "name": "InvalidUploadManifestFormat",
            "value": "InvalidUploadManifestFormat",
            "description": "Invalid upload manifest format"
          },
          {
            "name": "InvalidDiskFolderStructure",
            "value": "InvalidDiskFolderStructure",
            "description": "Invalid disk structure"
          },
          {
            "name": "InvalidSpecialFileFormat",
            "value": "InvalidSpecialFileFormat",
            "description": "One or more special files was of an invalid format"
          },
          {
            "name": "DataPoolMismatch",
            "value": "DataPoolMismatch",
            "description": "One or more special files assigned the measurement to a different data pool than that of the upload."
          },
          {
            "name": "SpecialFileNotFound",
            "value": "SpecialFileNotFound",
            "description": "One or more special files doesn't exist"
          },
          {
            "name": "MissingDataFiles",
            "value": "MissingDataFiles",
            "description": "Expected data files are missing from one or more shards"
          },
          {
            "name": "Unknown",
            "value": "Unknown",
            "description": "The operation has failed with an unexpected error"
          }
        ]
      }
    },
    "Ingestion.Upload.UploadOperationType": {
      "type": "string",
      "description": "Known upload operation types.",
      "enum": [
        "FinalizeFileList",
        "ShardFiles",
        "CompleteUpload",
        "AbortUpload"
      ],
      "x-ms-enum": {
        "name": "UploadOperationType",
        "modelAsString": true,
        "values": [
          {
            "name": "FinalizeFileList",
            "value": "FinalizeFileList",
            "description": "The process of finalizing the file list of the upload"
          },
          {
            "name": "ShardFiles",
            "value": "ShardFiles",
            "description": "The process of sharding the files for the upload"
          },
          {
            "name": "CompleteUpload",
            "value": "CompleteUpload",
            "description": "The process of completing the upload"
          },
          {
            "name": "AbortUpload",
            "value": "AbortUpload",
            "description": "The process of cancelling the upload"
          }
        ]
      }
    },
    "Ingestion.Upload.UploadOperationTypeKV": {
      "type": "string",
      "description": "The supported operations of the upload",
      "enum": [
        "FinalizeFileList",
        "ShardFiles",
        "CompleteUpload",
        "AbortUpload"
      ],
      "x-ms-enum": {
        "name": "UploadOperationTypeKV",
        "modelAsString": false,
        "values": [
          {
            "name": "FinalizeFileList",
            "value": "FinalizeFileList",
            "description": "The process of finalizing the file list of the upload"
          },
          {
            "name": "ShardFiles",
            "value": "ShardFiles",
            "description": "The process of sharding the files for the upload"
          },
          {
            "name": "CompleteUpload",
            "value": "CompleteUpload",
            "description": "The process of completing the upload"
          },
          {
            "name": "AbortUpload",
            "value": "AbortUpload",
            "description": "The process of cancelling the upload"
          }
        ]
      }
    },
    "Ingestion.Upload.UploadRead": {
      "type": "object",
      "properties": {
        "externalPackageId": {
          "type": "string",
          "description": "ID of the external package (for example, the disk which contained data) which was used upon the creation of upload.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "discoveryId": {
          "type": "string",
          "description": "The discovery identifier.",
          "minLength": 1,
          "maxLength": 36,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "manifestUri": {
          "$ref": "#/definitions/uri",
          "description": "SAS signed URI for uploading or reading the upload manifest file on Azure Storage.\nNote, if the upload status is 'Created' then the URI is signed with 'Write' permissions, otherwise with 'Read' permission.\nThis URI expires in 24 hours.",
          "readOnly": true
        },
        "status": {
          "$ref": "#/definitions/Ingestion.Upload.UploadStatus",
          "description": "The upload state",
          "x-ms-mutability": [
            "read",
            "update"
          ]
        },
        "resourceEndpoint": {
          "$ref": "#/definitions/uri",
          "description": "The endpoint uri of the owning resource",
          "readOnly": true
        },
        "etag": {
          "type": "string",
          "description": "The entity tag for this resource.",
          "x-ms-mutability": [
            "read",
            "update"
          ]
        }
      },
      "description": "An upload resource.",
      "required": [
        "etag"
      ]
    },
    "Ingestion.Upload.UploadResultMeasurement": {
      "type": "object",
      "properties": {
        "measurementId": {
          "type": "string",
          "description": "Measurement identifier."
        }
      },
      "description": "A measurement resource created as result of the upload.",
      "required": [
        "measurementId"
      ]
    },
    "Ingestion.Upload.UploadResultsResponse": {
      "type": "object",
      "properties": {
        "uploadId": {
          "type": "string",
          "description": "The upload identifier.",
          "minLength": 1,
          "maxLength": 36
        },
        "resourceEndpoint": {
          "$ref": "#/definitions/uri",
          "description": "The endpoint uri of the owning resource",
          "readOnly": true
        },
        "measurementIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-cadl-name": "string[]",
          "description": "The measurement IDs that been created by the upload"
        }
      },
      "description": "A response providing the results of an upload",
      "required": [
        "uploadId",
        "measurementIds"
      ]
    },
    "Ingestion.Upload.UploadSpecialFile": {
      "type": "object",
      "properties": {
        "clientFileName": {
          "type": "string",
          "description": "File name specified by the client"
        },
        "fileUri": {
          "$ref": "#/definitions/uri",
          "description": "SAS signed URI for uploading (write) file to Azure Storage.\nThis URI expires in 24 hours."
        }
      },
      "description": "Special file resource.",
      "required": [
        "clientFileName",
        "fileUri"
      ]
    },
    "Ingestion.Upload.UploadSpecialFilesResponse": {
      "type": "object",
      "properties": {
        "uploadId": {
          "type": "string",
          "description": "The upload identifier.",
          "minLength": 1,
          "maxLength": 36
        },
        "resourceEndpoint": {
          "$ref": "#/definitions/uri",
          "description": "The endpoint uri of the owning resource",
          "readOnly": true
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Adp.FileUploadInformation"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "Adp.FileUploadInformation[]",
          "description": "List of the special files"
        }
      },
      "description": "A response describing the list of special files to be uploaded",
      "required": [
        "uploadId",
        "files"
      ]
    },
    "Ingestion.Upload.UploadStatus": {
      "type": "string",
      "description": "Known upload types.",
      "enum": [
        "Created",
        "GeneratingSpecialFilesUploadInfo",
        "GeneratedSpecialFilesUploadInfo",
        "GeneratingDataFilesUploadInfo",
        "GeneratedDataFilesUploadInfo",
        "Completing",
        "Completed",
        "Aborting",
        "Aborted",
        "Failed"
      ],
      "x-ms-enum": {
        "name": "UploadStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "Created",
            "value": "Created",
            "description": "The upload process has been initiated. The client should upload the upload manifest file using the SAS-signed upload URI provided by the system"
          },
          {
            "name": "GeneratingSpecialFilesUploadInfo",
            "value": "GeneratingSpecialFilesUploadInfo",
            "description": "The system is analyzing the upload manifest file uploaded by the client and generating the upload information for uploading special files."
          },
          {
            "name": "GeneratedSpecialFilesUploadInfo",
            "value": "GeneratedSpecialFilesUploadInfo",
            "description": "The system has analyzed the upload manifest file and generated the upload information for uploading special files."
          },
          {
            "name": "GeneratingDataFilesUploadInfo",
            "value": "GeneratingDataFilesUploadInfo",
            "description": "The system is sharding the files and generating the upload information for uploading data files."
          },
          {
            "name": "GeneratedDataFilesUploadInfo",
            "value": "GeneratedDataFilesUploadInfo",
            "description": "The system has sharded the files and generated the upload information for uploading data files. The client should upload the measurement files using the SAS-signed upload URIs provided by the system."
          },
          {
            "name": "Completing",
            "value": "Completing",
            "description": "The system is completing the upload process (creating measurements etc.)"
          },
          {
            "name": "Completed",
            "value": "Completed",
            "description": "The system completed the upload process"
          },
          {
            "name": "Aborting",
            "value": "Aborting",
            "description": "The system is cancelling the upload process"
          },
          {
            "name": "Aborted",
            "value": "Aborted",
            "description": "The system cancelled the upload process"
          },
          {
            "name": "Failed",
            "value": "Failed",
            "description": "The system marked the upload process as failed"
          }
        ]
      }
    },
    "Ingestion.Upload.UploadStatusKV": {
      "type": "string",
      "description": "The state of the upload",
      "enum": [
        "Created",
        "GeneratingSpecialFilesUploadInfo",
        "GeneratedSpecialFilesUploadInfo",
        "GeneratingDataFilesUploadInfo",
        "GeneratedDataFilesUploadInfo",
        "Completing",
        "Completed",
        "Aborting",
        "Aborted",
        "Failed"
      ],
      "x-ms-enum": {
        "name": "UploadStatusKV",
        "modelAsString": false,
        "values": [
          {
            "name": "Created",
            "value": "Created",
            "description": "The upload process has been initiated. The client should upload the upload manifest file using the SAS-signed upload URI provided by the system"
          },
          {
            "name": "GeneratingSpecialFilesUploadInfo",
            "value": "GeneratingSpecialFilesUploadInfo",
            "description": "The system is analyzing the upload manifest file uploaded by the client and generating the upload information for uploading special files."
          },
          {
            "name": "GeneratedSpecialFilesUploadInfo",
            "value": "GeneratedSpecialFilesUploadInfo",
            "description": "The system has analyzed the upload manifest file and generated the upload information for uploading special files."
          },
          {
            "name": "GeneratingDataFilesUploadInfo",
            "value": "GeneratingDataFilesUploadInfo",
            "description": "The system is sharding the files and generating the upload information for uploading data files."
          },
          {
            "name": "GeneratedDataFilesUploadInfo",
            "value": "GeneratedDataFilesUploadInfo",
            "description": "The system has sharded the files and generated the upload information for uploading data files. The client should upload the measurement files using the SAS-signed upload URIs provided by the system."
          },
          {
            "name": "Completing",
            "value": "Completing",
            "description": "The system is completing the upload process (creating measurements etc.)"
          },
          {
            "name": "Completed",
            "value": "Completed",
            "description": "The system completed the upload process"
          },
          {
            "name": "Aborting",
            "value": "Aborting",
            "description": "The system is cancelling the upload process"
          },
          {
            "name": "Aborted",
            "value": "Aborted",
            "description": "The system cancelled the upload process"
          },
          {
            "name": "Failed",
            "value": "Failed",
            "description": "The system marked the upload process as failed"
          }
        ]
      }
    },
    "Measurement.Classification.MeasurementClassification": {
      "type": "object",
      "properties": {
        "schemaName": {
          "type": "string",
          "description": "Classification schema name.",
          "minLength": 1,
          "maxLength": 256
        },
        "classificationObject": {
          "type": "string",
          "description": "Classification object model (JSON as string)",
          "minLength": 2,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "etag": {
          "type": "string",
          "description": "The entity tag for this resource.",
          "x-ms-mutability": [
            "read",
            "update"
          ]
        }
      },
      "description": "Measurement classification",
      "required": [
        "schemaName",
        "classificationObject",
        "etag"
      ]
    },
    "Measurement.Classification.MeasurementClassificationCreationParameters": {
      "type": "object",
      "properties": {
        "schemaName": {
          "type": "string",
          "description": "Classification schema name.",
          "minLength": 1,
          "maxLength": 256
        },
        "classificationObject": {
          "type": "string",
          "description": "Classification object model (JSON as string)",
          "minLength": 2,
          "x-ms-mutability": [
            "read",
            "create"
          ]
        }
      },
      "description": "MeasurementClassification resource creation parameters.",
      "required": [
        "schemaName",
        "classificationObject"
      ]
    },
    "Measurement.CompleteUploadMetadataFileRequest": {
      "type": "object",
      "properties": {
        "pendingFileETag": {
          "type": "string",
          "description": "The ETag of the uploaded metadata file"
        }
      },
      "description": "Request parameters for the complete upload metadata file API",
      "required": [
        "pendingFileETag"
      ]
    },
    "Measurement.Measurement": {
      "type": "object",
      "properties": {
        "measurementId": {
          "type": "string",
          "description": "The measurement identifier."
        },
        "location": {
          "type": "string",
          "description": "The storage account location which contains the measurement"
        },
        "ingestTimestampUtc": {
          "type": "string",
          "format": "date-time",
          "description": "The UTC time the measurement was ingested at"
        },
        "resourceEndpoint": {
          "$ref": "#/definitions/uri",
          "description": "The endpoint uri of the owning resource",
          "readOnly": true
        },
        "externalPackageId": {
          "type": "string",
          "description": " The ID of the external package (for example, the disk which contained data) as specified by the customer upon data ingestion"
        },
        "uploadId": {
          "type": "string",
          "description": "ID of the upload process which caused the creation of this measurement"
        },
        "discoveryId": {
          "type": "string",
          "description": "ID of the discovery process which caused the creation of this measurement"
        },
        "recordTimestampUtc": {
          "type": "string",
          "format": "date-time",
          "description": "The UTC time the measurement was recorded at"
        },
        "etag": {
          "type": "string",
          "description": "The entity tag for this resource.",
          "x-ms-mutability": [
            "read",
            "update"
          ]
        }
      },
      "description": "A measurement resource",
      "required": [
        "measurementId",
        "location",
        "etag"
      ]
    },
    "Measurement.MeasurementIdList": {
      "type": "object",
      "properties": {
        "measurementIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-cadl-name": "string[]",
          "description": "The measurement IDs list"
        }
      },
      "description": "A wrapper for the List of measurements IDs",
      "required": [
        "measurementIds"
      ]
    },
    "Measurement.MeasurementListRequestParameters": {
      "type": "object",
      "properties": {
        "measurementIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-cadl-name": "string[]",
          "description": "The measurement IDs list"
        }
      },
      "description": "A wrapper for the List of measurements IDs",
      "required": [
        "measurementIds"
      ]
    },
    "Measurement.MeasurementMetadata": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/Adp.SingletonIdentifier",
          "description": "The MeasurementMetadata identifier.\nNot in use as this is a singleton resource.\nTODO: check with CADL team how to define a singleton child resource without key."
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-cadl-name": "Record<string>",
          "description": "The measurement metadata dictionary"
        }
      },
      "description": "Measurement metadata.",
      "required": [
        "id",
        "metadata"
      ]
    },
    "Measurement.MeasurementMetadataBase": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-cadl-name": "Record<string>",
          "description": "The measurement metadata dictionary"
        }
      },
      "description": "Measurement metadata without resource identifier.",
      "required": [
        "metadata"
      ]
    },
    "Measurement.MeasurementMetadataFileInfo": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/Adp.SingletonIdentifier",
          "description": "The MeasurementMetadataFileInfo identifier.\nNot in use as this is a singleton resource.\nTODO: check with CADL team how to define a singleton child resource without key."
        },
        "metadataFileName": {
          "type": "string",
          "description": "The measurement's metadata file name"
        },
        "metadataFileUri": {
          "$ref": "#/definitions/uri",
          "description": "SAS signed URI to measurement metadata file.\nIf file already exists on storage then ETag of this file will be returned in the response header.\nThis URI expires in 24 hours."
        }
      },
      "description": "Measurement metadata file information resource.",
      "required": [
        "id",
        "metadataFileName",
        "metadataFileUri"
      ]
    },
    "Measurement.MeasurementMetadataFileInfoBase": {
      "type": "object",
      "properties": {
        "metadataFileName": {
          "type": "string",
          "description": "The measurement's metadata file name"
        },
        "metadataFileUri": {
          "$ref": "#/definitions/uri",
          "description": "SAS signed URI to measurement metadata file.\nIf file already exists on storage then ETag of this file will be returned in the response header.\nThis URI expires in 24 hours."
        }
      },
      "description": "Measurement metadata file information model.",
      "required": [
        "metadataFileName",
        "metadataFileUri"
      ]
    },
    "Measurement.MeasurementMetadataSchemaFileInfo": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/Adp.SingletonIdentifier",
          "description": "The MeasurementMetadataSchemaFileInfo identifier.\nNot in use as this is a singleton resource.\nTODO: check with CADL team how to define a singleton child resource without key."
        },
        "schemaFileName": {
          "type": "string",
          "description": "Measurement schema file name."
        },
        "schemaFileUri": {
          "$ref": "#/definitions/uri",
          "description": "SAS signed URI for downloading the measurement metadata schema file from Azure Storage.\nThis URI expires in 24 hours."
        }
      },
      "description": "Measurement metadata schema file information resource.",
      "required": [
        "id",
        "schemaFileUri"
      ]
    },
    "Measurement.MeasurementMetadataSchemaFileInfoBase": {
      "type": "object",
      "properties": {
        "schemaFileName": {
          "type": "string",
          "description": "Measurement schema file name."
        },
        "schemaFileUri": {
          "$ref": "#/definitions/uri",
          "description": "SAS signed URI for downloading the measurement metadata schema file from Azure Storage.\nThis URI expires in 24 hours."
        }
      },
      "description": "Measurement metadata schema file information model.",
      "required": [
        "schemaFileUri"
      ]
    },
    "Measurement.MeasurementProcessingResults": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/Adp.SingletonIdentifier",
          "description": "The MeasurementProcessingResults identifier.\nNot in use as this is a singleton resource.\nTODO: check with CADL team how to define a singleton child resource without key."
        },
        "validationPassed": {
          "type": "boolean",
          "description": "The measurement's validity"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Measurement.MeasurementRuleValidationResult"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "Measurement.MeasurementRuleValidationResult[]",
          "description": "The measurement's rule validation results"
        }
      },
      "description": "Measurement processing result.",
      "required": [
        "id"
      ]
    },
    "Measurement.MeasurementProcessingResultsBase": {
      "type": "object",
      "properties": {
        "validationPassed": {
          "type": "boolean",
          "description": "The measurement's validity"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Measurement.MeasurementRuleValidationResult"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "Measurement.MeasurementRuleValidationResult[]",
          "description": "The measurement's rule validation results"
        }
      },
      "description": "The measurement's validation result"
    },
    "Measurement.MeasurementRuleValidationResult": {
      "type": "object",
      "properties": {
        "ruleCategory": {
          "type": "string",
          "description": "Measurement validation rule category"
        },
        "ruleName": {
          "type": "string",
          "description": "Measurement validation rule name"
        },
        "details": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-cadl-name": "Record<string>",
          "description": "Measurement validation rule metadata"
        },
        "validationPassed": {
          "type": "boolean",
          "description": "Measurement validation rule evaluation result"
        },
        "validationError": {
          "type": "string",
          "description": "Measurement validation error message"
        }
      },
      "description": "The result of evaluation of measurement validation rule"
    },
    "Measurement.MeasurementWithMetadata": {
      "type": "object",
      "properties": {
        "measurementId": {
          "type": "string",
          "description": "The measurement identifier."
        },
        "location": {
          "type": "string",
          "description": "The storage account location which contains the measurement"
        },
        "ingestTimestampUtc": {
          "type": "string",
          "format": "date-time",
          "description": "The UTC time the measurement was ingested at"
        },
        "resourceEndpoint": {
          "$ref": "#/definitions/uri",
          "description": "The endpoint uri of the owning resource",
          "readOnly": true
        },
        "externalPackageId": {
          "type": "string",
          "description": " The ID of the external package (for example, the disk which contained data) as specified by the customer upon data ingestion"
        },
        "uploadId": {
          "type": "string",
          "description": "ID of the upload process which caused the creation of this measurement"
        },
        "discoveryId": {
          "type": "string",
          "description": "ID of the discovery process which caused the creation of this measurement"
        },
        "recordTimestampUtc": {
          "type": "string",
          "format": "date-time",
          "description": "The UTC time the measurement was recorded at"
        },
        "etag": {
          "type": "string",
          "description": "The entity tag for this resource.",
          "x-ms-mutability": [
            "read",
            "update"
          ]
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-cadl-name": "Record<string>",
          "description": "The measurement metadata dictionary"
        }
      },
      "description": "Custom query data set: Measurement and metadata.",
      "required": [
        "measurementId",
        "location",
        "etag",
        "metadata"
      ]
    },
    "Measurement.StateMachine": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The state machine identifier."
        },
        "type": {
          "type": "string",
          "description": "Type of the state machine"
        },
        "availableActionNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-cadl-name": "string[]",
          "description": "Type of the state machine"
        }
      },
      "description": "State machine",
      "required": [
        "id",
        "type",
        "availableActionNames"
      ]
    },
    "Measurement.StateMachineAction": {
      "type": "object",
      "properties": {
        "actionName": {
          "type": "string",
          "description": "The state machine action name."
        }
      },
      "description": "State machine action name.",
      "required": [
        "actionName"
      ]
    },
    "PagedClassificationSchema": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClassificationSchema.ClassificationSchema"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "ClassificationSchema.ClassificationSchema[]",
          "description": "The ClassificationSchema items on this page"
        },
        "nextLink": {
          "type": "string",
          "description": "The link to the next page of items",
          "format": "uri",
          "x-cadl-name": "Rest.ResourceLocation<ClassificationSchema.ClassificationSchema>"
        }
      },
      "description": "Paged collection of ClassificationSchema items",
      "required": [
        "value"
      ]
    },
    "PagedDataStream": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataStream.DataStream"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "DataStream.DataStream[]",
          "description": "The DataStream items on this page"
        },
        "nextLink": {
          "type": "string",
          "description": "The link to the next page of items",
          "format": "uri",
          "x-cadl-name": "Rest.ResourceLocation<DataStream.DataStream>"
        }
      },
      "description": "Paged collection of DataStream items",
      "required": [
        "value"
      ]
    },
    "PagedDataStreamClassification": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataStream.Classification.DataStreamClassification"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "DataStream.Classification.DataStreamClassification[]",
          "description": "The DataStreamClassification items on this page"
        },
        "nextLink": {
          "type": "string",
          "description": "The link to the next page of items",
          "format": "uri",
          "x-cadl-name": "Rest.ResourceLocation<DataStream.Classification.DataStreamClassification>"
        }
      },
      "description": "Paged collection of DataStreamClassification items",
      "required": [
        "value"
      ]
    },
    "PagedDataStreamFile": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataStream.DataStreamFile"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "DataStream.DataStreamFile[]",
          "description": "The DataStreamFile items on this page"
        },
        "nextLink": {
          "type": "string",
          "description": "The link to the next page of items",
          "format": "uri",
          "x-cadl-name": "Rest.ResourceLocation<DataStream.DataStreamFile>"
        }
      },
      "description": "Paged collection of DataStreamFile items",
      "required": [
        "value"
      ]
    },
    "PagedDataStreamsGraphListResponse": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataStream.DataStreamsGraphListResponse"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "DataStream.DataStreamsGraphListResponse[]",
          "description": "The DataStreamsGraphListResponse items on this page"
        },
        "nextLink": {
          "type": "string",
          "description": "The link to the next page of items",
          "format": "uri",
          "x-cadl-name": "Rest.ResourceLocation<DataStream.DataStreamsGraphListResponse>"
        }
      },
      "description": "Paged collection of DataStreamsGraphListResponse items",
      "required": [
        "value"
      ]
    },
    "PagedDiscoverySpecialFile": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Ingestion.Discovery.DiscoverySpecialFile"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "Ingestion.Discovery.DiscoverySpecialFile[]",
          "description": "The DiscoverySpecialFile items on this page"
        },
        "nextLink": {
          "type": "string",
          "description": "The link to the next page of items",
          "format": "uri",
          "x-cadl-name": "Rest.ResourceLocation<Ingestion.Discovery.DiscoverySpecialFile>"
        }
      },
      "description": "Paged collection of DiscoverySpecialFile items",
      "required": [
        "value"
      ]
    },
    "PagedDiscoveryUpload": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Ingestion.Discovery.DiscoveryUpload"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "Ingestion.Discovery.DiscoveryUpload[]",
          "description": "The DiscoveryUpload items on this page"
        },
        "nextLink": {
          "type": "string",
          "description": "The link to the next page of items",
          "format": "uri",
          "x-cadl-name": "Rest.ResourceLocation<Ingestion.Discovery.DiscoveryUpload>"
        }
      },
      "description": "Paged collection of DiscoveryUpload items",
      "required": [
        "value"
      ]
    },
    "PagedMeasurement": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Measurement.Measurement"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "Measurement.Measurement[]",
          "description": "The Measurement items on this page"
        },
        "nextLink": {
          "type": "string",
          "description": "The link to the next page of items",
          "format": "uri",
          "x-cadl-name": "Rest.ResourceLocation<Measurement.Measurement>"
        }
      },
      "description": "Paged collection of Measurement items",
      "required": [
        "value"
      ]
    },
    "PagedMeasurementClassification": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Measurement.Classification.MeasurementClassification"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "Measurement.Classification.MeasurementClassification[]",
          "description": "The MeasurementClassification items on this page"
        },
        "nextLink": {
          "type": "string",
          "description": "The link to the next page of items",
          "format": "uri",
          "x-cadl-name": "Rest.ResourceLocation<Measurement.Classification.MeasurementClassification>"
        }
      },
      "description": "Paged collection of MeasurementClassification items",
      "required": [
        "value"
      ]
    },
    "PagedMeasurementWithMetadata": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Measurement.MeasurementWithMetadata"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "Measurement.MeasurementWithMetadata[]",
          "description": "The MeasurementWithMetadata items on this page"
        },
        "nextLink": {
          "type": "string",
          "description": "The link to the next page of items",
          "format": "uri",
          "x-cadl-name": "Rest.ResourceLocation<Measurement.MeasurementWithMetadata>"
        }
      },
      "description": "Paged collection of MeasurementWithMetadata items",
      "required": [
        "value"
      ]
    },
    "PagedStateMachine": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Measurement.StateMachine"
          },
          "x-cadl-name": "Measurement.StateMachine[]",
          "description": "The StateMachine items on this page"
        },
        "nextLink": {
          "type": "string",
          "description": "The link to the next page of items",
          "format": "uri",
          "x-cadl-name": "Rest.ResourceLocation<Measurement.StateMachine>"
        }
      },
      "description": "Paged collection of StateMachine items",
      "required": [
        "value"
      ]
    },
    "PagedUploadDataFile": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Ingestion.Upload.UploadDataFile"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "Ingestion.Upload.UploadDataFile[]",
          "description": "The UploadDataFile items on this page"
        },
        "nextLink": {
          "type": "string",
          "description": "The link to the next page of items",
          "format": "uri",
          "x-cadl-name": "Rest.ResourceLocation<Ingestion.Upload.UploadDataFile>"
        }
      },
      "description": "Paged collection of UploadDataFile items",
      "required": [
        "value"
      ]
    },
    "PagedUploadResultMeasurement": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Ingestion.Upload.UploadResultMeasurement"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "Ingestion.Upload.UploadResultMeasurement[]",
          "description": "The UploadResultMeasurement items on this page"
        },
        "nextLink": {
          "type": "string",
          "description": "The link to the next page of items",
          "format": "uri",
          "x-cadl-name": "Rest.ResourceLocation<Ingestion.Upload.UploadResultMeasurement>"
        }
      },
      "description": "Paged collection of UploadResultMeasurement items",
      "required": [
        "value"
      ]
    },
    "PagedUploadSpecialFile": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Ingestion.Upload.UploadSpecialFile"
          },
          "x-ms-identifiers": [],
          "x-cadl-name": "Ingestion.Upload.UploadSpecialFile[]",
          "description": "The UploadSpecialFile items on this page"
        },
        "nextLink": {
          "type": "string",
          "description": "The link to the next page of items",
          "format": "uri",
          "x-cadl-name": "Rest.ResourceLocation<Ingestion.Upload.UploadSpecialFile>"
        }
      },
      "description": "Paged collection of UploadSpecialFile items",
      "required": [
        "value"
      ]
    },
    "uri": {
      "type": "string",
      "format": "uri"
    }
  },
  "parameters": {
    "Adp.LongRunningOperationIdHeader": {
      "name": "operation-id",
      "in": "header",
      "required": false,
      "description": "The long running operation identifier. Operation-Id should be valid UUID string.",
      "format": "uuid",
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "Azure.Core.FilterQueryParameter": {
      "name": "filter",
      "in": "query",
      "required": false,
      "description": "Filter the result list using the given expression.",
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "Azure.Core.Foundations.ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "required": true,
      "description": "The API version to use for this operation.",
      "minLength": 1,
      "type": "string",
      "x-ms-parameter-location": "method"
    }
  }
}
