// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.adp;

import com.azure.adp.implementation.UploadsImpl;
import com.azure.adp.models.Upload;
import com.azure.adp.models.UploadCreationParameters;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.polling.PollerFlux;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous AutonomousDevelopmentPlatformClient type. */
@ServiceClient(builder = UploadsClientBuilder.class, isAsync = true)
public final class UploadsAsyncClient {
    @Generated private final UploadsImpl serviceClient;

    /**
     * Initializes an instance of UploadsAsyncClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    UploadsAsyncClient(UploadsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Creates a new ingestion upload instance.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     externalPackageId: String (Optional)
     *     discoveryId: String (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     uploadId: String (Required)
     *     externalPackageId: String (Optional)
     *     discoveryId: String (Optional)
     *     manifestUploadUri: String (Optional)
     *     status: String(Created/GeneratingSpecialFilesUploadInfo/GeneratedSpecialFilesUploadInfo/GeneratingDataFilesUploadInfo/GeneratedDataFilesUploadInfo/Completing/Completed/Aborting/Aborted/Failed) (Optional)
     *     resourceEndpoint: String (Optional)
     * }
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an upload resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrReplaceWithResponse(String uploadId, RequestOptions requestOptions) {
        return this.serviceClient.createOrReplaceWithResponseAsync(uploadId, requestOptions);
    }

    /**
     * Get discovery by ID.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     uploadId: String (Required)
     *     externalPackageId: String (Optional)
     *     discoveryId: String (Optional)
     *     manifestUploadUri: String (Optional)
     *     status: String(Created/GeneratingSpecialFilesUploadInfo/GeneratedSpecialFilesUploadInfo/GeneratingDataFilesUploadInfo/GeneratedDataFilesUploadInfo/Completing/Completed/Aborting/Aborted/Failed) (Optional)
     *     resourceEndpoint: String (Optional)
     * }
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return discovery by ID along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponse(String uploadId, RequestOptions requestOptions) {
        return this.serviceClient.getWithResponseAsync(uploadId, requestOptions);
    }

    /**
     * Initiates the process of completing the upload and creating the measurements.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String (Required)
     *     status: String(Created/InProgress/Succeeded/Failed/Canceled) (Required)
     *     operationType: String(FinalizeFileList/ShardFiles/CompleteUpload/AbortUpload) (Optional)
     *     error: ResponseError (Optional)
     * }
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of the long running operation response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginComplete(String uploadId, RequestOptions requestOptions) {
        return this.serviceClient.beginCompleteAsync(uploadId, requestOptions);
    }

    /**
     * Initiates the process of cancelling the upload.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>operation-id</td><td>String</td><td>No</td><td>The long running operation identifier. Operation-Id should be valid UUID string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     operationId: String (Required)
     *     status: String(Created/InProgress/Succeeded/Failed/Canceled) (Required)
     *     operationType: String(FinalizeFileList/ShardFiles/CompleteUpload/AbortUpload) (Optional)
     *     error: ResponseError (Optional)
     * }
     * }</pre>
     *
     * @param uploadId The upload resource identifier.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of the long running operation response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginCancel(String uploadId, RequestOptions requestOptions) {
        return this.serviceClient.beginCancelAsync(uploadId, requestOptions);
    }

    /**
     * Creates a new ingestion upload instance.
     *
     * @param uploadId The upload resource identifier.
     * @param body Auto-generated wrapper for template parameter 'UploadCreationParameters'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an upload resource on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Upload> createOrReplace(String uploadId, UploadCreationParameters body) {
        // Generated convenience method for createOrReplaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (body != null) {
            requestOptions.setBody(BinaryData.fromObject(body));
        }
        return createOrReplaceWithResponse(uploadId, requestOptions)
                .map(Response::getValue)
                .map(protocolMethodData -> protocolMethodData.toObject(Upload.class));
    }

    /**
     * Creates a new ingestion upload instance.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an upload resource on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Upload> createOrReplace(String uploadId) {
        // Generated convenience method for createOrReplaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createOrReplaceWithResponse(uploadId, requestOptions)
                .map(Response::getValue)
                .map(protocolMethodData -> protocolMethodData.toObject(Upload.class));
    }

    /**
     * Get discovery by ID.
     *
     * @param uploadId The upload resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discovery by ID on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Upload> get(String uploadId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(uploadId, requestOptions)
                .map(Response::getValue)
                .map(protocolMethodData -> protocolMethodData.toObject(Upload.class));
    }
}
